{
  "declare": {
    "comments": "! @brief tcp 服务器对象，可方便创建一个标准多纤程 tcp 服务器\n\n 使用 TcpServer 对象可以迅速创建一个多纤程并发处理的 tcp 服务器。\n ```JavaScript\n function func(conn)\n {\n     var data;\n\n     while(data = conn.read())\n         conn.write(data);\n\n     conn.close();\n }\n\n new net.TcpServer(8080, func).start();\n ```\n ",
    "type": "interface",
    "name": "TcpServer",
    "extend": "object",
    "doc": {
      "descript": "tcp 服务器对象，可方便创建一个标准多纤程 tcp 服务器",
      "detail": [
        "使用 TcpServer 对象可以迅速创建一个多纤程并发处理的 tcp 服务器。",
        "```JavaScript",
        "function func(conn)",
        "{",
        "    var data;",
        "",
        "    while(data = conn.read())",
        "        conn.write(data);",
        "",
        "    conn.close();",
        "}",
        "",
        "new net.TcpServer(8080, func).start();",
        "```"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief TcpServer 构造函数，在所有本机地址侦听\n    @param port 指定 tcp 服务器侦听端口\n    @param listener 指定 tcp 接收到的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "TcpServer",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "port",
          "default": null
        },
        {
          "type": "Handler",
          "name": "listener",
          "default": null
        }
      ],
      "doc": {
        "descript": "TcpServer 构造函数，在所有本机地址侦听",
        "detail": [],
        "params": [
          {
            "name": "port",
            "descript": "指定 tcp 服务器侦听端口",
            "detail": []
          },
          {
            "name": "listener",
            "descript": "指定 tcp 接收到的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief TcpServer 构造函数\n    @param addr 指定 tcp 服务器侦听地址，为 \"\" 则在本机所有地址侦听\n    @param port 指定 tcp 服务器侦听端口\n    @param listener 指定 tcp 接收到的连接的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "TcpServer",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "addr",
          "default": null
        },
        {
          "type": "Integer",
          "name": "port",
          "default": null
        },
        {
          "type": "Handler",
          "name": "listener",
          "default": null
        }
      ],
      "doc": {
        "descript": "TcpServer 构造函数",
        "detail": [],
        "params": [
          {
            "name": "addr",
            "descript": "指定 tcp 服务器侦听地址，为 \"\" 则在本机所有地址侦听",
            "detail": []
          },
          {
            "name": "port",
            "descript": "指定 tcp 服务器侦听端口",
            "detail": []
          },
          {
            "name": "listener",
            "descript": "指定 tcp 接收到的连接的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief TcpServer 构造函数\n    @param addr 指定 unix socket 或者 Windows pipe 服务器侦听地址\n    @param listener 指定 tcp 接收到的连接的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "TcpServer",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "addr",
          "default": null
        },
        {
          "type": "Handler",
          "name": "listener",
          "default": null
        }
      ],
      "doc": {
        "descript": "TcpServer 构造函数",
        "detail": [],
        "params": [
          {
            "name": "addr",
            "descript": "指定 unix socket 或者 Windows pipe 服务器侦听地址",
            "detail": []
          },
          {
            "name": "listener",
            "descript": "指定 tcp 接收到的连接的内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 启动当前服务器 ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "start",
      "type": null,
      "params": null,
      "doc": {
        "descript": "启动当前服务器",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 关闭 socket中止正在运行的服务器 ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "stop",
      "type": null,
      "params": null,
      "doc": {
        "descript": "关闭 socket中止正在运行的服务器",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 服务器当前侦听的 Socket 对象  ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "socket",
      "type": "Socket",
      "doc": {
        "descript": "服务器当前侦听的 Socket 对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 服务器当前事件处理接口对象 ",
      "deprecated": null,
      "static": null,
      "readonly": null,
      "name": "handler",
      "type": "Handler",
      "doc": {
        "descript": "服务器当前事件处理接口对象",
        "detail": [],
        "params": []
      }
    }
  ]
}