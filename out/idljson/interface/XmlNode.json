{
  "declare": {
    "comments": "! @brief XmlNode 对象是整个 DOM 的基础数据类型\n ",
    "type": "interface",
    "name": "XmlNode",
    "extend": "object",
    "doc": {
      "descript": "XmlNode 对象是整个 DOM 的基础数据类型",
      "detail": [],
      "params": []
    }
  },
  "members": [
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的节点类型\n\n     不同对象的 nodeType 会返回不同的值：\n     - XmlElement: ELEMENT_NODE(1)\n     - XmlAttr: ATTRIBUTE_NODE(2)\n     - XmlText: TEXT_NODE(3)\n     - XmlCDATASection: CDATA_SECTION_NODE(4)\n     - XmlProcessingInstruction: PROCESSING_INSTRUCTION_NODE(7)\n     - XmlComment: COMMENT_NODE(8)\n     - XmlDocument: DOCUMENT_NODE(9)\n     - XmlDocumentType: DOCUMENT_TYPE_NODE(10)\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "nodeType",
      "type": "Integer",
      "doc": {
        "descript": "返回节点的节点类型",
        "detail": [
          "不同对象的 nodeType 会返回不同的值：",
          "- XmlElement: ELEMENT_NODE(1)",
          "- XmlAttr: ATTRIBUTE_NODE(2)",
          "- XmlText: TEXT_NODE(3)",
          "- XmlCDATASection: CDATA_SECTION_NODE(4)",
          "- XmlProcessingInstruction: PROCESSING_INSTRUCTION_NODE(7)",
          "- XmlComment: COMMENT_NODE(8)",
          "- XmlDocument: DOCUMENT_NODE(9)",
          "- XmlDocumentType: DOCUMENT_TYPE_NODE(10)"
        ],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的名称，根据其类型\n\n     不同对象的 nodeName 会返回不同的值：\n     - XmlElement: element name\n     - XmlAttr: 属性名称\n     - XmlText: \\#text\n     - XmlCDATASection: \\#cdata-section\n     - XmlProcessingInstruction: 返回指定目标 target\n     - XmlComment: \\#comment\n     - XmlDocument: \\#document\n     - XmlDocumentType: doctype 名称\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "nodeName",
      "type": "String",
      "doc": {
        "descript": "返回节点的名称，根据其类型",
        "detail": [
          "不同对象的 nodeName 会返回不同的值：",
          "- XmlElement: element name",
          "- XmlAttr: 属性名称",
          "- XmlText: \\#text",
          "- XmlCDATASection: \\#cdata-section",
          "- XmlProcessingInstruction: 返回指定目标 target",
          "- XmlComment: \\#comment",
          "- XmlDocument: \\#document",
          "- XmlDocumentType: doctype 名称"
        ],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的名称，根据其类型\n\n     不同对象的 nodeName 会返回不同的值：\n     - XmlElement: null\n     - XmlAttr: 属性的值\n     - XmlText: 节点的内容\n     - XmlCDATASection: 节点的内容\n     - XmlProcessingInstruction: 返回指定内容 data\n     - XmlComment: 注释文本\n     - XmlDocument: null\n     - XmlDocumentType: null\n    ",
      "deprecated": null,
      "static": null,
      "readonly": null,
      "name": "nodeValue",
      "type": "String",
      "doc": {
        "descript": "返回节点的名称，根据其类型",
        "detail": [
          "不同对象的 nodeName 会返回不同的值：",
          "- XmlElement: null",
          "- XmlAttr: 属性的值",
          "- XmlText: 节点的内容",
          "- XmlCDATASection: 节点的内容",
          "- XmlProcessingInstruction: 返回指定内容 data",
          "- XmlComment: 注释文本",
          "- XmlDocument: null",
          "- XmlDocumentType: null"
        ],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的根元素（XmlDocument 对象）\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "ownerDocument",
      "type": "XmlDocument",
      "doc": {
        "descript": "返回节点的根元素（XmlDocument 对象）",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 可返回某节点的父节点\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "parentNode",
      "type": "XmlNode",
      "doc": {
        "descript": "可返回某节点的父节点",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询是否存在子节点\n     @return 存在任何子节点时返回 true，否则返回 false\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "hasChildNodes",
      "type": "Boolean",
      "params": null,
      "doc": {
        "descript": "查询是否存在子节点",
        "detail": [],
        "params": [],
        "return": {
          "descript": "存在任何子节点时返回 true，否则返回 false",
          "detail": []
        }
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回指定节点的子节点的节点列表\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "childNodes",
      "type": "XmlNodeList",
      "doc": {
        "descript": "返回指定节点的子节点的节点列表",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的首个子节点\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "firstChild",
      "type": "XmlNode",
      "doc": {
        "descript": "返回节点的首个子节点",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回节点的最后一个子节点\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "lastChild",
      "type": "XmlNode",
      "doc": {
        "descript": "返回节点的最后一个子节点",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回某节点之前紧跟的节点（处于同一树层级），如果没有此节点，那么该属性返回 null\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "previousSibling",
      "type": "XmlNode",
      "doc": {
        "descript": "返回某节点之前紧跟的节点（处于同一树层级），如果没有此节点，那么该属性返回 null",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 返回某个元素之后紧跟的节点（处于同一树层级中），如果无此节点，则属性返回 null\n    ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "nextSibling",
      "type": "XmlNode",
      "doc": {
        "descript": "返回某个元素之后紧跟的节点（处于同一树层级中），如果无此节点，则属性返回 null",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 合并相邻的 Text 节点并删除空的 Text 节点\n\n    这个方法将遍历当前节点的所有子孙节点，通过删除空的 Text 节点，已经合并所有相邻的 Text 节点来规范化文档。该方法在进行节点的插入或删除操作后，对于简化文档树的结构很有用。\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "normalize",
      "type": null,
      "params": null,
      "doc": {
        "descript": "合并相邻的 Text 节点并删除空的 Text 节点",
        "detail": [
          "这个方法将遍历当前节点的所有子孙节点，通过删除空的 Text 节点，已经合并所有相邻的 Text 节点来规范化文档。该方法在进行节点的插入或删除操作后，对于简化文档树的结构很有用。"
        ],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建指定的节点的精确拷贝\n\n     该方法将复制并返回调用它的节点的副本。如果传递给它的参数是 true，它还将递归复制当前节点的所有子孙节点。 否则，它只复制当前节点。返回的节点不属于文档树，它的 parentNode 属性为 null。当复制的是 Element 节点时，它的所有属性都将被复制。\n     @param deep 是否深度拷贝，为 true 时，被克隆的节点会克隆原节点的所有子节点\n     @return 返回所复制的节点\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "cloneNode",
      "type": "XmlNode",
      "params": [
        {
          "type": "Boolean",
          "name": "deep",
          "default": {
            "value": "true"
          }
        }
      ],
      "doc": {
        "descript": "创建指定的节点的精确拷贝",
        "detail": [
          "该方法将复制并返回调用它的节点的副本。如果传递给它的参数是 true，它还将递归复制当前节点的所有子孙节点。 否则，它只复制当前节点。返回的节点不属于文档树，它的 parentNode 属性为 null。当复制的是 Element 节点时，它的所有属性都将被复制。"
        ],
        "params": [
          {
            "name": "deep",
            "descript": "是否深度拷贝，为 true 时，被克隆的节点会克隆原节点的所有子节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回所复制的节点",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回在当前节点上匹配指定的命名空间 URI 的前缀\n     @param namespaceURI 指定匹配的命名空间 URI\n     @return 返回匹配的前缀，未匹配到返回 null\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "lookupPrefix",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "namespaceURI",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回在当前节点上匹配指定的命名空间 URI 的前缀",
        "detail": [],
        "params": [
          {
            "name": "namespaceURI",
            "descript": "指定匹配的命名空间 URI",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回匹配的前缀，未匹配到返回 null",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回在当前节点上匹配指定的前缀的命名空间 URI\n     @param prefix 指定匹配的前缀\n     @return 返回匹配的命名空间 URI，未匹配到返回 null\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "lookupNamespaceURI",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "prefix",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回在当前节点上匹配指定的前缀的命名空间 URI",
        "detail": [],
        "params": [
          {
            "name": "prefix",
            "descript": "指定匹配的前缀",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回匹配的命名空间 URI，未匹配到返回 null",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在已有的子节点前插入一个新的子节点\n\n     如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。\n     @param newChild 插入新的节点\n     @param refChild 在此节点前插入新节点\n     @return 返回新的子节点\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "insertBefore",
      "type": "XmlNode",
      "params": [
        {
          "type": "XmlNode",
          "name": "newChild",
          "default": null
        },
        {
          "type": "XmlNode",
          "name": "refChild",
          "default": null
        }
      ],
      "doc": {
        "descript": "在已有的子节点前插入一个新的子节点",
        "detail": [
          "如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。"
        ],
        "params": [
          {
            "name": "newChild",
            "descript": "插入新的节点",
            "detail": []
          },
          {
            "name": "refChild",
            "descript": "在此节点前插入新节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回新的子节点",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在已有的子节点后插入一个新的子节点\n\n     如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。\n     @param newChild 插入新的节点\n     @param refChild 在此节点后插入新节点\n     @return 返回新的子节点\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "insertAfter",
      "type": "XmlNode",
      "params": [
        {
          "type": "XmlNode",
          "name": "newChild",
          "default": null
        },
        {
          "type": "XmlNode",
          "name": "refChild",
          "default": null
        }
      ],
      "doc": {
        "descript": "在已有的子节点后插入一个新的子节点",
        "detail": [
          "如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。"
        ],
        "params": [
          {
            "name": "newChild",
            "descript": "插入新的节点",
            "detail": []
          },
          {
            "name": "refChild",
            "descript": "在此节点后插入新节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回新的子节点",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向节点的子节点列表的末尾添加新的子节点\n\n     如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。\n     @param newChild 指定添加的节点\n     @return 返回这个新的子节点\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "appendChild",
      "type": "XmlNode",
      "params": [
        {
          "type": "XmlNode",
          "name": "newChild",
          "default": null
        }
      ],
      "doc": {
        "descript": "向节点的子节点列表的末尾添加新的子节点",
        "detail": [
          "如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。"
        ],
        "params": [
          {
            "name": "newChild",
            "descript": "指定添加的节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回这个新的子节点",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将某个子节点替换为另一个\n\n     如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。\n     @param newChild 指定新的节点\n     @param oldChild 指定被替换的节点\n     @return 如替换成功，此方法可返回被替换的节点，如替换失败，则返回 null\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "replaceChild",
      "type": "XmlNode",
      "params": [
        {
          "type": "XmlNode",
          "name": "newChild",
          "default": null
        },
        {
          "type": "XmlNode",
          "name": "oldChild",
          "default": null
        }
      ],
      "doc": {
        "descript": "将某个子节点替换为另一个",
        "detail": [
          "如果文档树中已经存在了 newChild，它将从文档树中删除，然后重新插入它的新位置。来自一个文档的节点（或由一个文档创建的节点）不能插入另一个文档。也就是说，newChild 的 ownerDocument 属性必须与当前节点的 ownerDocument 属性相同。"
        ],
        "params": [
          {
            "name": "newChild",
            "descript": "指定新的节点",
            "detail": []
          },
          {
            "name": "oldChild",
            "descript": "指定被替换的节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "如替换成功，此方法可返回被替换的节点，如替换失败，则返回 null",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从子节点列表中删除某个节点\n     @param oldChild 指定被删除的节点\n     @return 如删除成功，此方法可返回被删除的节点，如失败，则返回 null\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "removeChild",
      "type": "XmlNode",
      "params": [
        {
          "type": "XmlNode",
          "name": "oldChild",
          "default": null
        }
      ],
      "doc": {
        "descript": "从子节点列表中删除某个节点",
        "detail": [],
        "params": [
          {
            "name": "oldChild",
            "descript": "指定被删除的节点",
            "detail": []
          }
        ],
        "return": {
          "descript": "如删除成功，此方法可返回被删除的节点，如失败，则返回 null",
          "detail": []
        }
      }
    }
  ]
}