{
  "declare": {
    "comments": "! @brief dgram.Socket 对象是一个封装了数据包函数功能的 EventEmitter。\n\nDgramSocket 实例是由 dgram.createSocket() 创建的。创建 dgram.Socket 实例不需要使用 new 关键字。\n\n创建方法：\n```JavaScript\nvar dgram = require('dgram');\nvar sock = dgram.createSocket('udp4');\n```\n\n## 事件\n DgramSocket 继承于 EventEmitter，对象的状态变化，以及数据接受，都是以事件的方式实现。\n\n ### close 事件\n ** `close` 事件将在使用 `close()` 关闭一个 `socket` 之后触发。该事件一旦触发，这个 `socket` 上将不会触发新的 `message` 事件。**\n\n ### error 事件\n ** 当有任何错误发生时，`error` 事件将被触发。 **\n\n ### listening 事件\n ** 当一个 `socket` 开始监听数据包信息时，`listening` 事件将被触发。该事件会在创建 UDP socket 之后被立即触发。 **\n\n ### message 事件\n ** 当有新的数据包被 `socket` 接收时，`message` 事件会被触发。`msg` 和 `rinfo` 会作为参数传递到该事件的处理函数中。 **\n - msg: Buffer，消息\n - rinfo: Object，远程地址信息\n    - address: string，发送方地址\n    - family: string，地址类型 ('IPv4' or 'IPv6')\n    - port: number，发送者端口\n    - size: number，消息大小\n ",
    "type": "interface",
    "name": "DgramSocket",
    "extend": "EventEmitter",
    "doc": {
      "descript": "dgram.Socket 对象是一个封装了数据包函数功能的 EventEmitter。",
      "detail": [
        "DgramSocket 实例是由 dgram.createSocket() 创建的。创建 dgram.Socket 实例不需要使用 new 关键字。",
        "",
        "创建方法：",
        "```JavaScript",
        "var dgram = require('dgram');",
        "var sock = dgram.createSocket('udp4');",
        "```",
        "",
        "## 事件",
        "DgramSocket 继承于 EventEmitter，对象的状态变化，以及数据接受，都是以事件的方式实现。",
        "",
        "### close 事件",
        "** `close` 事件将在使用 `close()` 关闭一个 `socket` 之后触发。该事件一旦触发，这个 `socket` 上将不会触发新的 `message` 事件。**",
        "",
        "### error 事件",
        "** 当有任何错误发生时，`error` 事件将被触发。 **",
        "",
        "### listening 事件",
        "** 当一个 `socket` 开始监听数据包信息时，`listening` 事件将被触发。该事件会在创建 UDP socket 之后被立即触发。 **",
        "",
        "### message 事件",
        "** 当有新的数据包被 `socket` 接收时，`message` 事件会被触发。`msg` 和 `rinfo` 会作为参数传递到该事件的处理函数中。 **",
        "- msg: Buffer，消息",
        "- rinfo: Object，远程地址信息",
        "   - address: string，发送方地址",
        "   - family: string，地址类型 ('IPv4' or 'IPv6')",
        "   - port: number，发送者端口",
        "   - size: number，消息大小"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief 该方法会令 dgram.Socket 在指定的 `port` 和 `addr` 上监听数据包信息。绑定完成时会触发一个 `listening` 事件。\n     @param port 指定绑定端口，若 `port` 未指定或为 0，操作系统会尝试绑定一个随机的端口\n     @param addr 指定绑定地址，若 address 未指定，操作系统会尝试在所有地址上监听。\n    ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "bind",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "port",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "String",
          "name": "addr",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "该方法会令 dgram.Socket 在指定的 `port` 和 `addr` 上监听数据包信息。绑定完成时会触发一个 `listening` 事件。",
        "detail": [],
        "params": [
          {
            "name": "port",
            "descript": "指定绑定端口，若 `port` 未指定或为 0，操作系统会尝试绑定一个随机的端口",
            "detail": []
          },
          {
            "name": "addr",
            "descript": "指定绑定地址，若 address 未指定，操作系统会尝试在所有地址上监听。",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 该方法会令 dgram.Socket 在 `opts` 指定的 `port` 和 `address` 上监听数据包信息。绑定完成时会触发一个 `listening` 事件。\n     @param opts 指定绑定参数\n    ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "bind",
      "type": null,
      "params": [
        {
          "type": "Object",
          "name": "opts",
          "default": null
        }
      ],
      "doc": {
        "descript": "该方法会令 dgram.Socket 在 `opts` 指定的 `port` 和 `address` 上监听数据包信息。绑定完成时会触发一个 `listening` 事件。",
        "detail": [],
        "params": [
          {
            "name": "opts",
            "descript": "指定绑定参数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在 socket 上发送一个数据包\n     @param msg 指定发送的数据\n     @param port 指定发送的目的端口\n     @param address 指定发送的目的地址\n     @return 返回发送尺寸\n    ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "send",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "msg",
          "default": null
        },
        {
          "type": "Integer",
          "name": "port",
          "default": null
        },
        {
          "type": "String",
          "name": "address",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "在 socket 上发送一个数据包",
        "detail": [],
        "params": [
          {
            "name": "msg",
            "descript": "指定发送的数据",
            "detail": []
          },
          {
            "name": "port",
            "descript": "指定发送的目的端口",
            "detail": []
          },
          {
            "name": "address",
            "descript": "指定发送的目的地址",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回发送尺寸",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在 socket 上发送一个数据包\n     @param msg 指定发送的数据\n     @param offset 从指定偏移开始发送\n     @param length 之发送指定长度\n     @param port 指定发送的目的端口\n     @param address 指定发送的目的地址\n     @return 返回发送尺寸\n    ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "send",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "msg",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": null
        },
        {
          "type": "Integer",
          "name": "length",
          "default": null
        },
        {
          "type": "Integer",
          "name": "port",
          "default": null
        },
        {
          "type": "String",
          "name": "address",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "在 socket 上发送一个数据包",
        "detail": [],
        "params": [
          {
            "name": "msg",
            "descript": "指定发送的数据",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "从指定偏移开始发送",
            "detail": []
          },
          {
            "name": "length",
            "descript": "之发送指定长度",
            "detail": []
          },
          {
            "name": "port",
            "descript": "指定发送的目的端口",
            "detail": []
          },
          {
            "name": "address",
            "descript": "指定发送的目的地址",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回发送尺寸",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个包含 socket 地址信息的对象。对于 UDP socket，该对象将包含 address、family 和 port 属性。 \n     @return 返回对象绑定地址\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "address",
      "type": "NObject",
      "params": null,
      "doc": {
        "descript": "返回一个包含 socket 地址信息的对象。对于 UDP socket，该对象将包含 address、family 和 port 属性。",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回对象绑定地址",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 关闭当前 socket ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "close",
      "type": null,
      "params": null,
      "doc": {
        "descript": "关闭当前 socket",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 关闭当前 socket\n     @param callback 关闭完成后的回调函数，它相当于为 `close` 事件添加了一个监听器\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "close",
      "type": null,
      "params": [
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "关闭当前 socket",
        "detail": [],
        "params": [
          {
            "name": "callback",
            "descript": "关闭完成后的回调函数，它相当于为 `close` 事件添加了一个监听器",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询 socket 接收缓冲区大小 \n     @return 返回查询结果\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "getRecvBufferSize",
      "type": "Integer",
      "params": null,
      "doc": {
        "descript": "查询 socket 接收缓冲区大小",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回查询结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询 socket 发送缓冲区大小\n     @return 返回查询结果\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "getSendBufferSize",
      "type": "Integer",
      "params": null,
      "doc": {
        "descript": "查询 socket 发送缓冲区大小",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回查询结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置 socket 接收缓冲区大小 \n     @param size 指定要设置的尺寸\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "setRecvBufferSize",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置 socket 接收缓冲区大小",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "指定要设置的尺寸",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置 socket 发送缓冲区大小\n     @param size 指定要设置的尺寸\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "setSendBufferSize",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置 socket 发送缓冲区大小",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "指定要设置的尺寸",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置或清除 SO_BROADCAST socket 选项\n     @param flag 当设置为 true, UDP包会被发送到一个本地接口的广播地址\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "setBroadcast",
      "type": null,
      "params": [
        {
          "type": "Boolean",
          "name": "flag",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置或清除 SO_BROADCAST socket 选项",
        "detail": [],
        "params": [
          {
            "name": "flag",
            "descript": "当设置为 true, UDP包会被发送到一个本地接口的广播地址",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 维持 fibjs 进程不退出，在对象绑定期间阻止 fibjs 进程退出\n     @return 返回当前对象\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "ref",
      "type": "DgramSocket",
      "params": null,
      "doc": {
        "descript": "维持 fibjs 进程不退出，在对象绑定期间阻止 fibjs 进程退出",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回当前对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 允许 fibjs 进程退出，在对象绑定期间允许 fibjs 进程退出\n     @return 返回当前对象\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "unref",
      "type": "DgramSocket",
      "params": null,
      "doc": {
        "descript": "允许 fibjs 进程退出，在对象绑定期间允许 fibjs 进程退出",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回当前对象",
          "detail": []
        }
      }
    }
  ]
}