{
  "declare": {
    "comments": "! @brief 二进制数据缓存对象，用于 io 读写的数据处理\n\n Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：\n ```JavaScript\n var buf = new Buffer();\n ```\n ",
    "type": "interface",
    "name": "Buffer",
    "extend": "object",
    "doc": {
      "descript": "二进制数据缓存对象，用于 io 读写的数据处理",
      "detail": [
        "Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：",
        "```JavaScript",
        "var buf = new Buffer();",
        "```"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param datas 初始化数据数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "Array",
          "name": "datas",
          "default": null
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "datas",
            "descript": "初始化数据数组",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param datas 初始化数据数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "ArrayBuffer",
          "name": "datas",
          "default": null
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "datas",
            "descript": "初始化数据数组",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param datas 初始化数据数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "TypedArray",
          "name": "datas",
          "default": null
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "datas",
            "descript": "初始化数据数组",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param datas 初始化数据数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "ArrayBufferView",
          "name": "datas",
          "default": null
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "datas",
            "descript": "初始化数据数组",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param buffer 初始化Buffer对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "Buffer",
          "name": "buffer",
          "default": null
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "buffer",
            "descript": "初始化Buffer对象",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 缓存对象构造函数\n     @param size 初始化缓冲区大小\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Buffer",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "缓存对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "初始化缓冲区大小",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "object",
      "comments": "! @brief 二进制数据缓存对象，用于 io 读写的数据处理 ",
      "deprecated": null,
      "name": "Buffer",
      "type": "Buffer",
      "doc": {
        "descript": "二进制数据缓存对象，用于 io 读写的数据处理",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Buffer 对象\n     @param v 给定需要检测的变量\n     @return 传入对象是否 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isBuffer",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Buffer 对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "传入对象是否 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 通过其他 Buffer 创建 Buffer 对象\n     @param buffer 给定 Buffer 类型变量用于创建 Buffer 对象\n     @param byteOffset 指定数据起始位置，起始为 0\n     @param length 指定数据长度，起始位 -1，表示剩余所有数据\n     @return 返回 Buffer 实例\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "from",
      "type": "Buffer",
      "params": [
        {
          "type": "Buffer",
          "name": "buffer",
          "default": null
        },
        {
          "type": "Integer",
          "name": "byteOffset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "length",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "通过其他 Buffer 创建 Buffer 对象",
        "detail": [],
        "params": [
          {
            "name": "buffer",
            "descript": "给定 Buffer 类型变量用于创建 Buffer 对象",
            "detail": []
          },
          {
            "name": "byteOffset",
            "descript": "指定数据起始位置，起始为 0",
            "detail": []
          },
          {
            "name": "length",
            "descript": "指定数据长度，起始位 -1，表示剩余所有数据",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 Buffer 实例",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 通过字符串创建 Buffer 对象\n     @param str 初始化字符串，字符串将以 utf-8 格式写入\n     @param byteOffset 指定数据起始位置，起始为 0\n     @param length 指定数据长度，起始位 -1，表示剩余所有数据\n     @return 返回 Buffer 实例\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "from",
      "type": "Buffer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "Integer",
          "name": "byteOffset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "length",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "通过字符串创建 Buffer 对象",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "初始化字符串，字符串将以 utf-8 格式写入",
            "detail": []
          },
          {
            "name": "byteOffset",
            "descript": "指定数据起始位置，起始为 0",
            "detail": []
          },
          {
            "name": "length",
            "descript": "指定数据长度，起始位 -1，表示剩余所有数据",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 Buffer 实例",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 通过字符串创建 Buffer 对象\n     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 返回 Buffer 实例\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "from",
      "type": "Buffer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "通过字符串创建 Buffer 对象",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 Buffer 实例",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 拼接多个缓存区中的数据\n     @param buflist 待拼接的Buffer数组\n     @param cutLength 截取多少个Buffer对象\n     @return 拼接后产生的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "concat",
      "type": "Buffer",
      "params": [
        {
          "type": "Array",
          "name": "buflist",
          "default": null
        },
        {
          "type": "Integer",
          "name": "cutLength",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "拼接多个缓存区中的数据",
        "detail": [],
        "params": [
          {
            "name": "buflist",
            "descript": "待拼接的Buffer数组",
            "detail": []
          },
          {
            "name": "cutLength",
            "descript": "截取多少个Buffer对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "拼接后产生的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。\n     @param size 缓冲区的所需长度\n     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 填充好的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "alloc",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        },
        {
          "type": "Integer",
          "name": "fill",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓冲区的所需长度",
            "detail": []
          },
          {
            "name": "fill",
            "descript": "预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "填充好的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。\n     @param size 缓冲区的所需长度\n     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 填充好的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "alloc",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        },
        {
          "type": "String",
          "name": "fill",
          "default": {
            "value": "\"\""
          }
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓冲区的所需长度",
            "detail": []
          },
          {
            "name": "fill",
            "descript": "预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "填充好的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。\n     @param size 缓冲区的所需长度\n     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 填充好的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "alloc",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "fill",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓冲区的所需长度",
            "detail": []
          },
          {
            "name": "fill",
            "descript": "预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "填充好的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。\n     @param size 缓冲区的所需长度\n     @return 指定尺寸的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "allocUnsafe",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        }
      ],
      "doc": {
        "descript": "分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓冲区的所需长度",
            "detail": []
          }
        ],
        "return": {
          "descript": "指定尺寸的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。\n     @param size 缓冲区的所需长度\n     @return 指定尺寸的新 Buffer 对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "allocUnsafeSlow",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        }
      ],
      "doc": {
        "descript": "分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓冲区的所需长度",
            "detail": []
          }
        ],
        "return": {
          "descript": "指定尺寸的新 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回字符串的实际字节长度\n     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 返回实际字节长度\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "byteLength",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "返回字符串的实际字节长度",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回实际字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回字符串的实际字节长度\n     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 返回实际字节长度\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "byteLength",
      "type": "Integer",
      "params": [
        {
          "type": "ArrayBuffer",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "返回字符串的实际字节长度",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回实际字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回字符串的实际字节长度\n     @param str 待取字节的字符串，如果 str 为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 返回实际字节长度\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "byteLength",
      "type": "Integer",
      "params": [
        {
          "type": "ArrayBufferView",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "返回字符串的实际字节长度",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待取字节的字符串，如果 str 为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回实际字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回字符串的实际字节长度\n     @param str 待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 返回实际字节长度\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "byteLength",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "返回字符串的实际字节长度",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待取字节的字符串，如果str为 ArrayBuffer/TypedArray/DataView/Buffer 对象，则返回它们的实际长度",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回实际字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 比较 buf1 和 buf2, 往往用于 Buffer 实例之间的排序. 该方式等价于 buf1.compare(buf2).\n    @param buf1 待比较的 buf\n    @param buf2 待比较的 buf\n    @return 返回比较字节长度\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "compare",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "buf1",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "buf2",
          "default": null
        }
      ],
      "doc": {
        "descript": "比较 buf1 和 buf2, 往往用于 Buffer 实例之间的排序. 该方式等价于 buf1.compare(buf2).",
        "detail": [],
        "params": [
          {
            "name": "buf1",
            "descript": "待比较的 buf",
            "detail": []
          },
          {
            "name": "buf2",
            "descript": "待比较的 buf",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回比较字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测编码格式是否被支持\n     @param codec 待检测的编码格式\n     @return 是否支持\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isEncoding",
      "type": "Boolean",
      "params": [
        {
          "type": "String",
          "name": "codec",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测编码格式是否被支持",
        "detail": [],
        "params": [
          {
            "name": "codec",
            "descript": "待检测的编码格式",
            "detail": []
          }
        ],
        "return": {
          "descript": "是否支持",
          "detail": []
        }
      }
    },
    {
      "memType": "operator",
      "comments": "! @brief 缓存对象可使用下标直接访问二进制数据",
      "deprecated": null,
      "readonly": null,
      "name": "[]",
      "type": "Integer",
      "index": null,
      "doc": {
        "descript": "缓存对象可使用下标直接访问二进制数据",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 获取缓存对象的尺寸 ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "length",
      "type": "Integer",
      "doc": {
        "descript": "获取缓存对象的尺寸",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 修改缓存对象尺寸\n     @param sz 指定新尺寸\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "resize",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "sz",
          "default": null
        }
      ],
      "doc": {
        "descript": "修改缓存对象尺寸",
        "detail": [],
        "params": [
          {
            "name": "sz",
            "descript": "指定新尺寸",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在缓存对象尾部写入一组二进制数据\n     @param data 初始化二进制数据\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": null,
      "params": [
        {
          "type": "Buffer",
          "name": "data",
          "default": null
        }
      ],
      "doc": {
        "descript": "在缓存对象尾部写入一组二进制数据",
        "detail": [],
        "params": [
          {
            "name": "data",
            "descript": "初始化二进制数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入\n     @param str 要写入的字符串\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "要写入的字符串",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据\n     @param str 待写入的字符串\n     @param offset 写入起始位置\n     @param length 写入长度（单位字节，默认值-1），未指定时为待写入字符串的长度\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 写入的数据字节长度\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "write",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "length",
          "default": {
            "value": "-1"
          }
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待写入的字符串",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "写入起始位置",
            "detail": []
          },
          {
            "name": "length",
            "descript": "写入长度（单位字节，默认值-1），未指定时为待写入字符串的长度",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "写入的数据字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据\n     @param str 待写入的字符串\n     @param offset 写入起始位置\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 写入的数据字节长度\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "write",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待写入的字符串",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "写入起始位置",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "写入的数据字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据\n     @param str 待写入的字符串\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @return 写入的数据字节长度\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "write",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "str",
          "default": null
        },
        {
          "type": "String",
          "name": "codec",
          "default": {
            "value": "\"utf8\""
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据",
        "detail": [],
        "params": [
          {
            "name": "str",
            "descript": "待写入的字符串",
            "detail": []
          },
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          }
        ],
        "return": {
          "descript": "写入的数据字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 为 Buffer 对象填充指定内容数据\n     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer\n     @param offset 填充起始位置\n     @param end 填充终止位置\n     @return 返回当前 Buffer 对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "fill",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "end",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "为 Buffer 对象填充指定内容数据",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "填充起始位置",
            "detail": []
          },
          {
            "name": "end",
            "descript": "填充终止位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回当前 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 为 Buffer 对象填充指定内容数据\n     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer\n     @param offset 填充起始位置\n     @param end 填充终止位置\n     @return 返回当前 Buffer 对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "fill",
      "type": "Buffer",
      "params": [
        {
          "type": "Buffer",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "end",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "为 Buffer 对象填充指定内容数据",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "填充起始位置",
            "detail": []
          },
          {
            "name": "end",
            "descript": "填充终止位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回当前 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 为 Buffer 对象填充指定内容数据\n     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer\n     @param offset 填充起始位置\n     @param end 填充终止位置\n     @return 返回当前 Buffer 对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "fill",
      "type": "Buffer",
      "params": [
        {
          "type": "String",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "end",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "为 Buffer 对象填充指定内容数据",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "填充起始位置",
            "detail": []
          },
          {
            "name": "end",
            "descript": "填充终止位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回当前 Buffer 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回某个指定数据在 Buffer 中首次出现的位置\n     @param v 待查找数据，如果未指定 offset，默认从起始位开始\n     @param offset 起始查找位置\n     @return 返回查找到的位置，未找到返回 -1\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "indexOf",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "返回某个指定数据在 Buffer 中首次出现的位置",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "待查找数据，如果未指定 offset，默认从起始位开始",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "起始查找位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回查找到的位置，未找到返回 -1",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回某个指定数据在 Buffer 中首次出现的位置\n     @param v 待查找数据，如果未指定 offset，默认从起始位开始\n     @param offset 起始查找位置\n     @return 返回查找到的位置，未找到返回 -1\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "indexOf",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "返回某个指定数据在 Buffer 中首次出现的位置",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "待查找数据，如果未指定 offset，默认从起始位开始",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "起始查找位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回查找到的位置，未找到返回 -1",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回某个指定数据在 Buffer 中首次出现的位置\n     @param v 待查找数据，如果未指定 offset，默认从起始位开始\n     @param offset 起始查找位置\n     @return 返回查找到的位置，未找到返回 -1\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "indexOf",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "返回某个指定数据在 Buffer 中首次出现的位置",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "待查找数据，如果未指定 offset，默认从起始位开始",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "起始查找位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回查找到的位置，未找到返回 -1",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 比较缓存区的内容\n     @param buf 待比较缓存对象\n     @return 内容比较结果\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "compare",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "buf",
          "default": null
        }
      ],
      "doc": {
        "descript": "比较缓存区的内容",
        "detail": [],
        "params": [
          {
            "name": "buf",
            "descript": "待比较缓存对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "内容比较结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从源缓存对象区域拷贝数据到目标缓存对象区域\n     @param targetBuffer 目标缓存对象\n     @param targetStart 目标缓存对象开始拷贝字节位置，缺省为 0\n     @param sourceStart 源缓存对象开始字节位置, 缺省为 0\n     @param sourceEnd 源缓存对象结束字节位置, 缺省为 -1,表示源数据长度\n     @return 拷贝的数据字节长度\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "copy",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "targetBuffer",
          "default": null
        },
        {
          "type": "Integer",
          "name": "targetStart",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "sourceStart",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "sourceEnd",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "从源缓存对象区域拷贝数据到目标缓存对象区域",
        "detail": [],
        "params": [
          {
            "name": "targetBuffer",
            "descript": "目标缓存对象",
            "detail": []
          },
          {
            "name": "targetStart",
            "descript": "目标缓存对象开始拷贝字节位置，缺省为 0",
            "detail": []
          },
          {
            "name": "sourceStart",
            "descript": "源缓存对象开始字节位置, 缺省为 0",
            "detail": []
          },
          {
            "name": "sourceEnd",
            "descript": "源缓存对象结束字节位置, 缺省为 -1,表示源数据长度",
            "detail": []
          }
        ],
        "return": {
          "descript": "拷贝的数据字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从源缓存对象区域拷贝数据到目标缓存对象区域\n     @param src 目标缓存对象\n     @param start 源缓存对象开始字节位置\n     @return 拷贝的数据字节长度\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "set",
      "type": "Integer",
      "params": [
        {
          "type": "Buffer",
          "name": "src",
          "default": null
        },
        {
          "type": "Integer",
          "name": "start",
          "default": null
        }
      ],
      "doc": {
        "descript": "从源缓存对象区域拷贝数据到目标缓存对象区域",
        "detail": [],
        "params": [
          {
            "name": "src",
            "descript": "目标缓存对象",
            "detail": []
          },
          {
            "name": "start",
            "descript": "源缓存对象开始字节位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "拷贝的数据字节长度",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 8 位无符号整型数值\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUInt8",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 8 位无符号整型数值",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUInt16LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 16 位无符号整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUInt16BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 16 位无符号整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUInt32LE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 32 位无符号整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUInt32BE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 32 位无符号整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个无符号整型数值，最大支持 64 位，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param byteLength 指定读取的字节数，缺省 8 个字节\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUIntLE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个无符号整型数值，最大支持 64 位，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定读取的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个无符号整型数值，最大支持 64 位，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param byteLength 指定读取的字节数，缺省 8 个字节\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readUIntBE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个无符号整型数值，最大支持 64 位，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定读取的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 64 位整型数值，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt64LE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 64 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 64 位整型数值，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt64BE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 64 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 8 位整型数值\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt8",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 8 位整型数值",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 16 位整型数值，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt16LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 16 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 16 位整型数值，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt16BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 16 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 32 位整型数值，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt32LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 32 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个 32 位整型数值，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readInt32BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个 32 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个整型数值，最大支持 64 位，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param byteLength 指定读取的字节数，缺省 8 个字节\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readIntLE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个整型数值，最大支持 64 位，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定读取的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个整型数值，最大支持 64 位，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param byteLength 指定读取的字节数，缺省 8 个字节\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的整型数值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readIntBE",
      "type": "Long",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个整型数值，最大支持 64 位，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定读取的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的整型数值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 64 位整型数值，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt64LE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 64 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 64 位整型数值，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt64BE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 64 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个浮点数，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的浮点数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readFloatLE",
      "type": "Number",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个浮点数，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的浮点数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个浮点数，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的浮点数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readFloatBE",
      "type": "Number",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个浮点数，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的浮点数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个双精度浮点数，以低字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的双精度浮点数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readDoubleLE",
      "type": "Number",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个双精度浮点数，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的双精度浮点数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从缓存对象读取一个双精度浮点数，以高字节序的存储方式\n     @param offset 指定读取的起始位置，缺省为 0\n     @param noAssert 指定读取越界时不抛出错误，缺省为 flase，抛出\n     @return 返回读取的双精度浮点数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "readDoubleBE",
      "type": "Number",
      "params": [
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "从缓存对象读取一个双精度浮点数，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "offset",
            "descript": "指定读取的起始位置，缺省为 0",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定读取越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的双精度浮点数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 8 位无符号整型数值\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUInt8",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 8 位无符号整型数值",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUInt16LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 16 位无符号整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUInt16BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 16 位无符号整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUInt32LE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 32 位无符号整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUInt32BE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 32 位无符号整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个无符号整型数值，最大支持 64 位，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param byteLength 指定写入的字节数，缺省 8 个字节\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUIntLE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个无符号整型数值，最大支持 64 位，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定写入的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个无符号整型数值，最大支持 64 位，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param byteLength 指定写入的字节数，缺省 8 个字节\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeUIntBE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个无符号整型数值，最大支持 64 位，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定写入的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 8 位整型数值\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt8",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 8 位整型数值",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 16 位整型数值，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt16LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 16 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 16 位整型数值，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt16BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 16 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 32 位整型数值，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt32LE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 32 位整型数值，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个 32 位整型数值，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeInt32BE",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个 32 位整型数值，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个整型数值，最大支持 64 位，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param byteLength 指定写入的字节数，缺省 8 个字节\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeIntLE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个整型数值，最大支持 64 位，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定写入的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个整型数值，最大支持 64 位，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param byteLength 指定写入的字节数，缺省 8 个字节\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeIntBE",
      "type": "Integer",
      "params": [
        {
          "type": "Long",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "byteLength",
          "default": {
            "value": "8"
          }
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个整型数值，最大支持 64 位，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "byteLength",
            "descript": "指定写入的字节数，缺省 8 个字节",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个浮点数，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeFloatLE",
      "type": "Integer",
      "params": [
        {
          "type": "Number",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个浮点数，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个浮点数，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeFloatBE",
      "type": "Integer",
      "params": [
        {
          "type": "Number",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个浮点数，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个双精度浮点数，以低字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeDoubleLE",
      "type": "Integer",
      "params": [
        {
          "type": "Number",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个双精度浮点数，以低字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 向缓存对象写入一个双精度浮点数，以高字节序的存储方式\n     @param value 指定写入的数值\n     @param offset 指定写入的起始位置\n     @param noAssert 指定写入越界时不抛出错误，缺省为 flase，抛出\n     @return offset 加上写入的字节数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "writeDoubleBE",
      "type": "Integer",
      "params": [
        {
          "type": "Number",
          "name": "value",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "noAssert",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "向缓存对象写入一个双精度浮点数，以高字节序的存储方式",
        "detail": [],
        "params": [
          {
            "name": "value",
            "descript": "指定写入的数值",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "指定写入的起始位置",
            "detail": []
          },
          {
            "name": "noAssert",
            "descript": "指定写入越界时不抛出错误，缺省为 flase，抛出",
            "detail": []
          }
        ],
        "return": {
          "descript": "offset 加上写入的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个新缓存对象，包含指定起始到缓存结尾的数据\n     @param start 指定范围的起始，缺省从头开始\n     @return 返回新的缓存对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "slice",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "start",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "返回一个新缓存对象，包含指定起始到缓存结尾的数据",
        "detail": [],
        "params": [
          {
            "name": "start",
            "descript": "指定范围的起始，缺省从头开始",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回新的缓存对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据\n     @param start 指定范围的起始\n     @param end 指定范围的结束\n     @return 返回新的缓存对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "slice",
      "type": "Buffer",
      "params": [
        {
          "type": "Integer",
          "name": "start",
          "default": null
        },
        {
          "type": "Integer",
          "name": "end",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据",
        "detail": [],
        "params": [
          {
            "name": "start",
            "descript": "指定范围的起始",
            "detail": []
          },
          {
            "name": "end",
            "descript": "指定范围的结束",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回新的缓存对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 把当前对象中的所有元素放入一个字符串\n     @param separator 分割字符，缺省为 \",\"\n     @return 返回生成的字符串\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "join",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "separator",
          "default": {
            "value": "\",\""
          }
        }
      ],
      "doc": {
        "descript": "把当前对象中的所有元素放入一个字符串",
        "detail": [],
        "params": [
          {
            "name": "separator",
            "descript": "分割字符，缺省为 \",\"",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回生成的字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个新缓存对象，包含当前对象数据的倒序\n     @return 返回新的缓存对象\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "reverse",
      "type": "Buffer",
      "params": null,
      "doc": {
        "descript": "返回一个新缓存对象，包含当前对象数据的倒序",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回新的缓存对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 比较当前对象与给定的对象是否相等\n     @param expected 制定比较的目标对象\n     @return 返回对象比较的结果\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "equals",
      "type": "Boolean",
      "params": [
        {
          "type": "object",
          "name": "expected",
          "default": null
        }
      ],
      "doc": {
        "descript": "比较当前对象与给定的对象是否相等",
        "detail": [],
        "params": [
          {
            "name": "expected",
            "descript": "制定比较的目标对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象比较的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 使用 16 进制编码缓存对象内容\n     @return 返回编码字符串\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "hex",
      "type": "String",
      "params": null,
      "doc": {
        "descript": "使用 16 进制编码缓存对象内容",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回编码字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 使用 base64 编码缓存对象内容\n     @return 返回编码字符串\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "base64",
      "type": "String",
      "params": null,
      "doc": {
        "descript": "使用 base64 编码缓存对象内容",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回编码字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回全部二进制数据的数组\n     @return 返回包含对象数据索引的迭代器\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "keys",
      "type": "Iterator",
      "params": null,
      "doc": {
        "descript": "返回全部二进制数据的数组",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回包含对象数据索引的迭代器",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回全部二进制数据的数组\n     @return 返回包含对象数据值的迭代器\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "values",
      "type": "Iterator",
      "params": null,
      "doc": {
        "descript": "返回全部二进制数据的数组",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回包含对象数据值的迭代器",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回包含对象数据 [index, byte] 对的迭代器\n     @return [index, byte] 对的迭代器\n    ```JavaScript\n        const buf = Buffer.from('buffer');\n\n        // Prints:\n        //   [0, 98]\n        //   [1, 117]\n        //   [2, 102]\n        //   [3, 102]\n        //   [4, 101]\n        //   [5, 114]\n        for (const pair of buf.entries()) {\n            console.log(pair);\n        }\n    ```\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "entries",
      "type": "Iterator",
      "params": null,
      "doc": {
        "descript": "返回包含对象数据 [index, byte] 对的迭代器",
        "detail": [],
        "params": [],
        "return": {
          "descript": "[index, byte] 对的迭代器",
          "detail": [
            "```JavaScript",
            "    const buf = Buffer.from('buffer');",
            "",
            "    // Prints:",
            "    //   [0, 98]",
            "    //   [1, 117]",
            "    //   [2, 102]",
            "    //   [3, 102]",
            "    //   [4, 101]",
            "    //   [5, 114]",
            "    for (const pair of buf.entries()) {",
            "        console.log(pair);",
            "    }",
            "```"
          ]
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回全部二进制数据的数组\n     @return 返回包含对象数据的数组\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "toArray",
      "type": "Array",
      "params": null,
      "doc": {
        "descript": "返回全部二进制数据的数组",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回包含对象数据的数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回二进制数据的编码字符串\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @param offset 读取起始位置\n     @param end 读取终止位置\n     @return 返回对象的字符串表示\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "toString",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "codec",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "end",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回二进制数据的编码字符串",
        "detail": [],
        "params": [
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "读取起始位置",
            "detail": []
          },
          {
            "name": "end",
            "descript": "读取终止位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象的字符串表示",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回二进制数据的编码字符串\n     @param codec 指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集\n     @param offset 读取起始位置\n     @return 返回对象的字符串表示\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "toString",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "codec",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "返回二进制数据的编码字符串",
        "detail": [],
        "params": [
          {
            "name": "codec",
            "descript": "指定编码格式，允许值为：\"hex\", \"base64\", \"utf8\", 或者系统支持的字符集",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "读取起始位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象的字符串表示",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回二进制数据的 utf8 编码字符串\n     @return 返回对象的字符串表示\n    ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "toString",
      "type": "String",
      "params": null,
      "doc": {
        "descript": "返回二进制数据的 utf8 编码字符串",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回对象的字符串表示",
          "detail": []
        }
      }
    }
  ]
}