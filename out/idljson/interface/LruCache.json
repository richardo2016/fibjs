{
  "declare": {
    "comments": "! @brief LRU(least recently used) 缓存对象\n\n LruCache 用以维护一个 LRU 缓存，创建方法：\n ```JavaScript\n var util = require(\"util\");\n var c = new util.LruCache(10, 100);\n ```\n ",
    "type": "interface",
    "name": "LruCache",
    "extend": "EventEmitter",
    "doc": {
      "descript": "LRU(least recently used) 缓存对象",
      "detail": [
        "LruCache 用以维护一个 LRU 缓存，创建方法：",
        "```JavaScript",
        "var util = require(\"util\");",
        "var c = new util.LruCache(10, 100);",
        "```"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief LruCache 对象构造函数\n     @param size 缓存最大尺寸\n     @param timeout 元素失效时间，单位是 ms，小于等于 0 不失效，缺省为 0\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "LruCache",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "size",
          "default": null
        },
        {
          "type": "Integer",
          "name": "timeout",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "LruCache 对象构造函数",
        "detail": [],
        "params": [
          {
            "name": "size",
            "descript": "缓存最大尺寸",
            "detail": []
          },
          {
            "name": "timeout",
            "descript": "元素失效时间，单位是 ms，小于等于 0 不失效，缺省为 0",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 查询容器内数值个数 ",
      "deprecated": null,
      "static": null,
      "readonly": "readonly",
      "name": "size",
      "type": "Integer",
      "doc": {
        "descript": "查询容器内数值个数",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 查询和设置容器内元素失效时间，单位是 ms，小于等于 0 不失效 ",
      "deprecated": null,
      "static": null,
      "readonly": null,
      "name": "timeout",
      "type": "Integer",
      "doc": {
        "descript": "查询和设置容器内元素失效时间，单位是 ms，小于等于 0 不失效",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除容器数据 ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "clear",
      "type": null,
      "params": null,
      "doc": {
        "descript": "清除容器数据",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检查容器内是否存在指定键值的数据\n     @param name 指定要检查的键值\n     @return 返回键值是否存在\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "has",
      "type": "Boolean",
      "params": [
        {
          "type": "String",
          "name": "name",
          "default": null
        }
      ],
      "doc": {
        "descript": "检查容器内是否存在指定键值的数据",
        "detail": [],
        "params": [
          {
            "name": "name",
            "descript": "指定要检查的键值",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回键值是否存在",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定键值的值\n     @param name 指定要查询的键值\n     @return 返回键值所对应的值，若不存在，则返回 undefined\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "get",
      "type": "Value",
      "params": [
        {
          "type": "String",
          "name": "name",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定键值的值",
        "detail": [],
        "params": [
          {
            "name": "name",
            "descript": "指定要查询的键值",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回键值所对应的值，若不存在，则返回 undefined",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定键值的值，若不存在或过期，则调用回调函数更新数据\n     @param name 指定要查询的键值\n     @param updater 指定更新函数\n     @return 返回键值所对应的值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "get",
      "type": "Value",
      "params": [
        {
          "type": "String",
          "name": "name",
          "default": null
        },
        {
          "type": "Function",
          "name": "updater",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定键值的值，若不存在或过期，则调用回调函数更新数据",
        "detail": [],
        "params": [
          {
            "name": "name",
            "descript": "指定要查询的键值",
            "detail": []
          },
          {
            "name": "updater",
            "descript": "指定更新函数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回键值所对应的值",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设定一个键值数据，键值不存在则插入一条新数据\n     @param name 指定要设定的键值\n     @param value 指定要设定的数据\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "set",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "name",
          "default": null
        },
        {
          "type": "Value",
          "name": "value",
          "default": null
        }
      ],
      "doc": {
        "descript": "设定一个键值数据，键值不存在则插入一条新数据",
        "detail": [],
        "params": [
          {
            "name": "name",
            "descript": "指定要设定的键值",
            "detail": []
          },
          {
            "name": "value",
            "descript": "指定要设定的数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设定一个键值数据，键值不存在则插入新数据\n     @param map 指定要设定的键值数据字典\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "set",
      "type": null,
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "设定一个键值数据，键值不存在则插入新数据",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "指定要设定的键值数据字典",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 删除指定键值的全部值\n     @param name 指定要删除的键值\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "remove",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "name",
          "default": null
        }
      ],
      "doc": {
        "descript": "删除指定键值的全部值",
        "detail": [],
        "params": [
          {
            "name": "name",
            "descript": "指定要删除的键值",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检查容器是否为空\n     @return 容器内无数值则返回 true\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "isEmpty",
      "type": "Boolean",
      "params": null,
      "doc": {
        "descript": "检查容器是否为空",
        "detail": [],
        "params": [],
        "return": {
          "descript": "容器内无数值则返回 true",
          "detail": []
        }
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 查询和绑定数据超时事件，相当于 on(\"expire\", func); ",
      "deprecated": null,
      "static": null,
      "readonly": null,
      "name": "onexpire",
      "type": "Function",
      "doc": {
        "descript": "查询和绑定数据超时事件，相当于 on(\"expire\", func);",
        "detail": [],
        "params": []
      }
    }
  ]
}