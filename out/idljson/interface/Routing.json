{
  "declare": {
    "comments": "! @brief 消息处理器路由对象\n\n 路由对象是 http 消息处理的核心对象，服务器根据路由的设定，匹配 url 和 method，并将 http 消息转发到相应的处理器，以完成不同的事务。\n\n 一个简单的路由，可以直接以 JSON 对象的形式提供，比如：\n ```JavaScript\n var http = require('http');\n\n var svr = new http.Server(8080, {\n     '/': r => r.response.write('home'),\n     '/help': r => r.response.write('help')\n });\n\n svr.start();\n ```\n 如果需要更复杂的路由定制，可以自行创建 Routing 对象并根据需要处理路由策略：\n ```JavaScript\n var http = require('http');\n var mq = require('mq');\n\n var app = new mq.Routing();\n\n app.get('/', r => r.response.write('home'));\n app.get('/help', r => r.response.write('help'));\n\n app.post('/help', r => r.response.write('post a help.'));\n\n app.get('/home/:user', (r, user) => r.response.write('hello ' + user));\n\n app.get('/user/:id(\\\\d+)', (r, id) => r.response.write('get ' + id));\n\n app.get('/actions', {\n     '/run': r => r.response.write('running'),\n     '/sleep': r => r.response.write('sleeping'),\n     '(.*)': r => r.response.write('........')\n });\n\n var svr = new http.Server(8080, app);\n svr.start();\n ```\n 路由对象根据设定的规则匹配消息，将消息传递给符合规则的第一个处理器。后加入的路由规则优先匹配。创建方法：\n ```JavaScript\n var routing = new mq.Routing({\n   \"^/func1(/.*)$\": func1,\n   \"^/func2(/.*)$\": func2\n });\n ```\n 正则表达式匹配的项目修改消息的 value 属性，子项目存入消息的 params 属性。例如：\n ```JavaScript\n var routing = new mq.Routing({\n   \"^/func1(/([0-9]+)/([0-9]+)\\.html)$\": func1,\n });\n ```\n 匹配消息 \"/func1/123/456.html\" 后，value == \"/123/456.html\"，params == [\"123\", \"456\"];\n\n 如果匹配的结果没有子项，则 value 为空，params 为空。例如：\n ```JavaScript\n var routing = new mq.Routing({\n   \"^/func1/[0-9]+/[0-9]+\\.html$\": func1,\n });\n ```\n 匹配消息 \"/func1/123/456.html\" 后，value == \"\"，params == [];\n\n 如果匹配的结果第一级有多个子项，则 value 为空，params 为第一级子项。例如：\n ```JavaScript\n var routing = new mq.Routing({\n   \"^/func1/([0-9]+)/([0-9]+)\\.html$\": func1,\n });\n ```\n 匹配消息 \"/func1/123/456.html\" 后，value == \"\"，params == [\"123\", \"456\"];\n\n 如果匹配的结果只有一个子项，并且无下级子项，则 value 和 params 均为此子项。例如：\n ```JavaScript\n var routing = new mq.Routing({\n   \"^/func1/([0-9]+)/[0-9]+\\.html$\": func1,\n });\n ```\n 匹配消息 \"/func1/123/456.html\" 后，value == \"123\"，params == [\"123\"];\n ",
    "type": "interface",
    "name": "Routing",
    "extend": "Handler",
    "doc": {
      "descript": "消息处理器路由对象",
      "detail": [
        "路由对象是 http 消息处理的核心对象，服务器根据路由的设定，匹配 url 和 method，并将 http 消息转发到相应的处理器，以完成不同的事务。",
        "",
        "一个简单的路由，可以直接以 JSON 对象的形式提供，比如：",
        "```JavaScript",
        "var http = require('http');",
        "",
        "var svr = new http.Server(8080, {",
        "    '/': r => r.response.write('home'),",
        "    '/help': r => r.response.write('help')",
        "});",
        "",
        "svr.start();",
        "```",
        "如果需要更复杂的路由定制，可以自行创建 Routing 对象并根据需要处理路由策略：",
        "```JavaScript",
        "var http = require('http');",
        "var mq = require('mq');",
        "",
        "var app = new mq.Routing();",
        "",
        "app.get('/', r => r.response.write('home'));",
        "app.get('/help', r => r.response.write('help'));",
        "",
        "app.post('/help', r => r.response.write('post a help.'));",
        "",
        "app.get('/home/:user', (r, user) => r.response.write('hello ' + user));",
        "",
        "app.get('/user/:id(\\\\d+)', (r, id) => r.response.write('get ' + id));",
        "",
        "app.get('/actions', {",
        "    '/run': r => r.response.write('running'),",
        "    '/sleep': r => r.response.write('sleeping'),",
        "    '(.*)': r => r.response.write('........')",
        "});",
        "",
        "var svr = new http.Server(8080, app);",
        "svr.start();",
        "```",
        "路由对象根据设定的规则匹配消息，将消息传递给符合规则的第一个处理器。后加入的路由规则优先匹配。创建方法：",
        "```JavaScript",
        "var routing = new mq.Routing({",
        "  \"^/func1(/.*)$\": func1,",
        "  \"^/func2(/.*)$\": func2",
        "});",
        "```",
        "正则表达式匹配的项目修改消息的 value 属性，子项目存入消息的 params 属性。例如：",
        "```JavaScript",
        "var routing = new mq.Routing({",
        "  \"^/func1(/([0-9]+)/([0-9]+)\\.html)$\": func1,",
        "});",
        "```",
        "匹配消息 \"/func1/123/456.html\" 后，value == \"/123/456.html\"，params == [\"123\", \"456\"];",
        "",
        "如果匹配的结果没有子项，则 value 为空，params 为空。例如：",
        "```JavaScript",
        "var routing = new mq.Routing({",
        "  \"^/func1/[0-9]+/[0-9]+\\.html$\": func1,",
        "});",
        "```",
        "匹配消息 \"/func1/123/456.html\" 后，value == \"\"，params == [];",
        "",
        "如果匹配的结果第一级有多个子项，则 value 为空，params 为第一级子项。例如：",
        "```JavaScript",
        "var routing = new mq.Routing({",
        "  \"^/func1/([0-9]+)/([0-9]+)\\.html$\": func1,",
        "});",
        "```",
        "匹配消息 \"/func1/123/456.html\" 后，value == \"\"，params == [\"123\", \"456\"];",
        "",
        "如果匹配的结果只有一个子项，并且无下级子项，则 value 和 params 均为此子项。例如：",
        "```JavaScript",
        "var routing = new mq.Routing({",
        "  \"^/func1/([0-9]+)/[0-9]+\\.html$\": func1,",
        "});",
        "```",
        "匹配消息 \"/func1/123/456.html\" 后，value == \"123\"，params == [\"123\"];"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief 创建一个消息处理器路由对象\n   @param map 初始化路由参数\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Routing",
      "type": null,
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": {
            "value": "v8::Object::New(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "创建一个消息处理器路由对象",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "初始化路由参数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建一个消息处理器路由对象\n   @param method 指定 http 请求方法，\"*\" 接受所有方法\n   @param map 初始化路由参数\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "Routing",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "method",
          "default": null
        },
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建一个消息处理器路由对象",
        "detail": [],
        "params": [
          {
            "name": "method",
            "descript": "指定 http 请求方法，\"*\" 接受所有方法",
            "detail": []
          },
          {
            "name": "map",
            "descript": "初始化路由参数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从已有路由对象中添加规则，添加后原路由将被清空\n   @param route 已经初始化的路由对象\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": "Routing",
      "params": [
        {
          "type": "Routing",
          "name": "route",
          "default": null
        }
      ],
      "doc": {
        "descript": "从已有路由对象中添加规则，添加后原路由将被清空",
        "detail": [],
        "params": [
          {
            "name": "route",
            "descript": "已经初始化的路由对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条路由规则\n   @param method 指定 http 请求方法，\"*\" 接受所有方法，\"host\" 指定虚拟域名\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "append",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "method",
          "default": null
        },
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条路由规则",
        "detail": [],
        "params": [
          {
            "name": "method",
            "descript": "指定 http 请求方法，\"*\" 接受所有方法，\"host\" 指定虚拟域名",
            "detail": []
          },
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组 http 域名的路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "host",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组 http 域名的路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http 域名的路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "host",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http 域名的路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组接受所有 http 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "all",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组接受所有 http 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受所有 http 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "all",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受所有 http 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组 GET 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "get",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组 GET 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http GET 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "get",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http GET 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组接受 http POST 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "post",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组接受 http POST 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http POST 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "post",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http POST 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组接受 http DELETE 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "del",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组接受 http DELETE 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http DELETE 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "del",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http DELETE 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组 PUT 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "put",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组 PUT 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http PUT 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "put",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http PUT 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组 PATCH 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "patch",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组 PATCH 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http PATCH 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "patch",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http PATCH 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一组 FIND 方法路由规则\n   @param map 路由参数\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "find",
      "type": "Routing",
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一组 FIND 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "路由参数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 添加一条接受 http FIND 方法路由规则\n   @param pattern 消息匹配格式\n   @param hdlr 内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler\n   @return 返回路由对象本身\n   ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "find",
      "type": "Routing",
      "params": [
        {
          "type": "String",
          "name": "pattern",
          "default": null
        },
        {
          "type": "Handler",
          "name": "hdlr",
          "default": null
        }
      ],
      "doc": {
        "descript": "添加一条接受 http FIND 方法路由规则",
        "detail": [],
        "params": [
          {
            "name": "pattern",
            "descript": "消息匹配格式",
            "detail": []
          },
          {
            "name": "hdlr",
            "descript": "内置消息处理器，处理函数，链式处理数组，路由对象，详见 mq.Handler",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回路由对象本身",
          "detail": []
        }
      }
    }
  ]
}