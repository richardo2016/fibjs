{
  "declare": {
    "comments": "! @brief LevelDB 数据库对象\n\n 用以创建和管理字典对象，创建方法：\n ```JavaScript\n var db = require(\"db\");\n var test = new db.openLevelDB(\"test.db\");\n ```\n ",
    "type": "interface",
    "name": "LevelDB",
    "extend": "object",
    "doc": {
      "descript": "LevelDB 数据库对象",
      "detail": [
        "用以创建和管理字典对象，创建方法：",
        "```JavaScript",
        "var db = require(\"db\");",
        "var test = new db.openLevelDB(\"test.db\");",
        "```"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief 检查数据库内是否存在指定键值的数据\n     @param key 指定要检查的键值\n     @return 返回键值是否存在\n     ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "has",
      "type": "Boolean",
      "params": [
        {
          "type": "Buffer",
          "name": "key",
          "default": null
        }
      ],
      "doc": {
        "descript": "检查数据库内是否存在指定键值的数据",
        "detail": [],
        "params": [
          {
            "name": "key",
            "descript": "指定要检查的键值",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回键值是否存在",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定键值的值\n     @param key 指定要查询的键值\n     @return 返回键值所对应的值，若不存在，则返回 null\n     ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "get",
      "type": "Buffer",
      "params": [
        {
          "type": "Buffer",
          "name": "key",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定键值的值",
        "detail": [],
        "params": [
          {
            "name": "key",
            "descript": "指定要查询的键值",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回键值所对应的值，若不存在，则返回 null",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询一组指定键值的值\n     @param keys 指定要查询的键值数组\n     @return 返回包含键值得数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "mget",
      "type": "NArray",
      "params": [
        {
          "type": "Array",
          "name": "keys",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询一组指定键值的值",
        "detail": [],
        "params": [
          {
            "name": "keys",
            "descript": "指定要查询的键值数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回包含键值得数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设定一个键值数据，键值不存在则插入新数据\n     @param key 指定要设定的键值\n     @param value 指定要设定的数据\n     ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "set",
      "type": null,
      "params": [
        {
          "type": "Buffer",
          "name": "key",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "value",
          "default": null
        }
      ],
      "doc": {
        "descript": "设定一个键值数据，键值不存在则插入新数据",
        "detail": [],
        "params": [
          {
            "name": "key",
            "descript": "指定要设定的键值",
            "detail": []
          },
          {
            "name": "value",
            "descript": "指定要设定的数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设定一组键值数据，键值不存在则插入新数据\n     @param map 指定要设定的键值数据字典\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "mset",
      "type": null,
      "params": [
        {
          "type": "Object",
          "name": "map",
          "default": null
        }
      ],
      "doc": {
        "descript": "设定一组键值数据，键值不存在则插入新数据",
        "detail": [],
        "params": [
          {
            "name": "map",
            "descript": "指定要设定的键值数据字典",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 删除一组指定键值的值\n     @param keys 指定要删除的键值数组\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "mremove",
      "type": null,
      "params": [
        {
          "type": "Array",
          "name": "keys",
          "default": null
        }
      ],
      "doc": {
        "descript": "删除一组指定键值的值",
        "detail": [],
        "params": [
          {
            "name": "keys",
            "descript": "指定要删除的键值数组",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 删除指定键值的全部值\n     @param key 指定要删除的键值\n     ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "remove",
      "type": null,
      "params": [
        {
          "type": "Buffer",
          "name": "key",
          "default": null
        }
      ],
      "doc": {
        "descript": "删除指定键值的全部值",
        "detail": [],
        "params": [
          {
            "name": "key",
            "descript": "指定要删除的键值",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 枚举数据库中所有的键值对\n\n     回调函数有两个参数，(value, key)\n\n     ```JavaScript\n     var db = require(\"db\");\n     var test = new db.openLevelDB(\"test.db\");\n\n     test.forEach(function(value, key){\n        ...\n     });\n     ```\n     @param func 枚举回调函数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "forEach",
      "type": null,
      "params": [
        {
          "type": "Function",
          "name": "func",
          "default": null
        }
      ],
      "doc": {
        "descript": "枚举数据库中所有的键值对",
        "detail": [
          "回调函数有两个参数，(value, key)",
          "",
          "```JavaScript",
          "var db = require(\"db\");",
          "var test = new db.openLevelDB(\"test.db\");",
          "",
          "test.forEach(function(value, key){",
          "   ...",
          "});",
          "```"
        ],
        "params": [
          {
            "name": "func",
            "descript": "枚举回调函数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 枚举数据库中键值在 from 和 to 之间的键值对\n\n     回调函数有两个参数，(value, key)\n\n     ```JavaScript\n     var db = require(\"db\");\n     var test = new db.openLevelDB(\"test.db\");\n\n     test.between(\"aaa\", \"bbb\", function(value, key){\n        ...\n     });\n     ```\n     @param from 枚举的最小键值，枚举时包含此键值\n     @param to 枚举的最大键值，枚举时不包含此键值\n     @param func 枚举回调函数\n     ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "between",
      "type": null,
      "params": [
        {
          "type": "Buffer",
          "name": "from",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "to",
          "default": null
        },
        {
          "type": "Function",
          "name": "func",
          "default": null
        }
      ],
      "doc": {
        "descript": "枚举数据库中键值在 from 和 to 之间的键值对",
        "detail": [
          "回调函数有两个参数，(value, key)",
          "",
          "```JavaScript",
          "var db = require(\"db\");",
          "var test = new db.openLevelDB(\"test.db\");",
          "",
          "test.between(\"aaa\", \"bbb\", function(value, key){",
          "   ...",
          "});",
          "```"
        ],
        "params": [
          {
            "name": "from",
            "descript": "枚举的最小键值，枚举时包含此键值",
            "detail": []
          },
          {
            "name": "to",
            "descript": "枚举的最大键值，枚举时不包含此键值",
            "detail": []
          },
          {
            "name": "func",
            "descript": "枚举回调函数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在当前数据库上开启一个事务\n     @return 返回一个开启的事务对象 ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "begin",
      "type": "LevelDB",
      "params": null,
      "doc": {
        "descript": "在当前数据库上开启一个事务",
        "detail": [],
        "params": [],
        "return": {
          "descript": "返回一个开启的事务对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 提交当前事务 ",
      "deprecated": null,
      "static": null,
      "async": null,
      "name": "commit",
      "type": null,
      "params": null,
      "doc": {
        "descript": "提交当前事务",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 关闭当前数据库连接或事务 ",
      "deprecated": null,
      "static": null,
      "async": "async",
      "name": "close",
      "type": null,
      "params": null,
      "doc": {
        "descript": "关闭当前数据库连接或事务",
        "detail": [],
        "params": []
      }
    }
  ]
}