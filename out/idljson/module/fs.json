{
  "declare": {
    "comments": "! @brief 文件系统处理模块\n\n 使用方法：\n ```JavaScript\n var fs = require('fs');\n ```\n\n 一些注意点:\n\n - 运行 `fs.watch(filename)` 会返回一个继承自 EventEmitter 的 watcher, 它支持 'change', 'changeonly', 'renameonly' 三个事件\n - `fs.watchFile(target)` 和 `fs.unwatchFile(target)` 依然可以成对使用\n - `fs.watchFile(target)` 会返回一个继承自 EventEmitter 的 StatsWatcher 对象, 调用 `fs.unwatchFile(target)` 等价于调用 `StatsWatcher.close()`.\n - 因为 uv 在 Linux 上的实现, `fs.watch` 的 `recursive` 选项仅在 win32/darwin 被稳定支持. 你依然可以尝试在 Linux 中尝试使用 `fs.watch('/path/to', { recursive: true }, handler)`, 但可能会发现 `handler` 被回调的时机与你预期的有差异\n ",
    "type": "module",
    "name": "fs",
    "extend": "object",
    "module": true,
    "doc": {
      "descript": "文件系统处理模块",
      "detail": [
        "使用方法：",
        "```JavaScript",
        "var fs = require('fs');",
        "```",
        "",
        "一些注意点:",
        "",
        "- 运行 `fs.watch(filename)` 会返回一个继承自 EventEmitter 的 watcher, 它支持 'change', 'changeonly', 'renameonly' 三个事件",
        "- `fs.watchFile(target)` 和 `fs.unwatchFile(target)` 依然可以成对使用",
        "- `fs.watchFile(target)` 会返回一个继承自 EventEmitter 的 StatsWatcher 对象, 调用 `fs.unwatchFile(target)` 等价于调用 `StatsWatcher.close()`.",
        "- 因为 uv 在 Linux 上的实现, `fs.watch` 的 `recursive` 选项仅在 win32/darwin 被稳定支持. 你依然可以尝试在 Linux 中尝试使用 `fs.watch('/path/to', { recursive: true }, handler)`, 但可能会发现 `handler` 被回调的时机与你预期的有差异"
      ],
      "params": []
    }
  },
  "members": [
    {
      "memType": "const",
      "comments": "! @brief seek 方式常量，移动到绝对位置 ",
      "deprecated": null,
      "const": "const",
      "name": "SEEK_SET",
      "default": {
        "value": "0"
      },
      "doc": {
        "descript": "seek 方式常量，移动到绝对位置",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "const",
      "comments": "! @brief seek 方式常量，移动到当前位置的相对位置 ",
      "deprecated": null,
      "const": "const",
      "name": "SEEK_CUR",
      "default": {
        "value": "1"
      },
      "doc": {
        "descript": "seek 方式常量，移动到当前位置的相对位置",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "const",
      "comments": "! @brief seek 方式常量，移动到文件结尾的相对位置 ",
      "deprecated": null,
      "const": "const",
      "name": "SEEK_END",
      "default": {
        "value": "2"
      },
      "doc": {
        "descript": "seek 方式常量，移动到文件结尾的相对位置",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "object",
      "comments": "! fs模块的常量对象 ",
      "deprecated": null,
      "name": "constants",
      "type": "fs_constants",
      "newable": true,
      "doc": {
        "descript": "fs模块的常量对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定的文件或目录是否存在\n     @param path 指定要查询的路径\n     @return 返回 True 表示文件或目录存在\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "exists",
      "type": "Boolean",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定的文件或目录是否存在",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定要查询的路径",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 True 表示文件或目录存在",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询用户对指定的文件的权限\n     @param path 指定要查询的路径\n     @param mode 指定查询的权限,默认为文件是否存在\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "access",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "查询用户对指定的文件的权限",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定要查询的路径",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "指定查询的权限,默认为文件是否存在",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建硬链接文件, windows 下不支持此方法\n     @param oldPath 源文件\n     @param newPath 将要被创建的文件\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "link",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "oldPath",
          "default": null
        },
        {
          "type": "String",
          "name": "newPath",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建硬链接文件, windows 下不支持此方法",
        "detail": [],
        "params": [
          {
            "name": "oldPath",
            "descript": "源文件",
            "detail": []
          },
          {
            "name": "newPath",
            "descript": "将要被创建的文件",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 删除指定的文件\n     @param path 指定要删除的路径\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "unlink",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "删除指定的文件",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定要删除的路径",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建一个目录\n     @param path 指定要创建的目录名\n     @param mode 指定文件权限，Windows 忽略此参数，默认值: 0777\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "mkdir",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": {
            "value": "0777"
          }
        }
      ],
      "doc": {
        "descript": "创建一个目录",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定要创建的目录名",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "指定文件权限，Windows 忽略此参数，默认值: 0777",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建一个目录\n\n     创建参数可以包含以下值：\n     ```JavaScript\n     {\n         recursive: false, // 指定是否父目录不存在是是否自动创建，默认值: false\n         mode: 0777 // 指定文件权限，Windows 忽略此参数，默认值: 0777\n     }\n     ```\n     @param path 指定要创建的目录名\n     @param opt 指定创建参数\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "mkdir",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Object",
          "name": "opt",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建一个目录",
        "detail": [
          "创建参数可以包含以下值：",
          "```JavaScript",
          "{",
          "    recursive: false, // 指定是否父目录不存在是是否自动创建，默认值: false",
          "    mode: 0777 // 指定文件权限，Windows 忽略此参数，默认值: 0777",
          "}",
          "```"
        ],
        "params": [
          {
            "name": "path",
            "descript": "指定要创建的目录名",
            "detail": []
          },
          {
            "name": "opt",
            "descript": "指定创建参数",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 删除一个目录\n     @param path 指定要删除的目录名\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "rmdir",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "删除一个目录",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定要删除的目录名",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 重新命名一个文件\n     @param from 指定更名的文件\n     @param to 指定要修改的新文件名\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "rename",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "from",
          "default": null
        },
        {
          "type": "String",
          "name": "to",
          "default": null
        }
      ],
      "doc": {
        "descript": "重新命名一个文件",
        "detail": [],
        "params": [
          {
            "name": "from",
            "descript": "指定更名的文件",
            "detail": []
          },
          {
            "name": "to",
            "descript": "指定要修改的新文件名",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将 src 拷贝到 dest。 默认情况下，如果 dest 已经存在，则覆盖它。\n\n     mode 是一个可选的整数，指定拷贝操作的行为。 可以创建由两个或更多个值按位或组成的掩码（比如 fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE）。\n     - fs.constants.COPYFILE_EXCL - 如果 dest 已存在，则拷贝操作将失败。\n     - fs.constants.COPYFILE_FICLONE - 拷贝操作将尝试创建写时拷贝（copy-on-write）链接。如果平台不支持写时拷贝，则使用后备的拷贝机制。\n     - fs.constants.COPYFILE_FICLONE_FORCE - 拷贝操作将尝试创建写时拷贝链接。如果平台不支持写时拷贝，则拷贝操作将失败。\n\n     @param from 指定要拷贝的源文件名\n     @param to 指定要拷贝的目标文件名\n     @param mode 指定拷贝操作的修饰符，缺省为 0\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "copyFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "from",
          "default": null
        },
        {
          "type": "String",
          "name": "to",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "将 src 拷贝到 dest。 默认情况下，如果 dest 已经存在，则覆盖它。",
        "detail": [
          "mode 是一个可选的整数，指定拷贝操作的行为。 可以创建由两个或更多个值按位或组成的掩码（比如 fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE）。",
          "- fs.constants.COPYFILE_EXCL - 如果 dest 已存在，则拷贝操作将失败。",
          "- fs.constants.COPYFILE_FICLONE - 拷贝操作将尝试创建写时拷贝（copy-on-write）链接。如果平台不支持写时拷贝，则使用后备的拷贝机制。",
          "- fs.constants.COPYFILE_FICLONE_FORCE - 拷贝操作将尝试创建写时拷贝链接。如果平台不支持写时拷贝，则拷贝操作将失败。",
          ""
        ],
        "params": [
          {
            "name": "from",
            "descript": "指定要拷贝的源文件名",
            "detail": []
          },
          {
            "name": "to",
            "descript": "指定要拷贝的目标文件名",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "指定拷贝操作的修饰符，缺省为 0",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置指定文件的访问权限，Windows 不支持此方法\n     @param path 指定操作的文件\n     @param mode 指定设定的访问权限\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "chmod",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置指定文件的访问权限，Windows 不支持此方法",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定操作的文件",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "指定设定的访问权限",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置指定文件的访问权限，若文件是软连接则不改变指向文件的权限，只在macOS、BSD 系列平台上可用\n     @param path 指定操作的文件\n     @param mode 指定设定的访问权限\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "lchmod",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置指定文件的访问权限，若文件是软连接则不改变指向文件的权限，只在macOS、BSD 系列平台上可用",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定操作的文件",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "指定设定的访问权限",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置指定文件的拥有者，Windows 不支持此方法\n     @param path 指定设置的文件\n     @param uid 文件拥有者用户id\n     @param gid 文件拥有者组id\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "chown",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "uid",
          "default": null
        },
        {
          "type": "Integer",
          "name": "gid",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置指定文件的拥有者，Windows 不支持此方法",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定设置的文件",
            "detail": []
          },
          {
            "name": "uid",
            "descript": "文件拥有者用户id",
            "detail": []
          },
          {
            "name": "gid",
            "descript": "文件拥有者组id",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置指定文件的拥有者，如果指定的文件是软连接则不会改变其指向文件的拥有者，Windows 不支持此方法\n     @param path 指定设置的文件\n     @param uid 文件拥有者用户id\n     @param gid 文件拥有者组id\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "lchown",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "uid",
          "default": null
        },
        {
          "type": "Integer",
          "name": "gid",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置指定文件的拥有者，如果指定的文件是软连接则不会改变其指向文件的拥有者，Windows 不支持此方法",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定设置的文件",
            "detail": []
          },
          {
            "name": "uid",
            "descript": "文件拥有者用户id",
            "detail": []
          },
          {
            "name": "gid",
            "descript": "文件拥有者组id",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定文件的基础信息\n     @param path 指定查询的文件\n     @return 返回文件的基础信息\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "stat",
      "type": "Stat",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定文件的基础信息",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定查询的文件",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回文件的基础信息",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定文件的基础信息, 和stat不同的是, 当path是一个软连接的时候，返回的将是这个软连接的信息而不是指向的文件的信息\n     @param path 指定查询的文件\n     @return 返回文件的基础信息\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "lstat",
      "type": "Stat",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定文件的基础信息, 和stat不同的是, 当path是一个软连接的时候，返回的将是这个软连接的信息而不是指向的文件的信息",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定查询的文件",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回文件的基础信息",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 读取指定的软连接文件, windows 下不支持此方法\n     @param path 指定读取的软连接文件\n     @return 返回软连接指向的文件名\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "readlink",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "读取指定的软连接文件, windows 下不支持此方法",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定读取的软连接文件",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回软连接指向的文件名",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回指定路径的绝对路径，如果指定路径中包含相对路径也会被展开\n     @param path 指定读取的路径\n     @return 返回处理后的绝对路径\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "realpath",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回指定路径的绝对路径，如果指定路径中包含相对路径也会被展开",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定读取的路径",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回处理后的绝对路径",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建软连接文件\n     @param target 目标文件，可以是文件、目录、或不存在的路径\n     @param linkpath 将被创建的软连接文件\n     @param type 创建的软连接类型, 可选类型为'file', 'dir', 'junction', 默认为'file', 该参数只在windows上有效，当为'junction'的时候将要创建的目标路径linkpath必须为绝对路径, 而target则会被自动转化为绝对路径。\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "symlink",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "target",
          "default": null
        },
        {
          "type": "String",
          "name": "linkpath",
          "default": null
        },
        {
          "type": "String",
          "name": "type",
          "default": {
            "value": "\"file\""
          }
        }
      ],
      "doc": {
        "descript": "创建软连接文件",
        "detail": [],
        "params": [
          {
            "name": "target",
            "descript": "目标文件，可以是文件、目录、或不存在的路径",
            "detail": []
          },
          {
            "name": "linkpath",
            "descript": "将被创建的软连接文件",
            "detail": []
          },
          {
            "name": "type",
            "descript": "创建的软连接类型, 可选类型为'file', 'dir', 'junction', 默认为'file', 该参数只在windows上有效，当为'junction'的时候将要创建的目标路径linkpath必须为绝对路径, 而target则会被自动转化为绝对路径。",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 修改文件尺寸,如果指定的长度大于源文件大小则用'\\0'填充，否则多于的文件内容将丢失\n     @param path 指定被修改文件的路径\n     @param len 指定修改后文件的大小\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "truncate",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        },
        {
          "type": "Integer",
          "name": "len",
          "default": null
        }
      ],
      "doc": {
        "descript": "修改文件尺寸,如果指定的长度大于源文件大小则用'\\0'填充，否则多于的文件内容将丢失",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定被修改文件的路径",
            "detail": []
          },
          {
            "name": "len",
            "descript": "指定修改后文件的大小",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 根据文件描述符，读取文件内容\n     @param fd 文件描述符\n     @param buffer 读取结果写入的 Buffer 对象\n     @param offset Buffer 写入偏移量， 默认为 0\n     @param length 文件读取字节数，默认为 0\n     @param position 文件读取位置，默认为当前文件位置\n     @return 实际读取的字节数\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "read",
      "type": "Integer",
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "buffer",
          "default": null
        },
        {
          "type": "Integer",
          "name": "offset",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "length",
          "default": {
            "value": "0"
          }
        },
        {
          "type": "Integer",
          "name": "position",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "根据文件描述符，读取文件内容",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          },
          {
            "name": "buffer",
            "descript": "读取结果写入的 Buffer 对象",
            "detail": []
          },
          {
            "name": "offset",
            "descript": "Buffer 写入偏移量， 默认为 0",
            "detail": []
          },
          {
            "name": "length",
            "descript": "文件读取字节数，默认为 0",
            "detail": []
          },
          {
            "name": "position",
            "descript": "文件读取位置，默认为当前文件位置",
            "detail": []
          }
        ],
        "return": {
          "descript": "实际读取的字节数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 根据文件描述符，改变文件模式。只在 POSIX 系统有效。\n     @param fd 文件描述符\n     @param mode 文件的模式\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "fchmod",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": null
        }
      ],
      "doc": {
        "descript": "根据文件描述符，改变文件模式。只在 POSIX 系统有效。",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "文件的模式",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 根据文件描述符，改变所有者。只在 POSIX 系统有效。\n     @param fd 文件描述符\n     @param uid 用户id\n     @param gid 组id\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "fchown",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        },
        {
          "type": "Integer",
          "name": "uid",
          "default": null
        },
        {
          "type": "Integer",
          "name": "gid",
          "default": null
        }
      ],
      "doc": {
        "descript": "根据文件描述符，改变所有者。只在 POSIX 系统有效。",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          },
          {
            "name": "uid",
            "descript": "用户id",
            "detail": []
          },
          {
            "name": "gid",
            "descript": "组id",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 根据文件描述符，同步数据到磁盘\n     @param fd 文件描述符\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "fdatasync",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        }
      ],
      "doc": {
        "descript": "根据文件描述符，同步数据到磁盘",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 根据文件描述符，同步数据到磁盘\n     @param fd 文件描述符\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "fsync",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        }
      ],
      "doc": {
        "descript": "根据文件描述符，同步数据到磁盘",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 读取指定目录的文件信息\n     @param path 指定查询的目录\n     @return 返回目录的文件信息数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "readdir",
      "type": "NArray",
      "params": [
        {
          "type": "String",
          "name": "path",
          "default": null
        }
      ],
      "doc": {
        "descript": "读取指定目录的文件信息",
        "detail": [],
        "params": [
          {
            "name": "path",
            "descript": "指定查询的目录",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回目录的文件信息数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开文件，用于读取，写入，或者同时读写\n\n     参数 flags 支持的方式如下：\n     - 'r' 只读方式，文件不存在则抛出错误。\n     - 'r+' 读写方式，文件不存在则抛出错误。\n     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。\n     - 'w+' 读写方式，文件不存在则自动创建。\n     - 'a' 只写添加方式，文件不存在则自动创建。\n     - 'a+' 读写添加方式，文件不存在则自动创建。\n     @param fname 指定文件名\n     @param flags 指定文件打开方式，缺省为 \"r\"，只读方式\n     @return 返回打开的文件对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "openFile",
      "type": "SeekableStream",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "String",
          "name": "flags",
          "default": {
            "value": "\"r\""
          }
        }
      ],
      "doc": {
        "descript": "打开文件，用于读取，写入，或者同时读写",
        "detail": [
          "参数 flags 支持的方式如下：",
          "- 'r' 只读方式，文件不存在则抛出错误。",
          "- 'r+' 读写方式，文件不存在则抛出错误。",
          "- 'w' 只写方式，文件不存在则自动创建，存在则将被清空。",
          "- 'w+' 读写方式，文件不存在则自动创建。",
          "- 'a' 只写添加方式，文件不存在则自动创建。",
          "- 'a+' 读写添加方式，文件不存在则自动创建。"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "flags",
            "descript": "指定文件打开方式，缺省为 \"r\"，只读方式",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回打开的文件对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开文件描述符\n\n     参数 flags 支持的方式如下：\n     - 'r' 只读方式，文件不存在则抛出错误。\n     - 'r+' 读写方式，文件不存在则抛出错误。\n     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。\n     - 'w+' 读写方式，文件不存在则自动创建。\n     - 'a' 只写添加方式，文件不存在则自动创建。\n     - 'a+' 读写添加方式，文件不存在则自动创建。\n     @param fname 指定文件名\n     @param flags 指定文件打开方式，缺省为 \"r\"，只读方式\n     @param mode 当创建文件的时候，指定文件的模式，默认 0666\n     @return 返回打开的文件描述符\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "open",
      "type": "Integer",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "String",
          "name": "flags",
          "default": {
            "value": "\"r\""
          }
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": {
            "value": "0666"
          }
        }
      ],
      "doc": {
        "descript": "打开文件描述符",
        "detail": [
          "参数 flags 支持的方式如下：",
          "- 'r' 只读方式，文件不存在则抛出错误。",
          "- 'r+' 读写方式，文件不存在则抛出错误。",
          "- 'w' 只写方式，文件不存在则自动创建，存在则将被清空。",
          "- 'w+' 读写方式，文件不存在则自动创建。",
          "- 'a' 只写添加方式，文件不存在则自动创建。",
          "- 'a+' 读写添加方式，文件不存在则自动创建。"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "flags",
            "descript": "指定文件打开方式，缺省为 \"r\"，只读方式",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "当创建文件的时候，指定文件的模式，默认 0666",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回打开的文件描述符",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 关闭文件描述符\n     @param fd 文件描述符\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "close",
      "type": null,
      "params": [
        {
          "type": "Integer",
          "name": "fd",
          "default": null
        }
      ],
      "doc": {
        "descript": "关闭文件描述符",
        "detail": [],
        "params": [
          {
            "name": "fd",
            "descript": "文件描述符",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开文本文件，用于读取，写入，或者同时读写\n\n     参数 flags 支持的方式如下：\n     - 'r' 只读方式，文件不存在则抛出错误。\n     - 'r+' 读写方式，文件不存在则抛出错误。\n     - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。\n     - 'w+' 读写方式，文件不存在则自动创建。\n     - 'a' 只写添加方式，文件不存在则自动创建。\n     - 'a+' 读写添加方式，文件不存在则自动创建。\n     @param fname 指定文件名\n     @param flags 指定文件打开方式，缺省为 \"r\"，只读方式\n     @return 返回打开的文件对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "openTextStream",
      "type": "BufferedStream",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "String",
          "name": "flags",
          "default": {
            "value": "\"r\""
          }
        }
      ],
      "doc": {
        "descript": "打开文本文件，用于读取，写入，或者同时读写",
        "detail": [
          "参数 flags 支持的方式如下：",
          "- 'r' 只读方式，文件不存在则抛出错误。",
          "- 'r+' 读写方式，文件不存在则抛出错误。",
          "- 'w' 只写方式，文件不存在则自动创建，存在则将被清空。",
          "- 'w+' 读写方式，文件不存在则自动创建。",
          "- 'a' 只写添加方式，文件不存在则自动创建。",
          "- 'a+' 读写添加方式，文件不存在则自动创建。"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "flags",
            "descript": "指定文件打开方式，缺省为 \"r\"，只读方式",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回打开的文件对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开文本文件，并读取内容\n     @param fname 指定文件名\n     @return 返回文件文本内容\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "readTextFile",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        }
      ],
      "doc": {
        "descript": "打开文本文件，并读取内容",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回文件文本内容",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开二进制文件，并读取内容\n     @param fname 指定文件名\n     @param encoding 指定解码方式，缺省不解码\n     @return 返回文件文本内容\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "readFile",
      "type": "Variant",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "String",
          "name": "encoding",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "打开二进制文件，并读取内容",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "encoding",
            "descript": "指定解码方式，缺省不解码",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回文件文本内容",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 打开文件，以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:\"\\n\"；windows:\"\\r\\n\"\n     @param fname 指定文件名\n     @param maxlines 指定此次读取的最大行数，缺省读取全部文本行\n     @return 返回读取的文本行数组，若无数据可读，或者连接中断，空数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "readLines",
      "type": "Array",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Integer",
          "name": "maxlines",
          "default": {
            "value": "-1"
          }
        }
      ],
      "doc": {
        "descript": "打开文件，以数组方式读取一组文本行，行结尾标识基于 EOL 属性的设置，缺省时，posix:\"\\n\"；windows:\"\\r\\n\"",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "maxlines",
            "descript": "指定此次读取的最大行数，缺省读取全部文本行",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回读取的文本行数组，若无数据可读，或者连接中断，空数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建文本文件，并写入内容\n     @param fname 指定文件名\n     @param txt 指定要写入的字符串\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "writeTextFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "String",
          "name": "txt",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建文本文件，并写入内容",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "txt",
            "descript": "指定要写入的字符串",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建二进制文件，并写入内容\n     @param fname 指定文件名\n     @param data 指定要写入的二进制数据\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "writeFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "data",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建二进制文件，并写入内容",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "data",
            "descript": "指定要写入的二进制数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 创建二进制文件，并写入内容\n     @param fname 指定文件名\n     @param data 指定要写入的二进制数据\n     ",
      "deprecated": null,
      "static": "static",
      "async": "async",
      "name": "appendFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "data",
          "default": null
        }
      ],
      "doc": {
        "descript": "创建二进制文件，并写入内容",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定文件名",
            "detail": []
          },
          {
            "name": "data",
            "descript": "指定要写入的二进制数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 设置 zip 虚拟文件映射\n     @param fname 指定映射路径\n     @param data 指定映射的 zip 文件数据\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "setZipFS",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Buffer",
          "name": "data",
          "default": null
        }
      ],
      "doc": {
        "descript": "设置 zip 虚拟文件映射",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定映射路径",
            "detail": []
          },
          {
            "name": "data",
            "descript": "指定映射的 zip 文件数据",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除 zip 虚拟文件映射\n     @param fname 指定映射路径，缺省清除全部缓存\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clearZipFS",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "清除 zip 虚拟文件映射",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定映射路径，缺省清除全部缓存",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 watcher 对象\n     @param fname 指定要观察的文件对象\n     @return FSWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watch",
      "type": "FSWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 watcher 对象",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "FSWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 watcher 对象\n     @param fname 指定要观察的文件对象\n     @param callback `(evtType: 'change' | 'rename', filename: string) => any` 当文件对象发生变化时的处理回调\n     @return FSWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watch",
      "type": "FSWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 watcher 对象",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "callback",
            "descript": "`(evtType: 'change' | 'rename', filename: string) => any` 当文件对象发生变化时的处理回调",
            "detail": []
          }
        ],
        "return": {
          "descript": "FSWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 watcher 对象\n     \n     options 支持的选项如下：\n     ```JavaScript\n     {\n         \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出\n         \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录\n         \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码\n     }\n     ```\n     @param fname 指定要观察的文件对象\n     @param options 观察选项\n     @return FSWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watch",
      "type": "FSWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Object",
          "name": "options",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 watcher 对象",
        "detail": [
          "options 支持的选项如下：",
          "```JavaScript",
          "{",
          "    \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出",
          "    \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录",
          "    \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码",
          "}",
          "```"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "options",
            "descript": "观察选项",
            "detail": []
          }
        ],
        "return": {
          "descript": "FSWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 watcher 对象\n\n     options 支持的选项如下：\n     ```JavaScript\n     {\n         \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出\n         \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录\n         \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码\n     }\n     ```\n     @param fname 指定要观察的文件对象\n     @param options 观察选项\n     @param callback `(evtType: 'change' | 'rename', filename: string) => any` 当文件对象发生变化时的处理回调\n     @return FSWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watch",
      "type": "FSWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Object",
          "name": "options",
          "default": null
        },
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 watcher 对象",
        "detail": [
          "options 支持的选项如下：",
          "```JavaScript",
          "{",
          "    \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出",
          "    \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录",
          "    \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码",
          "}",
          "```"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "options",
            "descript": "观察选项",
            "detail": []
          },
          {
            "name": "callback",
            "descript": "`(evtType: 'change' | 'rename', filename: string) => any` 当文件对象发生变化时的处理回调",
            "detail": []
          }
        ],
        "return": {
          "descript": "FSWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 StatsWatcher 对象\n     @param fname 指定要观察的文件对象\n     @param callback `(curStats: Stats, prevStats: Stats) => any` 当文件对象的 stats 发生变化时的处理回调\n     @return StatsWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watchFile",
      "type": "StatsWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 StatsWatcher 对象",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "callback",
            "descript": "`(curStats: Stats, prevStats: Stats) => any` 当文件对象的 stats 发生变化时的处理回调",
            "detail": []
          }
        ],
        "return": {
          "descript": "StatsWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 观察一个文件, 返回对应的 StatsWatcher 对象\n    \n     options 支持的选项如下：\n     ```JavaScript\n     {\n         \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出\n         \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录\n         \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码\n     }\n     ```\n     @param fname 指定要观察的文件对象\n     @param options 观察选项\n     @param callback `(curStats: Stats, prevStats: Stats) => any` 当文件对象的 stats 发生变化时的处理回调\n     @return StatsWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "watchFile",
      "type": "StatsWatcher",
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Object",
          "name": "options",
          "default": null
        },
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "观察一个文件, 返回对应的 StatsWatcher 对象",
        "detail": [
          "options 支持的选项如下：",
          "```JavaScript",
          "{",
          "    \"persistent\": true, // {boolean} default: true 是否只要目标文件还在被观察, 进程就不退出",
          "    \"recursive\": false, // {boolean} default: false 对于 fname 为文件夹的情况, 是否递归地观察其下所有的子目录",
          "    \"encoding\": \"utf8\", // {enum} default: 'utf8' 指定解析传入的 fname 的字符编码",
          "}",
          "```"
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "options",
            "descript": "观察选项",
            "detail": []
          },
          {
            "name": "callback",
            "descript": "`(curStats: Stats, prevStats: Stats) => any` 当文件对象的 stats 发生变化时的处理回调",
            "detail": []
          }
        ],
        "return": {
          "descript": "StatsWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从观察 fname 的 StatsWatcher 中移除所有观察事件的回调\n     @param fname 指定要观察的文件对象\n\n     @return StatsWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "unwatchFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        }
      ],
      "doc": {
        "descript": "从观察 fname 的 StatsWatcher 中移除所有观察事件的回调",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": [
              ""
            ]
          }
        ],
        "return": {
          "descript": "StatsWatcher 对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从观察 fname 的 StatsWatcher 的观察事件回调中移除 `callback` 回调\n    即便 callback 不再 StatsWatcher 的观察事件回调中也不会报错\n\n     @param fname 指定要观察的文件对象\n     @param callback 要移除的回调\n     @return StatsWatcher 对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "unwatchFile",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Function",
          "name": "callback",
          "default": null
        }
      ],
      "doc": {
        "descript": "从观察 fname 的 StatsWatcher 的观察事件回调中移除 `callback` 回调",
        "detail": [
          "即便 callback 不再 StatsWatcher 的观察事件回调中也不会报错",
          ""
        ],
        "params": [
          {
            "name": "fname",
            "descript": "指定要观察的文件对象",
            "detail": []
          },
          {
            "name": "callback",
            "descript": "要移除的回调",
            "detail": []
          }
        ],
        "return": {
          "descript": "StatsWatcher 对象",
          "detail": []
        }
      }
    }
  ],
  "collect": "File System"
}