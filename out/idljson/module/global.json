{
  "declare": {
    "comments": "! @brief 全局对象，所有脚本均可以访问的基础对象",
    "type": "module",
    "name": "global",
    "extend": "object",
    "module": true,
    "doc": {
      "descript": "全局对象，所有脚本均可以访问的基础对象",
      "detail": [],
      "params": []
    }
  },
  "members": [
    {
      "memType": "object",
      "comments": "! @brief 二进制数据缓存对象，用于 io 读写的数据处理，参见 Buffer 对象。",
      "deprecated": null,
      "name": "Buffer",
      "type": "Buffer",
      "doc": {
        "descript": "二进制数据缓存对象，用于 io 读写的数据处理，参见 Buffer 对象。",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "object",
      "comments": "! @brief 控制台访问对象 ",
      "deprecated": null,
      "name": "console",
      "type": "console",
      "doc": {
        "descript": "控制台访问对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "object",
      "comments": "! @brief 进程对象 ",
      "deprecated": null,
      "name": "process",
      "type": "process",
      "doc": {
        "descript": "进程对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief Worker 宿主对象，仅在 Worker 入口脚本有效 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "Master",
      "type": "Worker",
      "doc": {
        "descript": "Worker 宿主对象，仅在 Worker 入口脚本有效",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 全局对象 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "global",
      "type": "Object",
      "doc": {
        "descript": "全局对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 全局TypeScript 类对象 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "TypeScript",
      "type": "TypeScript",
      "doc": {
        "descript": "全局TypeScript 类对象",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 运行一个脚本\n     @param fname 指定要运行的脚本路径\n     @param argv 指定要运行的参数，此参数可在脚本内使用 argv 获取\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "run",
      "type": null,
      "params": [
        {
          "type": "String",
          "name": "fname",
          "default": null
        },
        {
          "type": "Array",
          "name": "argv",
          "default": {
            "value": "v8::Array::New(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "运行一个脚本",
        "detail": [],
        "params": [
          {
            "name": "fname",
            "descript": "指定要运行的脚本路径",
            "detail": []
          },
          {
            "name": "argv",
            "descript": "指定要运行的参数，此参数可在脚本内使用 argv 获取",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 加载一个模块并返回模块对象，更多信息参阅 @ref module\n\n     require 可用于加载基础模块，文件模块。\n\n     基础模块是沙箱创建时初始化的模块，引用时只需传递相应的 id，比如 require(\"net\")。\n\n     文件模块是用户自定义模块，引用时需传递以 ./ 或 ../ 开头的相对路径。文件模块支持 .js, .jsc 和 .json 文件。\n\n     文件模块也支持 package.json 格式，当模块为目录结构时，require 会先查询 package.json 中的 main，未发现则尝试加载路径下的 index.js, index.jsc 或 index.json。\n\n     若引用路径不是 ./ 或 ../ 开头，并且非基础模块，require 从当前模块所在路径下的 node_modules 查找，并上级目录递归。\n\n     基础流程如下:\n\n     ```dot\n        digraph{\n            node [fontname = \"Helvetica,sans-Serif\", fontsize = 10];\n            edge [fontname = \"Helvetica,sans-Serif\", fontsize = 10];\n\n            start [label=\"start\"];\n            resolve [label=\"path.resolve\" shape=\"rect\"];\n            search [label=\"recursive lookup\\nnode_modules\\nfrom the current path\" shape=\"rect\"];\n            load [label=\"load\" shape=\"rect\"];\n            end [label=\"end\" shape=\"doublecircle\"];\n\n            is_native [label=\"is internal module?\" shape=\"diamond\"];\n            is_mod [label=\"is module?\" shape=\"diamond\"];\n            is_abs [label=\"is absolute?\" shape=\"diamond\"];\n            has_file [label=\"module exists?\" shape=\"diamond\"];\n            has_ext [label=\"module.js exists?\" shape=\"diamond\"];\n            has_package [label=\"/package.json\\nexists?\" shape=\"diamond\"];\n            has_main [label=\"main exists?\" shape=\"diamond\"];\n            has_index [label=\"index.js exists?\" shape=\"diamond\"];\n\n            start -> is_native;\n            is_native -> end [label=\"Yes\"];\n            is_native -> is_mod [label=\"No\"];\n            is_mod -> search [label=\"Yes\"];\n            search -> has_file;\n            is_mod -> is_abs [label=\"No\"];\n            is_abs -> has_file [label=\"Yes\"];\n            is_abs -> resolve [label=\"No\"];\n            resolve -> has_file;\n            has_file -> load [label=\"Yes\"];\n            has_file -> has_ext [label=\"No\"];\n            has_ext -> load [label=\"Yes\"];\n            has_ext -> has_package [label=\"No\"];\n            has_package -> has_main [label=\"Yes\"];\n            has_package -> has_index [label=\"No\"];\n            has_main -> load [label=\"Yes\"];\n            has_main -> has_index [label=\"No\"];\n            has_index -> load [label=\"Yes\"];\n            has_index -> end [label=\"No\"];\n            load -> end;\n        }\n     ```\n\n     @param id 指定要加载的模块名称\n     @return 返回加载模块的引出对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "require",
      "type": "Value",
      "params": [
        {
          "type": "String",
          "name": "id",
          "default": null
        }
      ],
      "doc": {
        "descript": "加载一个模块并返回模块对象，更多信息参阅 @ref module",
        "detail": [
          "require 可用于加载基础模块，文件模块。",
          "",
          "基础模块是沙箱创建时初始化的模块，引用时只需传递相应的 id，比如 require(\"net\")。",
          "",
          "文件模块是用户自定义模块，引用时需传递以 ./ 或 ../ 开头的相对路径。文件模块支持 .js, .jsc 和 .json 文件。",
          "",
          "文件模块也支持 package.json 格式，当模块为目录结构时，require 会先查询 package.json 中的 main，未发现则尝试加载路径下的 index.js, index.jsc 或 index.json。",
          "",
          "若引用路径不是 ./ 或 ../ 开头，并且非基础模块，require 从当前模块所在路径下的 node_modules 查找，并上级目录递归。",
          "",
          "基础流程如下:",
          "",
          "```dot",
          "   digraph{",
          "       node [fontname = \"Helvetica,sans-Serif\", fontsize = 10];",
          "       edge [fontname = \"Helvetica,sans-Serif\", fontsize = 10];",
          "",
          "       start [label=\"start\"];",
          "       resolve [label=\"path.resolve\" shape=\"rect\"];",
          "       search [label=\"recursive lookup\\nnode_modules\\nfrom the current path\" shape=\"rect\"];",
          "       load [label=\"load\" shape=\"rect\"];",
          "       end [label=\"end\" shape=\"doublecircle\"];",
          "",
          "       is_native [label=\"is internal module?\" shape=\"diamond\"];",
          "       is_mod [label=\"is module?\" shape=\"diamond\"];",
          "       is_abs [label=\"is absolute?\" shape=\"diamond\"];",
          "       has_file [label=\"module exists?\" shape=\"diamond\"];",
          "       has_ext [label=\"module.js exists?\" shape=\"diamond\"];",
          "       has_package [label=\"/package.json\\nexists?\" shape=\"diamond\"];",
          "       has_main [label=\"main exists?\" shape=\"diamond\"];",
          "       has_index [label=\"index.js exists?\" shape=\"diamond\"];",
          "",
          "       start -> is_native;",
          "       is_native -> end [label=\"Yes\"];",
          "       is_native -> is_mod [label=\"No\"];",
          "       is_mod -> search [label=\"Yes\"];",
          "       search -> has_file;",
          "       is_mod -> is_abs [label=\"No\"];",
          "       is_abs -> has_file [label=\"Yes\"];",
          "       is_abs -> resolve [label=\"No\"];",
          "       resolve -> has_file;",
          "       has_file -> load [label=\"Yes\"];",
          "       has_file -> has_ext [label=\"No\"];",
          "       has_ext -> load [label=\"Yes\"];",
          "       has_ext -> has_package [label=\"No\"];",
          "       has_package -> has_main [label=\"Yes\"];",
          "       has_package -> has_index [label=\"No\"];",
          "       has_main -> load [label=\"Yes\"];",
          "       has_main -> has_index [label=\"No\"];",
          "       has_index -> load [label=\"Yes\"];",
          "       has_index -> end [label=\"No\"];",
          "       load -> end;",
          "   }",
          "```",
          ""
        ],
        "params": [
          {
            "name": "id",
            "descript": "指定要加载的模块名称",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回加载模块的引出对象",
          "detail": []
        }
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 获取当前脚本的运行参数，启动 js 获取进程启动参数，run 执行的脚本获取传递的参数 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "argv",
      "type": "Array",
      "doc": {
        "descript": "获取当前脚本的运行参数，启动 js 获取进程启动参数，run 执行的脚本获取传递的参数",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 当前脚本文件名 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "__filename",
      "type": "String",
      "doc": {
        "descript": "当前脚本文件名",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "prop",
      "comments": "! @brief 当前脚本所在目录 ",
      "deprecated": null,
      "static": "static",
      "readonly": "readonly",
      "name": "__dirname",
      "type": "String",
      "doc": {
        "descript": "当前脚本所在目录",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 在指定的时间后调用函数\n    @param callback 指定回调函数\n    @param timeout 指定延时的时间，以毫秒为单位。超过 2^31 的话,立即执行。\n    @param args 额外的参数，传入到指定的 callback 内，可选。\n    @return 返回定时器对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "setTimeout",
      "type": "Timer",
      "params": [
        {
          "type": "Function",
          "name": "callback",
          "default": null
        },
        {
          "type": "Number",
          "name": "timeout",
          "default": {
            "value": "1"
          }
        },
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "在指定的时间后调用函数",
        "detail": [],
        "params": [
          {
            "name": "callback",
            "descript": "指定回调函数",
            "detail": []
          },
          {
            "name": "timeout",
            "descript": "指定延时的时间，以毫秒为单位。超过 2^31 的话,立即执行。",
            "detail": []
          },
          {
            "name": "args",
            "descript": "额外的参数，传入到指定的 callback 内，可选。",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回定时器对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除指定的定时器\n     @param t 指定要清除的定时器\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clearTimeout",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "t",
          "default": null
        }
      ],
      "doc": {
        "descript": "清除指定的定时器",
        "detail": [],
        "params": [
          {
            "name": "t",
            "descript": "指定要清除的定时器",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 每间隔指定的时间后调用函数\n     @param callback 指定回调函数\n     @param timeout 指定间隔的时间，以毫秒为单位。超过 2^31 的话,立即执行。\n     @param args 额外的参数，传入到指定的 callback 内，可选。\n     @return 返回定时器对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "setInterval",
      "type": "Timer",
      "params": [
        {
          "type": "Function",
          "name": "callback",
          "default": null
        },
        {
          "type": "Number",
          "name": "timeout",
          "default": null
        },
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "每间隔指定的时间后调用函数",
        "detail": [],
        "params": [
          {
            "name": "callback",
            "descript": "指定回调函数",
            "detail": []
          },
          {
            "name": "timeout",
            "descript": "指定间隔的时间，以毫秒为单位。超过 2^31 的话,立即执行。",
            "detail": []
          },
          {
            "name": "args",
            "descript": "额外的参数，传入到指定的 callback 内，可选。",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回定时器对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除指定的定时器\n     @param t 指定要清除的定时器\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clearInterval",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "t",
          "default": null
        }
      ],
      "doc": {
        "descript": "清除指定的定时器",
        "detail": [],
        "params": [
          {
            "name": "t",
            "descript": "指定要清除的定时器",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 每间隔指定的时间后调用函数，这是个高精度定时器，会主动打断正在运行的 JavaScript 脚本执行定时器\n     由于 setHrInterval 的定时器会中断正在运行的代码执行回调，因此不要在回调函数内修改可能影响其它模块的数据，或者在回调中调用任何标记为 async 的 api 函数，否则将会产生不可预知的结果。例如：\n     ```JavaScript\n        var timers = require('timers');\n\n        var cnt = 0;\n        timers.setHrInterval(() => {\n            cnt++;\n        }, 100);\n\n        while (cnt < 10);\n\n        console.error(\"===============================> done\");\n     ```\n     这段代码中，第 8 行的循环并不会因为 cnt 的改变而结束，因为 JavaScript 在优化代码时会认定在这个循环过程中 cnt 不会被改变。\n     @param callback 指定回调函数\n     @param timeout 指定间隔的时间，以毫秒为单位。超过 2^31 的话,立即执行。\n     @param args 额外的参数，传入到指定的 callback 内，可选。\n     @return 返回定时器对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "setHrInterval",
      "type": "Timer",
      "params": [
        {
          "type": "Function",
          "name": "callback",
          "default": null
        },
        {
          "type": "Number",
          "name": "timeout",
          "default": null
        },
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "每间隔指定的时间后调用函数，这是个高精度定时器，会主动打断正在运行的 JavaScript 脚本执行定时器",
        "detail": [
          "由于 setHrInterval 的定时器会中断正在运行的代码执行回调，因此不要在回调函数内修改可能影响其它模块的数据，或者在回调中调用任何标记为 async 的 api 函数，否则将会产生不可预知的结果。例如：",
          "```JavaScript",
          "   var timers = require('timers');",
          "",
          "   var cnt = 0;",
          "   timers.setHrInterval(() => {",
          "       cnt++;",
          "   }, 100);",
          "",
          "   while (cnt < 10);",
          "",
          "   console.error(\"===============================> done\");",
          "```",
          "这段代码中，第 8 行的循环并不会因为 cnt 的改变而结束，因为 JavaScript 在优化代码时会认定在这个循环过程中 cnt 不会被改变。"
        ],
        "params": [
          {
            "name": "callback",
            "descript": "指定回调函数",
            "detail": []
          },
          {
            "name": "timeout",
            "descript": "指定间隔的时间，以毫秒为单位。超过 2^31 的话,立即执行。",
            "detail": []
          },
          {
            "name": "args",
            "descript": "额外的参数，传入到指定的 callback 内，可选。",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回定时器对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除指定的定时器\n     @param t 指定要清除的定时器\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clearHrInterval",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "t",
          "default": null
        }
      ],
      "doc": {
        "descript": "清除指定的定时器",
        "detail": [],
        "params": [
          {
            "name": "t",
            "descript": "指定要清除的定时器",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 下一个空闲时间立即执行回调函数\n     @param callback 指定回调函数\n     @param args 额外的参数，传入到指定的 callback 内，可选。\n     @return 返回定时器对象\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "setImmediate",
      "type": "Timer",
      "params": [
        {
          "type": "Function",
          "name": "callback",
          "default": null
        },
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "下一个空闲时间立即执行回调函数",
        "detail": [],
        "params": [
          {
            "name": "callback",
            "descript": "指定回调函数",
            "detail": []
          },
          {
            "name": "args",
            "descript": "额外的参数，传入到指定的 callback 内，可选。",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回定时器对象",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 清除指定的定时器\n     @param t 指定要清除的定时器\n    ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clearImmediate",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "t",
          "default": null
        }
      ],
      "doc": {
        "descript": "清除指定的定时器",
        "detail": [],
        "params": [
          {
            "name": "t",
            "descript": "指定要清除的定时器",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 强制要求进行垃圾回收",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "GC",
      "type": null,
      "params": null,
      "doc": {
        "descript": "强制要求进行垃圾回收",
        "detail": [],
        "params": []
      }
    }
  ],
  "collect": "System"
}