{
  "declare": {
    "comments": "! @brief 常用工具模块 ",
    "type": "module",
    "name": "util",
    "extend": "object",
    "module": true,
    "doc": {
      "descript": "常用工具模块",
      "detail": [],
      "params": []
    }
  },
  "members": [
    {
      "memType": "method",
      "comments": "! @brief 按照指定的格式格式化变量\n\n     @param fmt 格式化字符串\n     @param args 可选参数列表\n     @return 返回格式化后的字符串\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "format",
      "type": "String",
      "params": [
        {
          "type": "String",
          "name": "fmt",
          "default": null
        },
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "按照指定的格式格式化变量",
        "detail": [],
        "params": [
          {
            "name": "fmt",
            "descript": "格式化字符串",
            "detail": []
          },
          {
            "name": "args",
            "descript": "可选参数列表",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回格式化后的字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 格式格式化变量\n\n     @param args 可选参数列表\n     @return 返回格式化后的字符串\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "format",
      "type": "String",
      "params": [
        {
          "type": "...",
          "name": "args",
          "default": null
        }
      ],
      "doc": {
        "descript": "格式格式化变量",
        "detail": [],
        "params": [
          {
            "name": "args",
            "descript": "可选参数列表",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回格式化后的字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 从一个构造函数 constructor 继承原型函数到另一个。构造函数的原型将被设置为一个新的从超类（superConstructor）创建的对象。\n\n     @param constructor 初始的构造函数\n     @param superConstructor 被继承的超类\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "inherits",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "constructor",
          "default": null
        },
        {
          "type": "Value",
          "name": "superConstructor",
          "default": null
        }
      ],
      "doc": {
        "descript": "从一个构造函数 constructor 继承原型函数到另一个。构造函数的原型将被设置为一个新的从超类（superConstructor）创建的对象。",
        "detail": [],
        "params": [
          {
            "name": "constructor",
            "descript": "初始的构造函数",
            "detail": []
          },
          {
            "name": "superConstructor",
            "descript": "被继承的超类",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 函数返回 obj 的字符串表示，主要用于调试。 附加的 options 可用于改变格式化字符串的某些方面。\n\n     @param obj 指定需要处理的对象\n     @param options 指定格式控制选项\n     @return 返回格式化后的字符串\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "inspect",
      "type": "String",
      "params": [
        {
          "type": "Object",
          "name": "obj",
          "default": null
        },
        {
          "type": "Object",
          "name": "options",
          "default": {
            "value": "v8::Object::New(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "函数返回 obj 的字符串表示，主要用于调试。 附加的 options 可用于改变格式化字符串的某些方面。",
        "detail": [],
        "params": [
          {
            "name": "obj",
            "descript": "指定需要处理的对象",
            "detail": []
          },
          {
            "name": "options",
            "descript": "指定格式控制选项",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回格式化后的字符串",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 封装给定的函数，本函数仅为兼容，并不输出警告\n\n     @param fn 给定需要封装的函数\n     @param msg 给定警告消息\n     @param code 给定警告编号\n     @return 如果封装结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "deprecate",
      "type": "Function",
      "params": [
        {
          "type": "Function",
          "name": "fn",
          "default": null
        },
        {
          "type": "String",
          "name": "msg",
          "default": null
        },
        {
          "type": "String",
          "name": "code",
          "default": {
            "value": "\"\""
          }
        }
      ],
      "doc": {
        "descript": "封装给定的函数，本函数仅为兼容，并不输出警告",
        "detail": [],
        "params": [
          {
            "name": "fn",
            "descript": "给定需要封装的函数",
            "detail": []
          },
          {
            "name": "msg",
            "descript": "给定警告消息",
            "detail": []
          },
          {
            "name": "code",
            "descript": "给定警告编号",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果封装结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否不包含任何值(没有可枚举的属性)\n\n     @param v 给定需要检测的变量\n     @return 如果为空则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isEmpty",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否不包含任何值(没有可枚举的属性)",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果为空则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是数组\n\n     @param v 给定需要检测的变量\n     @return 如果是数组则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isArray",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是数组",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是数组则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Boolean\n\n     @param v 给定需要检测的变量\n     @return 如果是 Boolean 则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isBoolean",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Boolean",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Boolean 则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Null\n\n     @param v 给定需要检测的变量\n     @return 如果是 Null 则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isNull",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Null",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Null 则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Null 或者 Undefined\n\n     @param v 给定需要检测的变量\n     @return 如果是 Null 或者 Undefined 则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isNullOrUndefined",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Null 或者 Undefined",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Null 或者 Undefined 则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是数字\n\n     @param v 给定需要检测的变量\n     @return 如果是数字则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isNumber",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是数字",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是数字则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 BigInt\n\n     @param v 给定需要检测的变量\n     @return 如果是数字则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isBigInt",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 BigInt",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是数字则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是字符串\n\n     @param v 给定需要检测的变量\n     @return 如果是字符串则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isString",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是字符串",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是字符串则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Undefined\n\n     @param v 给定需要检测的变量\n     @return 如果是 Undefined 则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isUndefined",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Undefined",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Undefined 则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是正则对象\n\n     @param v 给定需要检测的变量\n     @return 如果是正则对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isRegExp",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是正则对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是正则对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是对象\n\n     @param v 给定需要检测的变量\n     @return 如果是对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isObject",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是日期对象\n\n     @param v 给定需要检测的变量\n     @return 如果是日期对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isDate",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是日期对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是日期对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是错误对象\n\n     @param v 给定需要检测的变量\n     @return 如果是错误对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isNativeError",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是错误对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是错误对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是原始类型\n\n     @param v 给定需要检测的变量\n     @return 如果是原始类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isPrimitive",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是原始类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是原始类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是Symbol类型\n\n     @param v 给定需要检测的变量\n     @return 如果是Symbol类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isSymbol",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是Symbol类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是Symbol类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 DataView 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 DataView 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isDataView",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 DataView 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 DataView 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 External 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 External 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isExternal",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 External 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 External 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Map 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 Map 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isMap",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Map 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Map 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 MapIterator 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 MapIterator 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isMapIterator",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 MapIterator 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 MapIterator 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Promise 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 Promise 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isPromise",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Promise 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Promise 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 AsyncFunction 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 AsyncFunction 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isAsyncFunction",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 AsyncFunction 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 AsyncFunction 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Set 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 Set 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isSet",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Set 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Set 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 SetIterator 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 SetIterator 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isSetIterator",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 SetIterator 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 SetIterator 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 TypedArray 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 TypedArray 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isTypedArray",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 TypedArray 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 TypedArray 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是 Uint8Array 类型\n\n     @param v 给定需要检测的变量\n     @return 如果是 Uint8Array 类型则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isUint8Array",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是 Uint8Array 类型",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是 Uint8Array 类型则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是函数对象\n\n     @param v 给定需要检测的变量\n     @return 如果是函数对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isFunction",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是函数对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是函数对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 检测给定的变量是否是函数 Buffer 对象\n\n     @param v 给定需要检测的变量\n     @return 如果是函数 Buffer 对象则返回 True\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "isBuffer",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "检测给定的变量是否是函数 Buffer 对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要检测的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "如果是函数 Buffer 对象则返回 True",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定对象是否包含给定的键\n\n     @param v 给定需要查询的对象\n     @param key 指定需要查询的键\n     @return 返回对象的全部键数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "has",
      "type": "Boolean",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "String",
          "name": "key",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定对象是否包含给定的键",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要查询的对象",
            "detail": []
          },
          {
            "name": "key",
            "descript": "指定需要查询的键",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象的全部键数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定对象的全部键数组\n\n     @param v 给定需要查询的对象\n     @return 返回对象的全部键数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "keys",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定对象的全部键数组",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要查询的对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象的全部键数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询指定对象的全部值数组\n\n     @param v 给定需要查询的对象\n     @return 返回对象的全部值数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "values",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "查询指定对象的全部值数组",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定需要查询的对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回对象的全部值数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 克隆给定变量，如果是对象或数组，则复制内容到新对象\n\n     @param v 给定要克隆的变量\n     @return 返回克隆结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "clone",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "克隆给定变量，如果是对象或数组，则复制内容到新对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要克隆的变量",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回克隆结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 深度冻结一个对象，被冻结后的对象及其包含的对象都将不允许修改\n\n     @param v 指定要冻结的对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "deepFreeze",
      "type": null,
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "深度冻结一个对象，被冻结后的对象及其包含的对象都将不允许修改",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "指定要冻结的对象",
            "detail": []
          }
        ]
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将一个或者多个对象的键值扩展到指定对象\n\n     @param v 指定要扩展的对象\n     @param objs 指定一个或者多个用于扩展的对象\n     @return 返回扩展的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "extend",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "...",
          "name": "objs",
          "default": null
        }
      ],
      "doc": {
        "descript": "将一个或者多个对象的键值扩展到指定对象",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "指定要扩展的对象",
            "detail": []
          },
          {
            "name": "objs",
            "descript": "指定一个或者多个用于扩展的对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回扩展的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将一个或者多个对象的键值扩展到指定对象，是 extend 的别名\n\n     @param v 指定要扩展的对象\n     @param objs 指定一个或者多个用于扩展的对象\n     @return 返回扩展的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "_extend",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "...",
          "name": "objs",
          "default": null
        }
      ],
      "doc": {
        "descript": "将一个或者多个对象的键值扩展到指定对象，是 extend 的别名",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "指定要扩展的对象",
            "detail": []
          },
          {
            "name": "objs",
            "descript": "指定一个或者多个用于扩展的对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回扩展的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个object副本，只过滤出指定键的属性值\n\n     @param v 指定要过滤的对象\n     @param objs 指定一个或者多个用于选择的键\n     @return 返回过滤的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "pick",
      "type": "Object",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "...",
          "name": "objs",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个object副本，只过滤出指定键的属性值",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "指定要过滤的对象",
            "detail": []
          },
          {
            "name": "objs",
            "descript": "指定一个或者多个用于选择的键",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回过滤的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个object副本，只过排除指定键的属性值\n\n     @param v 指定要过滤的对象\n     @param keys 指定一个或者多个用于排除的键\n     @return 返回排除的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "omit",
      "type": "Object",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "...",
          "name": "keys",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个object副本，只过排除指定键的属性值",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "指定要过滤的对象",
            "detail": []
          },
          {
            "name": "keys",
            "descript": "指定一个或者多个用于排除的键",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回排除的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 获取数组的第一个元素\n\n     @param v 给定要获取的数组\n     @return 返回获取的元素\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "first",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "获取数组的第一个元素",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要获取的数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回获取的元素",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 获取数组的开始多个元素\n\n     @param v 给定要获取的数组\n     @param n 指定要获取的元素个数\n     @return 返回获取的元素数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "first",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "n",
          "default": null
        }
      ],
      "doc": {
        "descript": "获取数组的开始多个元素",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要获取的数组",
            "detail": []
          },
          {
            "name": "n",
            "descript": "指定要获取的元素个数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回获取的元素数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 获取数组的第后一个元素\n\n     @param v 给定要获取的数组\n     @return 返回获取的元素\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "last",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        }
      ],
      "doc": {
        "descript": "获取数组的第后一个元素",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要获取的数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回获取的元素",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 获取数组的结尾多个元素\n\n     @param v 给定要获取的数组\n     @param n 指定要获取的元素个数\n     @return 返回获取的元素数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "last",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "Integer",
          "name": "n",
          "default": null
        }
      ],
      "doc": {
        "descript": "获取数组的结尾多个元素",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要获取的数组",
            "detail": []
          },
          {
            "name": "n",
            "descript": "指定要获取的元素个数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回获取的元素数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 获取数组的元素去重后的副本\n\n     @param v 给定要去重的数组\n     @param sorted 指定数组是否排序，如果指定数组排序，将使用快速算法\n     @return 返回去重元素后的数组\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "unique",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "v",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "sorted",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "获取数组的元素去重后的副本",
        "detail": [],
        "params": [
          {
            "name": "v",
            "descript": "给定要去重的数组",
            "detail": []
          },
          {
            "name": "sorted",
            "descript": "指定数组是否排序，如果指定数组排序，将使用快速算法",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回去重元素后的数组",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将一个或者多个数组的值合并成一个值唯一的数组\n\n     @param arrs 指定一个或者多个用于合并的数组\n     @return 返回合并的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "union",
      "type": "Array",
      "params": [
        {
          "type": "...",
          "name": "arrs",
          "default": null
        }
      ],
      "doc": {
        "descript": "将一个或者多个数组的值合并成一个值唯一的数组",
        "detail": [],
        "params": [
          {
            "name": "arrs",
            "descript": "指定一个或者多个用于合并的数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回合并的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个包含 arr 数组中排除一个或者多个数组元素的交集\n\n     @param arrs 指定一个或者多个用于计算交集的数组\n     @return 返回计算交集的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "intersection",
      "type": "Array",
      "params": [
        {
          "type": "...",
          "name": "arrs",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个包含 arr 数组中排除一个或者多个数组元素的交集",
        "detail": [],
        "params": [
          {
            "name": "arrs",
            "descript": "指定一个或者多个用于计算交集的数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回计算交集的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 将一个嵌套多层的数组(嵌套可以是任何层数)转换为只有一层的数组。 如果你传递 shallow 参数，数组将只减少一维的嵌套。\n\n     @param arr 指定需要转换的数组\n     @param shallow 指定是否只减少一维的嵌套，缺省为 false\n     @return 返回转换的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "flatten",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "arr",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "shallow",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "将一个嵌套多层的数组(嵌套可以是任何层数)转换为只有一层的数组。 如果你传递 shallow 参数，数组将只减少一维的嵌套。",
        "detail": [],
        "params": [
          {
            "name": "arr",
            "descript": "指定需要转换的数组",
            "detail": []
          },
          {
            "name": "shallow",
            "descript": "指定是否只减少一维的嵌套，缺省为 false",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回转换的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个包含 arr 数组中排除一个或者多个元素后的数组\n\n     @param arr 指定需要排除的数组\n     @param els 指定一个或者多个用于排除的元素\n     @return 返回排除的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "without",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "arr",
          "default": null
        },
        {
          "type": "...",
          "name": "els",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个包含 arr 数组中排除一个或者多个元素后的数组",
        "detail": [],
        "params": [
          {
            "name": "arr",
            "descript": "指定需要排除的数组",
            "detail": []
          },
          {
            "name": "els",
            "descript": "指定一个或者多个用于排除的元素",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回排除的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 返回一个包含 arr 数组中排除 without 数组元素之后的数组\n\n     @param list 指定需要排除的数组\n     @param arrs 指定用于排除的一个或者多个数组\n     @return 返回排除的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "difference",
      "type": "Array",
      "params": [
        {
          "type": "Array",
          "name": "list",
          "default": null
        },
        {
          "type": "...",
          "name": "arrs",
          "default": null
        }
      ],
      "doc": {
        "descript": "返回一个包含 arr 数组中排除 without 数组元素之后的数组",
        "detail": [],
        "params": [
          {
            "name": "list",
            "descript": "指定需要排除的数组",
            "detail": []
          },
          {
            "name": "arrs",
            "descript": "指定用于排除的一个或者多个数组",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回排除的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 遍历 list 中的所有元素，按顺序用遍历输出每个元素。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list)\n\n     @param list 指定需要遍历的列表或对象\n     @param iterator 指定用于遍历的回调函数\n     @param context 指定调用 iterator 时绑定的 context 对象\n     @return 返回 list 本身\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "each",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "list",
          "default": null
        },
        {
          "type": "Function",
          "name": "iterator",
          "default": null
        },
        {
          "type": "Value",
          "name": "context",
          "default": {
            "value": "v8::Undefined(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "遍历 list 中的所有元素，按顺序用遍历输出每个元素。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list)",
        "detail": [],
        "params": [
          {
            "name": "list",
            "descript": "指定需要遍历的列表或对象",
            "detail": []
          },
          {
            "name": "iterator",
            "descript": "指定用于遍历的回调函数",
            "detail": []
          },
          {
            "name": "context",
            "descript": "指定调用 iterator 时绑定的 context 对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 list 本身",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 通过变换函数（iterator迭代器）把 list 中的每个值映射到一个新的数组中。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list)\n\n     @param list 指定需要变换的列表或对象\n     @param iterator 指定用于变换的回调函数\n     @param context 指定调用 iterator 时绑定的 context 对象\n     @return 返回变换的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "map",
      "type": "Array",
      "params": [
        {
          "type": "Value",
          "name": "list",
          "default": null
        },
        {
          "type": "Function",
          "name": "iterator",
          "default": null
        },
        {
          "type": "Value",
          "name": "context",
          "default": {
            "value": "v8::Undefined(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "通过变换函数（iterator迭代器）把 list 中的每个值映射到一个新的数组中。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(element, index, list)",
        "detail": [],
        "params": [
          {
            "name": "list",
            "descript": "指定需要变换的列表或对象",
            "detail": []
          },
          {
            "name": "iterator",
            "descript": "指定用于变换的回调函数",
            "detail": []
          },
          {
            "name": "context",
            "descript": "指定调用 iterator 时绑定的 context 对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回变换的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 把 list中 元素归结为一个单独的数值。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(memo, element, index, list)\n\n     @param list 指定需要归结的列表或对象\n     @param iterator 指定用于归结的回调函数\n     @param memo 指定归结的初始值\n     @param context 指定调用 iterator 时绑定的 context 对象\n     @return 返回归结的结果\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "reduce",
      "type": "Value",
      "params": [
        {
          "type": "Value",
          "name": "list",
          "default": null
        },
        {
          "type": "Function",
          "name": "iterator",
          "default": null
        },
        {
          "type": "Value",
          "name": "memo",
          "default": null
        },
        {
          "type": "Value",
          "name": "context",
          "default": {
            "value": "v8::Undefined(isolate)"
          }
        }
      ],
      "doc": {
        "descript": "把 list中 元素归结为一个单独的数值。如果传递了 context 参数，则把 iterator 绑定到 context 对象上。每次调用 iterator 都会传递三个参数：(memo, element, index, list)",
        "detail": [],
        "params": [
          {
            "name": "list",
            "descript": "指定需要归结的列表或对象",
            "detail": []
          },
          {
            "name": "iterator",
            "descript": "指定用于归结的回调函数",
            "detail": []
          },
          {
            "name": "memo",
            "descript": "指定归结的初始值",
            "detail": []
          },
          {
            "name": "context",
            "descript": "指定调用 iterator 时绑定的 context 对象",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回归结的结果",
          "detail": []
        }
      }
    },
    {
      "memType": "object",
      "comments": "! @brief LRU(least recently used) 缓存对象，参见 LruCache 对象。",
      "deprecated": null,
      "name": "LruCache",
      "type": "LruCache",
      "doc": {
        "descript": "LRU(least recently used) 缓存对象，参见 LruCache 对象。",
        "detail": [],
        "params": []
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 解析命令行字符串返回参数列表\n     @param command 指定要解析的命令行字符串\n     @return 返回解析出的参数列表\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "parseArgs",
      "type": "NArray",
      "params": [
        {
          "type": "String",
          "name": "command",
          "default": null
        }
      ],
      "doc": {
        "descript": "解析命令行字符串返回参数列表",
        "detail": [],
        "params": [
          {
            "name": "command",
            "descript": "指定要解析的命令行字符串",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回解析出的参数列表",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 编译脚本为二进制代码\n     util.compile 可以将脚本编译为 v8 内部运行数据块(非机器执行代码)。编译以后的代码，保存为 *.jsc 后，可以由 run 和 require 直接加载执行。\n     \n     由于编译之后，目标代码将不能逆向获取源代码，依赖于 Function.toString 的程序将不能正常运行。\n\n     @param srcname 指定要添加的脚本名称\n     @param script 指定要编译的脚本代码\n     @param mode 编译模式，0: module, 1: script, 2: worker，缺省为 0\n     @return 返回编译出的二进制代码\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "compile",
      "type": "Buffer",
      "params": [
        {
          "type": "String",
          "name": "srcname",
          "default": null
        },
        {
          "type": "String",
          "name": "script",
          "default": null
        },
        {
          "type": "Integer",
          "name": "mode",
          "default": {
            "value": "0"
          }
        }
      ],
      "doc": {
        "descript": "编译脚本为二进制代码",
        "detail": [
          "util.compile 可以将脚本编译为 v8 内部运行数据块(非机器执行代码)。编译以后的代码，保存为 *.jsc 后，可以由 run 和 require 直接加载执行。",
          "",
          "由于编译之后，目标代码将不能逆向获取源代码，依赖于 Function.toString 的程序将不能正常运行。",
          ""
        ],
        "params": [
          {
            "name": "srcname",
            "descript": "指定要添加的脚本名称",
            "detail": []
          },
          {
            "name": "script",
            "descript": "指定要编译的脚本代码",
            "detail": []
          },
          {
            "name": "mode",
            "descript": "编译模式，0: module, 1: script, 2: worker，缺省为 0",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回编译出的二进制代码",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 包裹 callback 或 async 函数为同步调用\n\n     util.sync 将 callback 函数或者 async 函数处理为 sync 函数，以方便调用。\n\n     callback 示例如下：\n     ```JavaScript\n     // callback\n     var util = require('util');\n\n     function cb_test(a, b, cb) {\n       setTimeout(() => {\n          cb(null, a + b);\n       }, 100);\n     }\n\n     var fn_sync = util.sync(cb_test);\n     console.log(fn_sync(100, 200));\n     ```\n     async 示例如下：\n     ```JavaScript\n     // async/await\n     var util = require('util');\n\n     async function async_test(a, b) {\n         return a + b;\n     }\n\n     var fn_sync = util.sync(async_test);\n     console.log(fn_sync(100, 200));\n     ```\n     对于未标记为 async 的返回 promise 的函数，可以手动指定 sync 模式：\n     ```JavaScript\n     // async/await\n     var util = require('util');\n\n     function async_test(a, b) {\n         return new Promise(function (resolve, reject) {\n           resolve(a + b);\n         });\n     }\n\n     var fn_sync = util.sync(async_test, true);\n     console.log(fn_sync(100, 200));\n     ```\n\n     @param func 给定需要包裹的函数\n     @param async_func 指定以 async 函数方式处理 func，为 false 则自动判断\n     @return 返回同步运行的函数\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "sync",
      "type": "Function",
      "params": [
        {
          "type": "Function",
          "name": "func",
          "default": null
        },
        {
          "type": "Boolean",
          "name": "async_func",
          "default": {
            "value": "false"
          }
        }
      ],
      "doc": {
        "descript": "包裹 callback 或 async 函数为同步调用",
        "detail": [
          "util.sync 将 callback 函数或者 async 函数处理为 sync 函数，以方便调用。",
          "",
          "callback 示例如下：",
          "```JavaScript",
          "// callback",
          "var util = require('util');",
          "",
          "function cb_test(a, b, cb) {",
          "  setTimeout(() => {",
          "     cb(null, a + b);",
          "  }, 100);",
          "}",
          "",
          "var fn_sync = util.sync(cb_test);",
          "console.log(fn_sync(100, 200));",
          "```",
          "async 示例如下：",
          "```JavaScript",
          "// async/await",
          "var util = require('util');",
          "",
          "async function async_test(a, b) {",
          "    return a + b;",
          "}",
          "",
          "var fn_sync = util.sync(async_test);",
          "console.log(fn_sync(100, 200));",
          "```",
          "对于未标记为 async 的返回 promise 的函数，可以手动指定 sync 模式：",
          "```JavaScript",
          "// async/await",
          "var util = require('util');",
          "",
          "function async_test(a, b) {",
          "    return new Promise(function (resolve, reject) {",
          "      resolve(a + b);",
          "    });",
          "}",
          "",
          "var fn_sync = util.sync(async_test, true);",
          "console.log(fn_sync(100, 200));",
          "```",
          ""
        ],
        "params": [
          {
            "name": "func",
            "descript": "给定需要包裹的函数",
            "detail": []
          },
          {
            "name": "async_func",
            "descript": "指定以 async 函数方式处理 func，为 false 则自动判断",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回同步运行的函数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 包裹 callback 函数为 async 调用\n\n     util.promisify 将 callback 函数处理为 async 函数，以方便调用。\n\n     callback 示例如下：\n     ```JavaScript\n     // callback\n     var util = require('util');\n\n     function cb_test(a, b, cb) {\n       setTimeout(() => {\n          cb(null, a + b);\n       }, 100);\n     }\n\n     var fn_sync = util.promisify(cb_test);\n     console.log(async fn_sync(100, 200));\n     ```\n\n     @param func 给定需要包裹的函数\n     @return 返回 async 函数\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "promisify",
      "type": "Function",
      "params": [
        {
          "type": "Function",
          "name": "func",
          "default": null
        }
      ],
      "doc": {
        "descript": "包裹 callback 函数为 async 调用",
        "detail": [
          "util.promisify 将 callback 函数处理为 async 函数，以方便调用。",
          "",
          "callback 示例如下：",
          "```JavaScript",
          "// callback",
          "var util = require('util');",
          "",
          "function cb_test(a, b, cb) {",
          "  setTimeout(() => {",
          "     cb(null, a + b);",
          "  }, 100);",
          "}",
          "",
          "var fn_sync = util.promisify(cb_test);",
          "console.log(async fn_sync(100, 200));",
          "```",
          ""
        ],
        "params": [
          {
            "name": "func",
            "descript": "给定需要包裹的函数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 async 函数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 包裹 async 函数为 callback 调用\n\n     util.callbackify 将 async 函数处理为 callback 函数，以方便调用。\n\n     async 示例如下：\n     ```JavaScript\n     // async\n     var util = require('util');\n\n     async function async_test(a, b) {\n       return a + b;\n     }\n\n     var fn_callback = util.callbackify(async_test);\n\n     fn_callback(100, 200, (err, result) => {\n       console.log(result);\n     });\n     ```\n\n     @param func 给定需要包裹的函数\n     @return 返回 callback 函数\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "callbackify",
      "type": "Function",
      "params": [
        {
          "type": "Function",
          "name": "func",
          "default": null
        }
      ],
      "doc": {
        "descript": "包裹 async 函数为 callback 调用",
        "detail": [
          "util.callbackify 将 async 函数处理为 callback 函数，以方便调用。",
          "",
          "async 示例如下：",
          "```JavaScript",
          "// async",
          "var util = require('util');",
          "",
          "async function async_test(a, b) {",
          "  return a + b;",
          "}",
          "",
          "var fn_callback = util.callbackify(async_test);",
          "",
          "fn_callback(100, 200, (err, result) => {",
          "  console.log(result);",
          "});",
          "```",
          ""
        ],
        "params": [
          {
            "name": "func",
            "descript": "给定需要包裹的函数",
            "detail": []
          }
        ],
        "return": {
          "descript": "返回 callback 函数",
          "detail": []
        }
      }
    },
    {
      "memType": "method",
      "comments": "! @brief 查询当前引擎及各组件版本信息\n\n     ```JavaScript\n      {\n        \"fibjs\": \"0.25.0\",\n        \"clang\": \"9.1\",\n        \"date\": \"Jun 12 2018 07:22:40\",\n        \"vender\": {\n          \"ev\": \"4.24\",\n          \"expat\": \"2.2.5\",\n          \"gd\": \"2.2.4\",\n          \"jpeg\": \"8.3\",\n          \"leveldb\": \"1.17\",\n          \"mongo\": \"0.7\",\n          \"pcre\": \"8.21\",\n          \"png\": \"1.5.4\",\n          \"mbedtls\": \"2.6.1\",\n          \"snappy\": \"1.1.2\",\n          \"sqlite\": \"3.23.0\",\n          \"tiff\": \"3.9.5\",\n          \"uuid\": \"1.6.2\",\n          \"v8\": \"6.7.288.20\",\n          \"v8-snapshot\": true,\n          \"zlib\": \"1.2.7\",\n          \"zmq\": \"3.1\"\n        }\n      }\n     ```\n     @return 返回组件版本对象\n     ",
      "deprecated": null,
      "static": "static",
      "async": null,
      "name": "buildInfo",
      "type": "Object",
      "params": null,
      "doc": {
        "descript": "查询当前引擎及各组件版本信息",
        "detail": [
          "```JavaScript",
          " {",
          "   \"fibjs\": \"0.25.0\",",
          "   \"clang\": \"9.1\",",
          "   \"date\": \"Jun 12 2018 07:22:40\",",
          "   \"vender\": {",
          "     \"ev\": \"4.24\",",
          "     \"expat\": \"2.2.5\",",
          "     \"gd\": \"2.2.4\",",
          "     \"jpeg\": \"8.3\",",
          "     \"leveldb\": \"1.17\",",
          "     \"mongo\": \"0.7\",",
          "     \"pcre\": \"8.21\",",
          "     \"png\": \"1.5.4\",",
          "     \"mbedtls\": \"2.6.1\",",
          "     \"snappy\": \"1.1.2\",",
          "     \"sqlite\": \"3.23.0\",",
          "     \"tiff\": \"3.9.5\",",
          "     \"uuid\": \"1.6.2\",",
          "     \"v8\": \"6.7.288.20\",",
          "     \"v8-snapshot\": true,",
          "     \"zlib\": \"1.2.7\",",
          "     \"zmq\": \"3.1\"",
          "   }",
          " }",
          "```"
        ],
        "params": [],
        "return": {
          "descript": "返回组件版本对象",
          "detail": []
        }
      }
    }
  ],
  "collect": "Utility"
}