/*! @brief HttpResponse 是一个 HTTP 响应对象，使用 HttpRequest.response 对象完成 Http 服务端数据响应，或 http.request 请求返回服务器的响应数据

以下的例子展示如何在 http.Server 中使用，示例代码如下：
```
const http = require('http');

const server = new http.Server(8080, (request) => {
  // retreive the response object
  const response = request.response;
  // set the status code
  response.statusCode = 200;
  // set the content type to text/plain
  response.setHeader('Content-Type', 'text/plain');
  // write the response body
  response.write('ok');
});

server.start();
```
*/
interface HttpResponse : HttpMessage
{
    /*! @brief HttpResponse 构造函数，创建一个新的 HttpResponse 对象 */
    HttpResponse();

    /*! @brief 查询和设置响应消息的返回状态 */
    Integer statusCode;

    /*! @brief 查询和设置响应消息的返回消息 */
    String statusMessage;

    /*! @brief 查询和设置响应消息的返回状态，等同于 statusCode */
    Integer status;

    /*! @brief 查询当前响应是否正常 */
    readonly Boolean ok;

    /*! @brief 设置响应消息的返回状态，返回消息，并添加响应头
     @param statusCode 指定响应消息的返回状态
     @param statusMessage 指定响应消息的返回消息
     @param headers 指定响应消息添加的响应头
     */
    writeHead(Integer statusCode, String statusMessage, Object headers = {});

    /*! @brief 设置响应消息的返回状态，返回消息，并添加响应头
     @param statusCode 指定响应消息的返回状态
     @param headers 指定响应消息添加的响应头
     */
    writeHead(Integer statusCode, Object headers = {});

    /*! @brief 返回当前消息的 HttpCookie 对象列表 */
    readonly NArray cookies;

    /*! @brief 向 cookies 添加一个 HttpCookie 对象
     @param cookie 指定要添加的 HttpCookie 对象
     */
    addCookie(HttpCookie cookie);

    /*! @brief 发送重定向到客户端
     @param url 重定向的地址
     */
    redirect(String url);

    /*! @brief 发送重定向到客户端
     @param statusCode 指定响应消息的返回状态，接受的状态为：301, 302, 307
     @param url 重定向的地址
     */
    redirect(Integer statusCode, String url);

    /*! @brief 仅发送格式化 http 头到给定的流对象
     @param stm 指定接收格式化消息的流对象
     */
    sendHeader(Stream stm) async;
};
