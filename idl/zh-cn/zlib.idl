/*! @brief zlib 是内置的压缩模块，支持 gzip、deflate、zlib 等多种压缩格式和模式

 zlib 主要由以下 3 个函数组成：

- deflate：压缩数据；
- inflate：解压数据；
- gzip：gzip 压缩格式。

在使用 zlib 前，需要先根据需要使用的压缩算法选择其中一种。可以参考 zlib 的常量来选择相应的压缩算法。比如，我们使用 deflate 压缩算法进行模块说明：

```JavaScript
const zlib = require('zlib');
const { NO_COMPRESSION, BEST_SPEED, BEST_COMPRESSION, DEFAULT_COMPRESSION } = require('zlib');

// compress data
const deflated = zlib.deflate('hello, world', BEST_SPEED);
console.log(deflated.toString());

// decompress data
const inflated = zlib.inflate(deflated);
console.log(inflated.toString());
```

上面的代码展示了如何压缩和解压数据，先用 `zlib.deflate` 方法压缩 `hello, world` 这个字符串，并传入 `BEST_SPEED` 作为压缩级别选项，然后用 `zlib.inflate` 方法解压缩该数据，输出的结果应该与原始字符串相同。

`zlib.deflate` 和 `zlib.inflate` 都支持定义压缩级别，压缩级别是一个数字，取值范围为 `[NO_COMPRESSION, BEST_SPEED, DEFAULT_COMPRESSION, BEST_COMPRESSION]`，默认值为 `DEFAULT_COMPRESSION`。关于这 4 种压缩级别的含义，可以参考下面的 table：

| Compression Level | Meaning                                                                      |
| ----------------- | ---------------------------------------------------------------------------- |
| zlib.NO_COMPRESSION | 不压缩数据（含有压缩头完成的支持）                                    |
| zlib.BEST_SPEED     | 最快的压缩速度；但是压缩比也相应的差一些                           |
| zlib.DEFAULT_COMPRESSION | 根据压缩算法的默认值，通常情况下比 BEST_SPEED 的压缩速度慢但压缩率更高 |
| zlib.BEST_COMPRESSION   | 最高压缩比，但压缩速度也相应较慢。                                   |

在使用 `zlib` 模块时需要注意的是，如果要同时压缩和解压数据，建议先使用 `deflate` 对数据进行压缩之后再使用 `inflate` 对数据进行解压缩，避免出现错误。而对于不同的压缩格式和算法，还有其他的类和方法进行压缩和解压缩，可以参考以下文档进行使用。
 */
module zlib
{
    /*! @brief deflate 压缩级别，设定不压缩 */
    const NO_COMPRESSION = 0;

    /*! @brief deflate 压缩级别，设定最快压缩 */
    const BEST_SPEED = 1;

    /*! @brief deflate 压缩级别，设定最高压缩 */
    const BEST_COMPRESSION = 9;

    /*! @brief deflate 压缩级别，设定缺省设置 */
    const DEFAULT_COMPRESSION = -1;

    /*! zlib 模块的常量对象，参见 zlib_constants */
    static zlib_constants new constants();

    /*! @brief 创建一个 deflate 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createDeflate(Stream to);

    /*! @brief 创建一个 deflateRaw 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createDeflateRaw(Stream to);

    /*! @brief 创建一个 gunzip 流对象 
     @param to 用于存储处理结果的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回封装过的流对象*/
    static Stream createGunzip(Stream to, Integer maxSize = -1);

    /*! @brief 创建一个 gzip 流对象 
     @param to 用于存储处理结果的流
     @return 返回封装过的流对象*/
    static Stream createGzip(Stream to);

    /*! @brief 创建一个 inflate 流对象 
     @param to 用于存储处理结果的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回封装过的流对象*/
    static Stream createInflate(Stream to, Integer maxSize = -1);

    /*! @brief 创建一个 inflateRaw 流对象 
     @param to 用于存储处理结果的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回封装过的流对象*/
    static Stream createInflateRaw(Stream to, Integer maxSize = -1);

    /*! @brief 使用 deflate 算法压缩数据(zlib格式)
     @param data 给定要压缩的数据
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     @return 返回压缩后的二进制数据
     */
    static Buffer deflate(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩数据到流对象中(zlib格式)
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩源流中的数据到流对象中(zlib格式)
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 解压缩 deflate 算法压缩的数据(zlib格式)
     @param data 给定压缩后的数据
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回解压缩后的二进制数据
     */
    static Buffer inflate(Buffer data, Integer maxSize = -1) async;

    /*! @brief 解压缩 deflate 算法压缩的数据到流对象中(zlib格式)
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static inflateTo(Buffer data, Stream stm, Integer maxSize = -1) async;

    /*! @brief 解压缩源流中 deflate 算法压缩的数据到流对象中(zlib格式)
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static inflateTo(Stream src, Stream stm, Integer maxSize = -1) async;

    /*! @brief 使用 gzip 算法压缩数据
     @param data 给定要压缩的数据
     @return 返回压缩后的二进制数据
     */
    static Buffer gzip(Buffer data) async;

    /*! @brief 使用 gzip 算法压缩数据到流对象中
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Buffer data, Stream stm) async;

    /*! @brief 使用 gzip 算法压缩源流中的数据到流对象中
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     */
    static gzipTo(Stream src, Stream stm) async;

    /*! @brief 解压缩 gzip 算法压缩的数据
     @param data 给定压缩后的数据
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回解压缩后的二进制数据
     */
    static Buffer gunzip(Buffer data, Integer maxSize = -1) async;

    /*! @brief 解压缩 gzip 算法压缩的数据到流对象中
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static gunzipTo(Buffer data, Stream stm, Integer maxSize = -1) async;

    /*! @brief 解压缩源流中 gzip 算法压缩的数据到流对象中
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static gunzipTo(Stream src, Stream stm, Integer maxSize = -1) async;

    /*! @brief 使用 deflate 算法压缩数据(deflateRaw)
     @param data 给定要压缩的数据
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     @return 返回压缩后的二进制数据
     */
    static Buffer deflateRaw(Buffer data, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩数据到流对象中(deflateRaw)
     @param data 给定要压缩的数据
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateRawTo(Buffer data, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 使用 deflate 算法压缩源流中的数据到流对象中(deflateRaw)
     @param src 给定要压缩的数据所在的流
     @param stm 指定存储压缩数据的流
     @param level 指定压缩级别，缺省为 DEFAULT_COMPRESSION
     */
    static deflateRawTo(Stream src, Stream stm, Integer level = DEFAULT_COMPRESSION) async;

    /*! @brief 解压缩 deflate 算法压缩的数据(inflateRaw)
     @param data 给定压缩后的数据
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     @return 返回解压缩后的二进制数据
     */
    static Buffer inflateRaw(Buffer data, Integer maxSize = -1) async;

    /*! @brief 解压缩 deflate 算法压缩的数据到流对象中(inflateRaw)
     @param data 给定要解压缩的数据
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static inflateRawTo(Buffer data, Stream stm, Integer maxSize = -1) async;

    /*! @brief 解压缩源流中 deflate 算法压缩的数据到流对象中(inflateRaw)
     @param src 给定要解压缩的数据所在的流
     @param stm 指定存储解压缩数据的流
     @param maxSize 指定解压缩尺寸限制，缺省为 -1，不限制
     */
    static inflateRawTo(Stream src, Stream stm, Integer maxSize = -1) async;
};
