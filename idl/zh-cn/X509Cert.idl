/*! @brief X509Cert 是 crypto 模块中表示 x509 证书的对象，这个对象主要包括了从一个 DER 或者 PEM 格式的证书数据以及证书链数据构建出来的证书信息和方法，可以进行证书的解析和验证等操作

通过 X509Cert 对象可以获取到证书的主题名称，颁发者名称，通过时间，到期时间，ca 验证等等信息，还可以导出证书的 DER 编码，获取证书的公钥以及签名算法等等信息。

如果想要加载一个证书，可以使用如下代码从 DER/PEM 格式的证书数据中创建 X509Cert 对象：

```JavaScript
const crypto = require('crypto');

const certData = require('fs').readFile('server.crt');
const cert = new crypto.X509Cert(certData);
```

当然，X509Cert 对象也提供了直接导入证书的方法：

```JavaScript
const cert = crypto.X509Cert.import(certData);
```

然后你就可以通过 cert 进行各种证书的操作，例如获取证书的有效期时间：

```JavaScript
var strDate = cert.notBefore.toLocaleTimeString() + " " + cert.notBefore.toLocaleDateString() + " ~ " + cert.notAfter.toLocaleTimeString() + " " + cert.notAfter.toLocaleDateString();
console.log(`证书有效时间: ${strDate}`)
```
 */
interface X509Cert : object
{
    /*! @brief X509Cert 构造函数 */
    deprecated X509Cert();

    /*! @brief X509Cert 构造函数，加载一个 DER 格式的证书
     @param derCert DER 格式的证书
    */
    deprecated X509Cert(Buffer derCert);

    /*! @brief X509Cert 构造函数，加载一个 CRT/PEM 格式的证书
     @param txtCert CRT/PEM 格式的证书
    */
    deprecated X509Cert(String txtCert);

    /*! @brief 加载一个 DER 格式的证书，可多次调用
     @param derCert DER 格式的证书
    */
    import(Buffer derCert);

    /*! @brief 加载一个 CRT/PEM 格式的证书，可多次调用
     @param txtCert CRT/PEM 格式的证书
    */
    import(String txtCert);

    /*! @brief 加载自带的缺省根证书
    此证书内容源自：http://hg.mozilla.org/releases/mozilla-release/raw-file/default/security/nss/lib/ckfw/builtins/certdata.txt */
    loadRootCerts();

    /*! @brief 使用当前证书链验证给定的证书
     @param cert 给定需要验证的证书
     @return 如果验证成功则返回 True
    */
    Boolean verify(X509Cert cert) async;

    /*! @brief 以 PEM 格式导出已经加载的证书
     @param all 指定是否输出全部证书，缺省为 true
     @return 以数组方式导出证书链
    */
    String pem(Boolean all = true);

    /*! @brief 以 DER 格式导出已经加载的证书
     @return 以数组方式导出证书链
    */
    Buffer der();

    /*! @brief 清空已经加载的证书 */
    clear();

    /*! @brief 获取证书的版本 */
    readonly Integer version;

    /*! @brief 获取证书的序列号 */
    readonly String serial;

    /*! @brief 获取证书颁发者的可分辨名称 */
    readonly String issuer;

    /*! @brief 获取证书的主题可分辨名称 */
    readonly String subject;

    /*! @brief 获取证书的生效时间 */
    readonly Date notBefore;

    /*! @brief 获取证书的到期时间 */
    readonly Date notAfter;

    /*! @brief 获取证书是否是 ca 证书 */
    readonly Boolean ca;

    /*! @brief 获取证书的 pathlen */
    readonly Integer pathlen;

    /*! @brief 获取证书的使用范围

    结果为全部或部分以下内容：digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign
    */
    readonly String usage;

    /*! @brief 获取证书的 Netscape 证书类型

    结果为全部或部分以下内容：client, server, email, objsign, reserved, sslCA, emailCA, objCA
     */
    readonly String type;

    /*! @brief 获取证书的摘要算法 */
    readonly Integer sig_md;

    /*! @brief 获取证书的签名算法 */
    readonly Integer sig_pk;

    /*! @brief 获取证书的公钥 */
    readonly PKey publicKey;

    /*! @brief 获取证书链中得下一个证书 */
    readonly X509Cert next;
};
