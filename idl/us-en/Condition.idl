/*! @brief condition variable object

 Condition variables are a mechanism that uses global variables shared by fibrous lines, mainly including two actions: two actions:
 1) A thread is waiting for a certain condition to be established, and hang itself;
 2) Another thread enables the conditions and notify the waiting fiber journey down.

 In order to prevent competition, each condition variable requires a lock cooperation (LOCK can be created and passed in by itself, or it can be created for you)

 By using condition variables, a condition variable can be used to control a batch of fibrous switches;

 Here are examples of two fibrous scheduling:
 `` `Javascript
 var Coroutine = Require ("Coroutine");
 var Cond = New Coroutine.Condition ();
 Var ready = false;
 var state = "ready";

 function funcwait () {
    cond.acquire ();
    While (! Ready)
        cond.wait ();
    state = "Go"
    cond.release ();
 }

 Coroutine.start (funcwait);

 cond.acquire ();
 console.log (state)
 Ready = true;
 cond.notify ();
 coroutine.sleep ();
 console.log (state);
 `` `
 Will output:
 `` `SH
 ready
 GO
 `` `*/
interface Condition : Lock
{
    /*! @Brief condition variable constructive function (the lock required for condition variables by the internal structure of Fibjs)*/
    Condition();

    /*! @Brief condition variable constructor constructor 
      @Param Lock uses a self -constructed lock*/
    Condition(Lock lock);

    /*! @brief entered the blocking state*/
    wait();

    /*! @brief notify a blocking fiber (finally added to the fiber tank) to continue the execution*/
    notify();

    /*! @brief notify all the obstructive fibrous journes to continue to execute down*/
    notifyAll();
};
