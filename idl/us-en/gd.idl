/*! @brief image file processing module 

  Basic module. Can be used to create and operate image files, quotation methods: 
  `` `Javascript 
  var gd = reques ('gd'); 
  `` `*/
module gd
{
    /*! @Brief image format constant, indicating that the current image source is unknown*/
    const NONE = 0;

    /*! @brief image format constant, indicate the current image source as JPEG format data*/
    const JPEG = 1;

    /*! @brief image format constant, indicate the current image source to GIF format data*/
    const GIF = 2;

    /*! @Brief image format constant, indicate the current image source to PNG format data*/
    const PNG = 3;

    /*! @brief image format constant, indicate the current image source to TIFF format data*/
    const TIFF = 4;

    /*! @brief image format constant, indicate the current image source as BMP format data*/
    const BMP = 5;

    /*! @Brief image format constant, indicate the current image source as webp format data*/
    const WEBP = 6;

    /*! @brief image type constant, indicate the current image as a real color image*/
    const TRUECOLOR = 0;

    /*! @brief image type constant, indicate the current image as a color panel image*/
    const PALETTE = 1;

    /*! @Brief fan -shaped drawing style, draw a arc with a connection start and end point*/
    const ARC = 0;

    /*! @Brief fan -shaped drawing style, draw a connection origin, start and start the straight line of the end point*/
    const CHORD = 1;

    /*! @Brief fan -shaped drawing style, drawing non -filling fan*/
    const NOFILL = 2;

    /*! @Brief fan -shaped drawing style, draw a straight line of connection starting point and end point, and the straight line of connection origin*/
    const EDGED = 4;

    /*! @Brief mirror direction, horizontal mirror processing*/
    const HORIZONTAL = 1;

    /*! @Brief mirror direction, vertical mirror processing*/
    const VERTICAL = 2;

    /*! @Brief mirror direction, horizontal and vertical mirror processing*/
    const BOTH = 3;

    /*! @brief rotate direction, rotate to the left*/
    const LEFT = 1;

    /*! @Brief rotate direction and rotate to the right*/
    const RIGHT = 2;

    /*! @brief Filter Type: Use the average removal method to achieve the contour effect*/
    const MEAN_REMOVAL = 0;

    /*! @brief Filter Type: Use edge detection to highlight the edge of the image*/
    const EDGEDETECT = 1;

    /*! @Brief Filter Type: Make the image relief*/
    const EMBOSS = 2;

    /*! @brief filter type: fuzzy image*/
    const SELECTIVE_BLUR = 3;

    /*! @brief Filter Type: Blur the image with Gaussian algorithm*/
    const GAUSSIAN_BLUR = 4;

    /*! @brief filter type: reverse all colors in the image*/
    const NEGATE = 5;

    /*! @brief Filter Type: Convert the image to gray diagram*/
    const GRAYSCALE = 6;

    /*! @brief filter type: make the image smoother, set the smooth level with ARG1*/
    const SMOOTH = 7;

    /*! @brief Filter Type: Change the brightness of the image, set the brightness level with ARG1, and the value range is -255 ~ 255*/
    const BRIGHTNESS = 8;

    /*! @brief filter type: change the contrast of the image, set the contrast level with ARG1, the range of the value is 0 ~ 100*/
    const CONTRAST = 9;

    /*! @brief filter type: Change the color of the image, specify the red, arg2, and ARG3 to specify the red, blue, and green respectively.*/
    const COLORIZE = 10;

    /*! @brief Create a new image 
      @param width specified image width 
      @param height specified image height 
      @Param color specify the image type, the allowable value is GD.TRUECOLOR or GD.palette 
      @Return Return to create a successful image object*/
    static Image create(Integer width, Integer height, Integer color = gd.TRUECOLOR) async;

    /*! @brief Decoding the image from the format data 
      @Param Data given an image data given by the decoding 
      @Return Return to the image object of successful decoding*/
    static Image load(Buffer data) async;

    /*! @brief Decoding image from the flow object 
      @Param STM given image data where the image data is located 
      @Return Return to the image object of successful decoding*/
    static Image load(SeekableStream stm) async;

    /*! @brief decoded the image from the specified file 
      @param fname specified file name 
      @Return Return to the image object of successful decoding*/
    static Image load(String fname) async;

    /*! @brief generates a combination color through RGB color component 
      @Param red red component with a range of 0-255 
      @Param Green green component with a range of 0-255 
      @Param Blue Blue component with a range of 0-255 
      @Return Return to a combination color*/
    static Integer rgb(Integer red, Integer green, Integer blue);

    /*! @brief generates a combination color through the RGBA color component 
      @Param red red component with a range of 0-255 
      @Param Green green component with a range of 0-255 
      @Param Blue Blue component with a range of 0-255 
      @Param Alpha transparent components, the range is 0.0-1.0 
      @Return Return to a combination color*/
    static Integer rgba(Integer red, Integer green, Integer blue, Number alpha);

    /*! @brief generates a combination color through HSL color component 
      @Param hue color phase components, the range is 0-360 
      @Param Saturation saturation component with a range of 0.0-1.0 
      @Param Lightness brightness component, range of 0.0-1.0 
      @Return Return to a combination color*/
    static Integer hsl(Number hue, Number saturation, Number lightness);

    /*! @brief generates a combination color through HSLA color component 
      @Param hue color phase components, the range is 0-360 
      @Param Saturation saturation component with a range of 0.0-1.0 
      @Param Lightness brightness component, range of 0.0-1.0 
      @Param Alpha transparent components, the range is 0.0-1.0 
      @Return Return to a combination color*/
    static Integer hsla(Number hue, Number saturation, Number lightness, Number alpha);

    /*! @brief generates a combination color through HSB color component 
      @Param hue color phase components, the range is 0-360 
      @Param Saturation saturation component with a range of 0.0-1.0 
      @Param Brightness is bright, the range is 0.0-1.0 
      @Return Return to a combination color*/
    static Integer hsb(Number hue, Number saturation, Number brightness);

    /*! @brief generates a combination color through HSBA color component 
      @Param hue color phase components, the range is 0-360 
      @Param Saturation saturation component with a range of 0.0-1.0 
      @Param Brightness is bright, the range is 0.0-1.0 
      @Param Alpha transparent components, the range is 0.0-1.0 
      @Return Return to a combination color*/
    static Integer hsba(Number hue, Number saturation, Number brightness, Number alpha);

    /*! @brief generates a combination color through a string 
      @Param color string specifies the color, such as: "#ff0000", "ff0000", "#f00", "f00" 
      @Return Return to a combination color*/
    static Integer color(String color);
};
