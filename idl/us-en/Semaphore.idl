/*! @brief fiber schedule semaphore object 

  The semaphore object manages an internal counter. This counter is reduced after calling ACQUIRE or WAIT, adding one after calling or post. 
  The counter will not be reduced to negative, because when ACquire and Wait finds the value 0, it will sleep currently fiber, until other fibrous dredema increases the value of the counter through the release or post. 

  The commonly used occasions are the application of resource -to -picked use, and the application of producer/consumer model. 

  Taking the database request as an example, the situation of restricting resources is used: 
  `` `Javascript 
  var maxConnections = 5; 
  var l = new coroutine.semaphore (maxConnections); 

  ... ... 

  l.acquire (); 
  var conn = connectdb () 
  ... 
  conn.close (); 
  l.Release (); 
  `` ` 

  Producers/consumer models usually use the semaphore with the queue. The producer adds data to the queue and posts a signal. Consumers first have a WAIT signal. After obtaining the signal, go to the team to check the data.*/
interface Semaphore : Lock
{
    /*! @Brief signal volume constructor 
      @Param Value counter initial value*/
    Semaphore(Integer value = 1);

    /*! @brief Waiting for a semaphore, equivalent to Acquire (TRUE)*/
    wait();

    /*! @brief Release a semaphore, equivalent to Release ()*/
    post();

    /*! @brief Try to get a signal. If it cannot be obtained, it will be returned and returned immediately, which is equivalent to Acquire (false) 
      @Return is successful and returns TRUE*/
    Boolean trywait();
};
