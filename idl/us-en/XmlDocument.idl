/*! @Brief XMLDOCUMENT object represents the entire XML document 

 The XMLDOCUMENT object is the root of a document tree, which can provide us with an access entrance to the initial (or top) of the document data. 
 For element nodes, text nodes, annotations, processing instructions, etc., they cannot exist outside the XMLDOCUMENT. The XMLDOCUMENT object also provides methods to create these objects. The XMLNODE object provides an OWNERDOCUMENT property, which can associate them with the XMLDOCUMENT where they create them.*/
interface XmlDocument : XmlNode
{
    /*! @Brief Construct an XMLDOCUMENT object 
      @Param Type specifies the type of document object, the default is "text/xml", if you need to process HTML, you need to specify "Text/HTML"*/
    XmlDocument(String type = "text/xml");

    /*! @brief By parsing a XML/HTML string to form this document, it does not support multi -language 
      @Param Source's XML/HTML text to be parsed depends on the type of documentation*/
    load(String source);

    /*! @brief By analyzes a binary XML/HTML string to form this document, and automatically conversion according to the language 
      @Param Source's XML/HTML text to be parsed depends on the type of documentation*/
    load(Buffer source);

    /*! @brief returns the encoding for document (when parsing)*/
    readonly String inputEncoding;

    /*! @brief set or return the document whether to be Standalone*/
    Boolean xmlStandalone;

    /*! @brief settings or returned to the xml version of the document*/
    String xmlVersion;

    /*! @Brief Return to document -related document type declaration (Document Type Declaration) 

     For XML documents without DTD, return NULL. This attribute can provide direct access to the XMLDOCUMENTYPE object (a sub -node of XMLDOCUMENT).*/
    readonly XmlDocumentType doctype;

    /*! @brief Return to the root node of the document*/
    readonly XmlElement documentElement;

    /*! @brief returns the head node of the HTML document, which is only valid in the HTML mode*/
    readonly XmlElement head;

    /*! @Brief returns the content of the Title node of the HTML document, which is only valid in the HTML mode*/
    readonly String title;

    /*! @brief returns the Body node of the HTML document, which is only valid in the HTML mode*/
    readonly XmlElement body;

    /*! @Brief returns a node list with all elements with specified names 

      This method will return an XMLNODELIST object (can be treated as an array only). The object stores all the Xmlelement nodes with specified label names in the document. The order of their storage is the order of appearing in the source document. The XMLNODELIST object is "alive", that is, if the element of the specified label name is added or deleted in the document, its content will automatically update the necessary. 
      @Param Tagname requires the label name. Value "*" match all the tags 
      @Return document tree has a XMLNODELIST set at the specified tagged XMLEMENT node. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByTagName(String tagName);

    /*! @Brief returns a list of nodes with all elements with specified naming space and name 

      This method is similar to the GetelementsBytagname () method, but it retrieves elements based on naming space and name. 
      @param namespaceuri specifies the name space URI. Value "*" can match all the tags 
      @Param LocalName label name. Value "*" match all the tags 
      @Return document tree has a XMLNODELIST set at the specified tagged XMLEMENT node. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByTagNameNS(String namespaceURI, String localName);

    /*! @brief returns elements with specified ID attributes 

      This method will traverse the descendants of the document to return a XMLEMENT node object, indicating the first document element with a specified ID attribute. Essence 
      @Param ID needs to retrieve the ID 
      @Return node tree with XMLELEMENT node with specified ID attributes*/
    XmlElement getElementById(String id);

    /*! @Brief returns a list of nodes with all elements with specified class names 

      This method will return an XMLNODELIST object (can be treated as an array only). The object stores all XMLELEMENT nodes with specified class names. The order of their storage is the order of appearing in the source document. The XMLNODELIST object is "alive", that is, if the element of the specified label name is added or deleted in the document, its content will automatically update the necessary. 
      @Param className Class name needs to be retrieved 
      The @Return document tree has a XMLNODELIST set at the XMLELEMENT node specifies the class name. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByClassName(String className);

    /*! @brief Create element node 
      @param tagname specify the name of the node specifically 
      @Return Return to the newly created XMleLement node, with a designated label name*/
    XmlElement createElement(String tagName);

    /*! @Brief Create an element node with a specified name space 
      @param namespaceuri specifies element node node name space URI 
      @param QualifydName specifies the name node specified name name 
      @Return Return to the newly created XMleLement node, with a designated label name*/
    XmlElement createElementNS(String namespaceURI, String qualifiedName);

    /*! @brief Create a text node 
      @param data specify the text of this node 
      @Return Return to the newly created XMLTEXT node, indicating the specified data string*/
    XmlText createTextNode(String data);

    /*! @brief Create annotation nodes 
      @Param Data specifies the annotation text of this node 
      @Return Return to the newly created XMLCOMMENT node, the annotation text is the specified data*/
    XmlComment createComment(String data);

    /*! @Brief Create XMLCDATASECTION node 
      @Param Data specifies this node to specify CDATA data 
      @Return Return to the newly created XMLCDATASECTION node, the content is the specified data*/
    XmlCDATASection createCDATASection(String data);

    /*! @Brief Create XMLPROCESSINGINSTRUCTION node 
      @param target Specify the target of the processing instruction 
      @param data specify the content text of the processing instruction 
      @Return's newly created ProssingInstruction node*/
    XmlProcessingInstruction createProcessingInstruction(String target, String data);
};
