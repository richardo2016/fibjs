/*! @Brief Timers module*/
module timers
{
    /*! @Brief calls the function after the specified time 
     @param callback specify the callback function 
     @Param Timeout specifies the delay time, in milliseconds. If you exceed 2^31, execute immediately. 
     @Param ARGS additional parameters are passed into the specified callback, optional. 
     @Return Return the timer object*/
    static Timer setTimeout(Function callback, Number timeout = 1, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearTimeout(Value t);

    /*! @brief Moist the function after the specified time of each interval 
      @param callback specify the callback function 
      @Param Timeout specifies the interval time, in milliseconds. If you exceed 2^31, execute immediately. 
      @Param ARGS additional parameters are passed into the specified callback, optional. 
      @Return Return the timer object*/
    static Timer setInterval(Function callback, Number timeout, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearInterval(Value t);

    /*! @brief Moist the function after the specified time of each interval.
     Since the timer of Sethrinterval is interrupted by the running coding of the code, do not modify the data that may affect other modules in the callback function, or call any API function marked as Async in the callback, otherwise the unpredictable results will be produced. E.g:
     `` `Javascript
        var timers = request ('timers');

        var cnt = 0;
        Timers.setHrinterval (() => {
            CNT ++;
        }, 100);

        WHILE (CNT <10);

        console.error ("================================================================================================================================================== >=
     `` `
     In this code, the cycle of line 8 will not end due to the change of CNT, because JavaScript will determine that CNT will not be changed during this cycle when optimizing the code.
     @param callback specify the callback function
     @Param Timeout specifies the interval time, in milliseconds. If you exceed 2^31, execute immediately.
     @Param ARGS additional parameters are passed into the specified callback, optional.
     @Return Return the timer object*/
    static Timer setHrInterval(Function callback, Number timeout, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearHrInterval(Value t);

    /*! @brief Immediately execute the callback function immediately 
      @param callback specify the callback function 
      @Param ARGS additional parameters are passed into the specified callback, optional. 
      @Return Return the timer object*/
    static Timer setImmediate(Function callback, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearImmediate(Value t);

    /*! @brief call given a given function, and interrupt the function running at the time of timeout expiration 
      @Param Func Specify a function to run 
      @param timeout specified timeout time 
      @Param ARGS additional parameters are passed into the specified callback, optional. 
      @Return Return to Func's running results*/
    static Value call(Function func, Number timeout, ...args);
};
