/*! @brief database access module 

  Basic module. Can be used to create and operate database resources, reference methods: 
  `` `Javascript 
  varb = reques ('db'); 
  var conn = db.open ('rng: // user: pass: port/dbname'); 
  `` ` 
  By speculating database engines, different database links can be established. Fibjs has two built -in SQL engines: SQLite and MySQL, and also supports more data libraries through ODBC/Unixodbc. Based on ODBC/Unixodbc, Fibjs builds drivers with MSSQL and PostgresQL. 
  In order to use ODBC/Unixodbc, the corresponding driver needs to be installed. Under POSIX, use MSSQL to install FreeTDS, and PostgreSQL needs to install PSQLODBC. 
  Under normal circumstances, the driver installation can be used directly without further configuration.*/
module db
{
    /*! @brief opens a database. 
      @Param Connstring database description, such as: mysql: // user: pass@host/db 
      @Return Return to the database connection object*/
    static object open(String connString) async;

    /*! @brief open a MySQL database 
      @Param Connstring database description, such as: mysql: // user: pass@host/db 
      @Return Return to the database connection object*/
    static MySQL openMySQL(String connString) async;

    /*! @Brief open a SQLite database 
      @Param Connstring database description, such as: sqlite: test.db or test.db 
      @Return Return to the database connection object*/
    static SQLite openSQLite(String connString) async;

    /*! @Brief open a SQLite database 
      @Param Connstring database description, such as: ODBC: // user: pass/db? Driver = postgresql%20ANSI 
      @Return Return to the database connection object*/
    static DbConnection openOdbc(String connString) async;

    /*! @Brief open a MSSQL database 

      In order to establish a connection with MSSQL, the ODBC driver must be installed under POSIX. You can also use Microsoft's MSSQL driver by specifying the driver. The specified driver is added after the URL? Driver = msodbcsql17 [.so/.dylib] Options. 
      @Param Connstring database description, such as: mssql: // user: pass@host/db 
      @Return Return to the database connection object*/
    static DbConnection openMSSQL(String connString) async;

    /*! @brief opens a postgressql database 

      In order to build a connection with Postgressql, the ODBC driver of Postgressql must be installed. 
      @Param Connstring database description, such as: psql: // user: pass@host/db 
      @Return Return to the database connection object*/
    static DbConnection openPSQL(String connString) async;

    /*! @Brief open a MongoDB database 
      @Param Connstring database description 
      @Return Return to the database connection object*/
    static MongoDB openMongoDB(String connString) async;

    /*! @brief open a levelb database 
      @Param Connstring database description, such as: level: test.db or test.db 
      @Return Return to the database object*/
    static LevelDB openLevelDB(String connString) async;

    /*! @Brief open a redis database 
      @Param Connstring database description, such as: redis: // server: port or "server" 
      @Return Return to the database connection object*/
    static Redis openRedis(String connString) async;
};
