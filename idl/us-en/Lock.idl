/*! @brief fiber lock object 

  Different from the lock of the operating system, the fibrous dating is realized in pure logic, and the lock and unlock load are very small. 
  `` `Javascript 
  var l = new coroutine.lock (); 
  l.acquire (); 
  ... 
  l.Release (); 
  `` `*/
interface Lock : object
{
    /*! @brief Construct function*/
    Lock();

    /*! @brief Get the ownership of locks 

      The ACquire method is used to obtain the ownership of the lock. When the lock is in the state -available state, this method returns true immediately. 

      When the lock cannot be obtained and the blocking is true, the current fiber journey enters the dormant. When other fibrous downs are released, this method returns true. 

      When the lock cannot be obtained and the blocking is false, the method returns false. 
      @Param Blocking specifies whether to wait, wait for true, the default is true 
      Whether the @Return returns to obtain the lock successfully, expressed success for TRUE*/
    Boolean acquire(Boolean blocking = true);

    /*! @Brief's ownership of release lock 

      This method will release the ownership of the lock. If the current fiber does not have a lock, this method will throw an error.*/
    release();

    /*! @brief query the current waiting task 
      @Return Return to the number of tasks*/
    Integer count();
};
