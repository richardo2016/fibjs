/*! @brief x509 certificate object 

  X509cert object belongs to the Crypto module, created: 
  `` `Javascript 
  var k = new crypto.x509cert (); 
  `` `*/
interface X509Cert : object
{
    /*! @Brief x509cert constructor*/
    X509Cert();

    /*! @brief x509cert constructor, load a deer format certificate 
      @param dercert deer format*/
    X509Cert(Buffer derCert);

    /*! @brief x509cert constructor, load a CRT/PEM/TXT format certificate 

     Load loaded the CertData, TXT, which can be downloaded at http://hg.mozilla.org/releases/mozilla-rease/raw-file/default/security/lib/builtins/certdata.txt download. 
      @Param TXTCERT CRT/PEM/TXT format*/
    X509Cert(String txtCert);

    /*! @brief Load a deer format certificate, which can be called multiple times 
      @param dercert deer format*/
    import(Buffer derCert);

    /*! @brief Load a CRT/PEM/TXT format certificate, which can be called multiple times 

     Import to Mozilla Certdata, TXT, can be available at http://hg.mozilla.org/releases/mozilla-rease/raw-file/default/Ses/lib/builtins/certdata.txt download. 
      @Param TXTCERT CRT/PEM/TXT format*/
    import(String txtCert);

    /*! @brief loaded its own default root certificate 
     The content of this certificate comes from: http://hg.mozilla.org/releases/mozilla-rease/raw-file/default/security/lib/builtins/certdata.txt*/
    loadRootCerts();

    /*! @brief uses the current certificate chain to verify the given certificate 
      @Param Cert Given Certificate to Requires 
      @Return If the verification is successful, return TRUE*/
    Boolean verify(X509Cert cert) async;

    /*! @brief exported the certificate that has been loaded in PEM format 
      @param all specifies whether to output all certificates, the default is TRUE 
      @Return Export the certificate chain in a array*/
    String pem(Boolean all = true);

    /*! @brief exported the certificate that has been loaded in a der format 
      @Return Export the certificate chain in a array*/
    Buffer der();

    /*! @Brief Clear Certificate that has been loaded*/
    clear();

    /*! @brief Get the certificate of the certificate*/
    readonly Integer version;

    /*! @brief Get the sequence number of the certificate*/
    readonly String serial;

    /*! @Brief obtained the certificate of the certificate of the certificate of the certificate*/
    readonly String issuer;

    /*! @brief Get the theme of the certificate to distinguish the name*/
    readonly String subject;

    /*! @brief gets the time to get the certificate of getting the certificate*/
    readonly Date notBefore;

    /*! @brief gets the expiration time of the certificate*/
    readonly Date notAfter;

    /*! @brief obtaining certificate is a CA certificate*/
    readonly Boolean ca;

    /*! @brief Get the Pathlen of the certificate*/
    readonly Integer pathlen;

    /*! @brief Get the Scope of the use of certificates 

     Results are all or part of the content: DigitalSignature, Nonrepudiation, KeyenCipherment, DataNCIPHERMENT, KeyAgreement, Keycertsign, CRLSIGN, CRLSIGN*/
    readonly String usage;

    /*! @Brief Get the NETSCAPE certificate type 

     The result is all or part of the content: Client, Server, Email, Objsign, Reserved, SSLCA, Emailca, Objca*/
    readonly String type;

    /*! @Brief Obtaining Certificate Summary Algorithm*/
    readonly Integer sig_md;

    /*! @Brief obtained the signature algorithm of the certificate*/
    readonly Integer sig_pk;

    /*! @brief Get the certificate of the certificate*/
    readonly PKey publicKey;

    /*! @brief Get the certificate in the certificate chain*/
    readonly X509Cert next;
};
