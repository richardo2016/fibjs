/*! @brief SSL/TLS module, module alias: TLS*/
module ssl
{
    /*! @brief certificate verification mode, not verified*/
    const VERIFY_NONE = 0;

    /*! @brief certificate verification mode, optional verification, allowed verification to not pass*/
    const VERIFY_OPTIONAL = 1;

    /*! @brief certificate verification mode, required verification, the verification is not interrupted if it is not approved*/
    const VERIFY_REQUIRED = 2;

    /*! @brief certificate verification results, the certificate timeout*/
    const BADCERT_EXPIRED = 1;

    /*! @brief certificate verification results, the certificate was revoked*/
    const BADCERT_REVOKED = 2;

    /*! @brief certificate verification results, the certificate name is wrong*/
    const BADCERT_CN_MISMATCH = 4;

    /*! @brief certificate verification results, the certificate is not credible*/
    const BADCERT_NOT_TRUSTED = 8;

    /*! @Brief Create an SSLSOCKET object, see SSLSOCKET*/
    static SslSocket new Socket();

    /*! @brief Create a SSLHANDLER object, see SSLHANDLER*/
    static SslHandler new Handler();

    /*! @Brief Create a SSLServer object, see SSLSERVER*/
    static SslServer new Server();

    /*! @brief Create an SSLSOCKET object and create a connection 
     @Param url specifies the association, it can be: SSL: // host: port 
     @param timeout specifies the timeout time, the unit is milliseconds, the default is 0 
     @Return Return to the SSLSOCKET object that is successfully connected*/
    static Stream connect(String url, Integer timeout = 0) async;

    /*! @brief Create an SSLSOCKET object and create a connection 
     @Param url specifies the association, it can be: SSL: // host: port 
     @Param CRT certificate, used to send to the server to verify the client 
     @Param Key's private key, used to talk to the client 
     @param timeout specifies the timeout time, the unit is milliseconds, the default is 0 
     @Return Return to the SSLSOCKET object that is successfully connected*/
    static Stream connect(String url, X509Cert crt, PKey key, Integer timeout = 0) async;

    /*! @brief Set the default client certificate 
     @Param CRT certificate, used to send to the server to verify the client 
     @Param Key's private key, used to talk to the client*/
    static setClientCert(X509Cert crt, PKey key);

    /*! @Brief loaded its own default root certificate, which is equivalent to SSL.CA.LoadRootCerts 
     The content of this certificate comes from: http://hg.mozilla.org/releases/mozilla-rease/raw-file/default/security/lib/builtins/certdata.txt*/
    static loadRootCerts();

    /*! @Brief global certificate, for SSL client mode verification server certificate*/
    static readonly X509Cert ca;

    /*! @brief Set the certificate verification mode, the default is Verify_required*/
    static Integer verification;
};
