/*! @brief asserted the test module. If the test value is fake, the error is reported. 

  Quote method: 
  `` `Javascript 
  var assert = request ('assert'); 
  `` ` 
  Or quote through the test module: 
  `` `Javascript 
  var test = request ('test'); 
  var assert = test.assert; 
  `` ` 
  Or configure it through test.setup: 
  `` `Javascript 
  Require ("test"). setup (); 
  `` `*/
module assert
{
    /*! @brief test value is true, but falsely asserts failure 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static Function(Value actual = undefined, String msg = "");

    /*! @brief test value is true, but falsely asserts failure 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static ok(Value actual = undefined, String msg = "");

    /*! @brief test the value is fake, but the true assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static notOk(Value actual = undefined, String msg = "");

    /*! @brief Test value is equal to the expected value, and if the same is different, the assertion fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static equal(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief test value is not equal to the expected value. 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static notEqual(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief Test value strictly equal to the expected value, if the same is different, it fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static strictEqual(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief Test value is not strict equal to the expected value, and the same assertion fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static notStrictEqual(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief Test the depth of the value is equal to the expected value, and if the same is different, the statement fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static deepEqual(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief Test value is not depth equal to the expected value, and the same time is that the failure fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static notDeepEqual(Value actual = undefined, Value expected = undefined, String msg = "");

    /*! @brief test value is similar to the expected value, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param Delta's approximate decimal accuracy 
      @Param MSG asserts the prompt information when failed*/
    static closeTo(Value actual, Value expected, Value delta, String msg = "");

    /*! @Brief test value is not as close as expected value, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param Delta's approximate decimal accuracy 
      @Param MSG asserts the prompt information when failed*/
    static notCloseTo(Value actual, Value expected, Value delta, String msg = "");

    /*! @brief Test value is less than the expected value, greater than or equal to assertion failure 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static lessThan(Value actual, Value expected, String msg = "");

    /*! @brief test value is not less than expected, less than assertion failure 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static notLessThan(Value actual, Value expected, String msg = "");

    /*! @brief test value greater than the expected value, less than or equal to assert failure 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static greaterThan(Value actual, Value expected, String msg = "");

    /*! @brief test value is not greater than the expected value, and it is greater than the assertion failure 
      @Param Actual to test the value 
      @Param Expected expected value 
      @Param MSG asserts the prompt information when failed*/
    static notGreaterThan(Value actual, Value expected, String msg = "");

    /*! @brief test variables exist, for false assertion failure 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static exist(Value actual, String msg = "");

    /*! @brief test variables do not exist, but the true assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static notExist(Value actual, String msg = "");

    /*! @brief Test the value of Boolean is true, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isTrue(Value actual, String msg = "");

    /*! @brief test value is not true for Boolean, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotTrue(Value actual, String msg = "");

    /*! @brief Test the value is Boolean value, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isFalse(Value actual, String msg = "");

    /*! @brief test value is not a vacation on the Boolean, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotFalse(Value actual, String msg = "");

    /*! @brief test value is null, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNull(Value actual, String msg = "");

    /*! @brief test value is not null, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotNull(Value actual, String msg = "");

    /*! @brief Test the value is UNDEFINED, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isUndefined(Value actual, String msg = "");

    /*! @brief Test the value is not UNDEFINED, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isDefined(Value actual, String msg = "");

    /*! @brief test the value as a function, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isFunction(Value actual, String msg = "");

    /*! @brief test value is not a function, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotFunction(Value actual, String msg = "");

    /*! @brief test the value as the object, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isObject(Value actual, String msg = "");

    /*! @brief test value is not the object, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotObject(Value actual, String msg = "");

    /*! @brief test the value is the array, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isArray(Value actual, String msg = "");

    /*! @brief test value is not a array, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotArray(Value actual, String msg = "");

    /*! @brief test the value as a string, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isString(Value actual, String msg = "");

    /*! @Brief test value is not a string, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotString(Value actual, String msg = "");

    /*! @brief test the value to the number, otherwise the assertion failed 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNumber(Value actual, String msg = "");

    /*! @brief test value is not numbers, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotNumber(Value actual, String msg = "");

    /*! @brief test value is Boolean, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isBoolean(Value actual, String msg = "");

    /*! @brief Test the value is not Boer, otherwise the assertion fails 
      @Param Actual to test the value 
      @Param MSG asserts the prompt information when failed*/
    static isNotBoolean(Value actual, String msg = "");

    /*! @brief test value is a given type, otherwise the assertion fails 
      @Param Actual to test the value 
      @param type specified type 
      @Param MSG asserts the prompt information when failed*/
    static typeOf(Value actual, String type, String msg = "");

    /*! @brief test value is not a given type, otherwise the assertion fails 
      @Param Actual to test the value 
      @param type specified type 
      @Param MSG asserts the prompt information when failed*/
    static notTypeOf(Value actual, String type, String msg = "");

    /*! @brief test objects contain the specified attribute, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attribute 
      @Param MSG asserts the prompt information when failed*/
    static property(Value object, Value prop, String msg = "");

    /*! @brief test objects do not include specified attributes, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attribute 
      @Param MSG asserts the prompt information when failed*/
    static notProperty(Value object, Value prop, String msg = "");

    /*! @brief In -depth test object contains the specified attribute, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attributes, "." 
      @Param MSG asserts the prompt information when failed*/
    static deepProperty(Value object, Value prop, String msg = "");

    /*! @brief deep test object does not include specified attributes, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attributes, "." 
      @Param MSG asserts the prompt information when failed*/
    static notDeepProperty(Value object, Value prop, String msg = "");

    /*! @brief The value of the specified attribute in the test object is the given value, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attribute 
      @param Value given a given value 
      @Param MSG asserts the prompt information when failed*/
    static propertyVal(Value object, Value prop, Value value, String msg = "");

    /*! @brief The value of the specified attribute in the test object is not a given value, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attribute 
      @param Value given a given value 
      @Param MSG asserts the prompt information when failed*/
    static propertyNotVal(Value object, Value prop, Value value, String msg = "");

    /*! @brief Deep test objects specified the value of the attribute is the given value, otherwise the assertion failed 
      @param Object to test the object 
      @Param PROP to test the attributes, "." 
      @param Value given a given value 
      @Param MSG asserts the prompt information when failed*/
    static deepPropertyVal(Value object, Value prop, Value value, String msg = "");

    /*! @brief Deep test objects The value of the specified attribute is not a given value, otherwise the assertion fails 
      @param Object to test the object 
      @Param PROP to test the attributes, "." 
      @param Value given a given value 
      @Param MSG asserts the prompt information when failed*/
    static deepPropertyNotVal(Value object, Value prop, Value value, String msg = "");

    /*! @Brief test given the code that gives an error, if it is not thrown, it will fail 
      @Param Block specify the test code of the test, give it in a functional form 
      @Param MSG asserts the prompt information when failed*/
    static throws(Function block, String msg = "");

    /*! @Brief test given the given code will not throw an error. If you throw it out, assertion failure 
      @Param Block specify the test code of the test, give it in a functional form 
      @Param MSG asserts the prompt information when failed*/
    static doesNotThrow(Function block, String msg = "");

    /*! @brief If the parameters are true, throw it out 
      @param Object parameters*/
    static ifError(Value object = undefined);
};
