/*! @Brief Redis database client SortedSet object, this object is a client that contains specified key, only the method of calling its method can operate the database of the database 

  Sortedset objects used to operate Redis, create methods: 
  `` `Javascript 
  varb = request ("db"); 
  var rdb = new db.openredis ("redis-server"); 
  var set = rdb.getsortedset ("test"); 
  `` `*/
interface RedisSortedSet : object
{
    /*! @Brief adds one or more MEMBER elements and its score value to the prefix 
      @Param SMS specifies the MEMBER/Score object to be added 
      The number of new members that are successfully added in @Return, excluding those updated, existing members*/
    Integer add(Object sms);

    /*! @Brief adds one or more MEMBER elements and its score value to the prefix 
      @Param SMS specify the MEMBER/Score list to be added 
      The number of new members that are successfully added in @Return, excluding those updated, existing members*/
    Integer add(...sms);

    /*! @brief returns an orderly concentration, the score value of Member Member 
      @param Member specifies the MEMBER that to query 
      The score value of the member of the @Return Member member, expressed in the form of a string*/
    Buffer score(Buffer member);

    /*! @brief is the score value of Member, a member of the Elief, adds an incremental NUM 
      @param Member specifies the MEMBER that to be modified 
      @param num specifies the value to be added 
      The new score value of the member of the @Return Member, represented in the form of a string*/
    Buffer incr(Buffer member, Long num = 1);

    /*! @brief Remove one or more Member elements in an orderly concentration 
      @param Member specifies the element array to be removed 
      The number of @Return to be successfully removed, excluding the neglected elements*/
    Integer remove(Array members);

    /*! @brief Remove one or more Member elements in an orderly concentration 
      @Param Member specifies the list of elements to be removed 
      The number of @Return to be successfully removed, excluding the neglected elements*/
    Integer remove(...members);

    /*! @Brief returns the number of orderly concentrated elements 
      @Return Return to the length of the upgrade*/
    Integer len();

    /*! @Brief returns an orderly concentration, the number of score values between min and max (default includes the number of SCORE values equal to min or max) 
      @param min Steller SCORE 
      @Param Max specified the largest score of statistics 
      The number of members between the @Return score value between the min and MAX*/
    Integer count(Integer min, Integer max);

    /*! @Brief returns an orderly concentration, and the position of the members in the specified interval is increasing (from small to large) to sort by the SCORE value (from small to large) 
      @param Start specifies the initial setting of the query, 0 indicates the first element, -1 indicates the last element 
      @param Stop specifies the end of the query, 0 indicates the first element, -1 indicates the last element 
      @param withScores specifies whether the score is included in the results 
      @Return In the specified interval, a list of prefabricated members with SCORE values (optional)*/
    NArray range(Integer start, Integer stop, Boolean withScores = false);

    /*! @Brief returns an orderly concentration, and the position of the members in the specified interval is sorted by the SCORE value (from large to small) 
      @param Start specifies the initial setting of the query, 0 indicates the first element, -1 indicates the last element 
      @param Stop specifies the end of the query, 0 indicates the first element, -1 indicates the last element 
      @param withScores specifies whether the score is included in the results 
      @Return In the specified interval, a list of prefabricated members with SCORE values (optional)*/
    NArray rangeRev(Integer start, Integer stop, Boolean withScores = false);

    /*! @Brief orderly concentrated member MEMBER ranking. Among them, the prelude members are arranged in the order of the SCORE value (from small to large) 
      @param Member specifies the MEMBER that to query 
      @Return Member If Member is a member of the Elimination Key and returns the MEMBER ranking. If MEMBER is not a member of the upgrade key, return NIL*/
    Integer rank(Buffer member);

    /*! @Brief orderly concentrated member MEMBER ranking. Among them, the prelude members are arranged in order of decreased SCORE value (from large to small) 
      @param Member specifies the MEMBER that to query 
      @Return Member If Member is a member of the Elimination Key and returns the MEMBER ranking. If MEMBER is not a member of the upgrade key, return NIL*/
    Integer rankRev(Buffer member);
};
