/*! @brief concurrent control module 

  Quote method: 
  `` `Javascript 
  Var Coroutine = Require ('Coroutine'); 
  `` `*/
module coroutine
{
    /*! @Brief Object, see lock*/
    static Lock;

    /*! @brief Signaling object, see Semaphore*/
    static Semaphore;

    /*! @brief condition variable object, see Condition*/
    static Condition;

    /*! @brief event object, see Event*/
    static Event;

    /*! @brief independent thread work object, see worker*/
    static Worker;

    /*! @brief Start a fiber journey and return to the fibrous journey 
      @Param Func formulate a function of the fibrous duration execution 
      @Param ARGS variable parameter sequence, this sequence will pass to the function in the fibrous journey 
      @Return Return to the fibrous line object*/
    static Fiber start(Function func, ...args);

    /*! @brief executes a set of functions in parallel and wait for returning 
      @Param funcs function array of parallel execution 
      @Param Fibers limits the number of FIBER, the default is -1, the same FIBER is enabled as the number of funcs 
      @Return Returns the array of the execution result of the function*/
    static Array parallel(Array funcs, Integer fibers = -1);

    /*! @brief Perform a function processing a set of data in parallel and wait for the return 
      @param Datas Payment Data arrays 
      @Param Func The function of parallel execution 
      @Param Fibers limits the number of FIBER, the default is -1, the same FIBER as the number of DataS 
      @Return Returns the array of the execution result of the function*/
    static Array parallel(Array datas, Function func, Integer fibers = -1);

    /*! @brief performs a function multiple times in parallel, and wait for the return 
      @Param Func The number of functions performed in parallel 
      @param num Repeated task 
      @Param Fibers limits the number of FIBER, the default is -1, the same FIBER is enabled as the number of funcs 
      @Return Returns the array of the execution result of the function*/
    static Array parallel(Function func, Integer num, Integer fibers = -1);

    /*! @brief executes a set of functions in parallel and wait for returning 
      @Param Funcs A set of functions in parallel execution 
      @Return Returns the array of the execution result of the function*/
    static Array parallel(...funcs);

    /*! @brief Return to the current fiber 
      @Return currently fiber*/
    static Fiber current();

    /*! @brief pause the time specified at the current fiber journey 
      @Param MS specifies the time to be suspended, in milliseconds as a unit, the default is 0, that is, free time to return to the operation immediately*/
    static sleep(Integer ms = 0) async;

    /*! @Brief returns all the FIBER arrays currently running*/
    static readonly Array fibers;

    /*! @brief query and set the number of free FIBER. When the server jitter is large, you can appropriately increase the number of idle FIBER. Deficiency 256*/
    static Integer spareFibers;

    /*! @brief query the current VM number*/
    static readonly Integer vmid;

    /*! @brief Modify and query the output level of this VM to filter output information. The default is console.notset, all output*/
    static Integer loglevel;
};
