/*! @brief network socket interface object 

  Socket belongs to Net module, creating method 
  `` `Javascript 
  var s = new net.socket (); 
  `` `*/
interface Socket : Stream
{
    /*! @Brief socket construct function to create a new socket object 
      @Param Family specify the address set, the default is AF_inet, IPv4*/
    Socket(Integer family = net.AF_INET);

    /*! @brief query the address set of the current socket object*/
    readonly Integer family;

    /*! @brief query the other party address of the current connection*/
    readonly String remoteAddress;

    /*! @Brief query the other port of the current connection*/
    readonly Integer remotePort;

    /*! @brief query the local address of the current connection*/
    readonly String localAddress;

    /*! @Brief query the local port of the current connection*/
    readonly Integer localPort;

    /*! @brief query and set timeout unit milliseconds*/
    Integer timeout;

    /*! @brief Create a TCP connection 
      @Param Host specifies the other's address or host name, or you can point to the Unix Socket and Windows Pipe path 
      @Param Port specifies the opponent port, connects the Unix Socket and Windows Pipe, ignore this parameter*/
    connect(String host, Integer port = 0) async;

    /*! @Brief binds the current socket to the specified port of all the local address 
      @Param Port specifies the binding port 
      @Param AllowipV4 specifies whether to accept an IPv4 connection, the default is TRUE. This parameter is effective at IPv6 and depends on the operating system*/
    bind(Integer port, Boolean allowIPv4 = true);

    /*! @Brief binds the current socket to the specified port of the specified address 
      @Param addr specifies the binding address, or it can also point to Unix Socket and Windows PIPE paths 
      @Param Port specifies the binding port, binds the Unix Socket and Windows Pipe, ignore this parameter 
      @Param AllowipV4 specifies whether to accept an IPv4 connection, the default is TRUE. This parameter is effective at IPv6 and depends on the operating system*/
    bind(String addr, Integer port = 0, Boolean allowIPv4 = true);

    /*! @brief Start the monitoring connection request 
      @Param Backlog specifies the length of the request queue, the excellent request will be rejected, the default is 120*/
    listen(Integer backlog = 120);

    /*! @brief wait and accept a connection 
      @Return Return to receive the connection object*/
    Socket accept() async;

    /*! @Brief from the connection read from the designated size data. Unlike the read method, the RECV does not guarantee the data that reads the required data. Instead, return immediately after reading the data 
      @param bytes specifies the amount of data to be read, and the data of the default read any size 
      @Return Return to the data read from connection*/
    Buffer recv(Integer bytes = -1) async;

    /*! @brief writes the given data to the connection. This method is equivalent to the WRITE method 
      @param Data Given the data you want to write*/
    send(Buffer data) async;
};
