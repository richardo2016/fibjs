/*! @Brief Redis database client Hash object, this object is a client that contains specified key, only the method of calling its method can operate the database 

  Hash objects used to operate Redis, create methods: 
  `` `Javascript 
  varb = request ("db"); 
  var rdb = new db.openredis ("redis-server"); 
  var have = rdb.gethash ("test"); 
  `` `*/
interface RedisHash : object
{
    /*! @brief set the value of the domain Field in the hash table as value. If the domain Field already exists in the hash table, the old value will be covered 
      @Param Field specifies FIELD to modify 
      @Param Value specify data to be modified*/
    set(Buffer field, Buffer value);

    /*! @brief sets the value of the domain Field in the hash table to value, and only does it exist in the domain FIELD. If the domain Field already exists, the operation is invalid 
      @Param Field specifies FIELD to modify 
      @Param Value specify data to be modified*/
    setNX(Buffer field, Buffer value);

    /*! @Brief Set multiple Field-Value (domain-value) at the same time to set it in the hash table, this command will cover the already existing domain in the hash table 
      @Param KVS specify the Field/Value object to be set*/
    mset(Object kvs);

    /*! @Brief Set multiple Field-Value (domain-value) at the same time to set it in the hash table, this command will cover the already existing domain in the hash table 
      @Param KVS specify the Field/Value list to be set*/
    mset(...kvs);

    /*! @brief returns the value of the domain FIELD in the hash table 
      @Param Field specifies FIELD to query 
      @Return Given the domain value, when the domain does not exist or the given key does not exist, return NULL*/
    Buffer get(Buffer field);

    /*! @Brief returns in the hash table, one or more domain values 
      @Param Fields specify the domain arrays to be queried 
      @Return A list containing all given domain values*/
    NArray mget(Array fields);

    /*! @Brief returns in the hash table, one or more domain values 
      @Param Fields specify the domain list to be queried 
      @Return A list containing all given domain values*/
    NArray mget(...fields);

    /*! @Brief adds the value stored in the domain 
      @Param Field specifies the domain to be modified 
      @param num specifies the value to be added 
      @Return and Num, the value of the domain*/
    Long incr(Buffer field, Long num = 1);

    /*! @brief returns in the hash table, all domains and values 
      @Return Return a list containing all domains in the hash table*/
    NArray getAll();

    /*! @brief Return to all the domains in the hash table 
      @Return Return the value, followed by each domain name (field name) is the value of the domain, so the length of the return value is twice the size of the hash table size.*/
    NArray keys();

    /*! @brief Return to the number of domains in the hash table 
      @Return Return to the number of domains in hash table*/
    Integer len();

    /*! @brief View in the hash table, whether the domain FIELD exists 
      @Param Field specifies FIELD to query 
      @Return If the hash table contains a given domain and return to True, if the hash table does not contain a given domain, or the key does not exist, return false*/
    Boolean exists(Buffer field);

    /*! @brief delete one or more specified domains in the hash table, and the do not exist will be ignored 
      @Param Fields specify the domain arrays to be deleted 
      @Return to be deleted in the number of domains*/
    Integer del(Array fields);

    /*! @brief delete one or more specified domains in the hash table, and the do not exist will be ignored 
      @Param Fields specify the domain list to be deleted 
      @Return to be deleted in the number of domains*/
    Integer del(...fields);
};
