/*! @brief test kit module to define the management test kit

Instructions :

`` `Javascript
var test = request ('test');
test.setup ();

description ('test', () => {
    before (() => {{
        // Setup BeFore The WHOLE TEST
    });

    beforeeach (() => {{{
        // Setup Before Each Test
    });

    after (() => {{{
        // Cleanup after the Whole Test
    });

    afterReach (() => {{{
        // Cleanup After Each Test
    });

    it ('case', () => {
        assert.ok (true);
    });

    // IGNORED TEST CASE
    xit ('case', () => {
        assert.ok (true);
    });

    // IGNORED TEST CASE
    it.skip ('case', () => {
        assert.ok (true);
    });

    // only test case
    oit ('case', () => {
        assert.ok (true);
    });

    // only test case
    it.only ('case', () => {
        assert.ok (true);
    });
});

// Async Function Test
description ('test async', () => {
  IT ('PASS CASE', Async () => {
    assert.ok (true);
  });

  IT ('error case', async () => {
      Throw New Error ('Some Thing Wrong!');
  });
});

// callback function test
// Cannot use callback mode in jsc
description ('test callback', () => {
  IT ('PASS CASE', Done => {
    settimeout (() => {{
      assert.ok (true);
      done ().
    }, 0);
  });

  IT ('Error Case', Done => {
    settimeout (() => {{
      Done (new error ('some things wrong!');
    }, 0);
  });

  IT ('Check in Done', do => {{
    settimeout (() => {{
      done (() => {{{
        assert.ok (true);
      });
    }, 0);
  });
});

Process.exit (-test.run (console.debug));
`` `*/
module test
{
    /*! @brief Define a test module, nested definition 
      @param name Define module name 
      @Param Block module initialization code*/
    static describe(String name, Function block);

    /*! @Brief pause test module definition, test.setup can be called by description.skip 
      @param name Define module name 
      @Param Block module initialization code*/
    static xdescribe(String name, Function block);

    /*! @Brief independent test module definition, test.setup can be called by description.only after testup 
      @param name Define module name 
      @Param Block module initialization code*/
    static odescribe(String name, Function block);

    /*! @brief Define a test item 
      @param name Definition project name 
      @Param Block test content*/
    static it(String name, Function block);

    /*! @brief pause test project definition, test.setup can be called with IT.SKIP call 
      @param name Definition project name 
      @Param Block test content*/
    static xit(String name, Function block);

    /*! @brief independent test project definition, test.setup can be called with IT.ONLY 
      @param name Definition project name 
      @Param Block test content*/
    static oit(String name, Function block);

    /*! @brief Define the current test module to enter the event 
      @param func event function*/
    static before(Function func);

    /*! @brief Define the current test module exit event 
      @param func event function*/
    static after(Function func);

    /*! @brief Define the current test module test project to enter the event 
      @param func event function*/
    static beforeEach(Function func);

    /*! @brief Define the current test module test items exit incident 
      @param func event function*/
    static afterEach(Function func);

    /*! @brief Start executing the defined test module 
      @Param Loglevel specifies the log output level when testing. When ERROR, the project reporting information is concentrated after the report shows that when the ERROR is lower, the output information is displayed at any time. When the report is higher than the ERROR, only the report is displayed. 
      @Return Return to the statistical results of the test case, the correct is returned 0, and the error returns the error number*/
    static Integer run(Integer loglevel = console.ERROR);

    /*! @brief asserted the test module. If the test value is fake, the error is reported.*/
    static assert;

    /*! @Brief initialize the test environment of the current script, copy the test module method to the current script global variable*/
    static setup();

    /*! @brief settings and query slow test warnings, take MS as a unit, and the default is 75*/
    static Integer slow;
};
