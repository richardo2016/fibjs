/*! @brief file path processing module 

  Quote method: 
  `` `Javascript 
  var Path = reques ('Path'). POSIX; 
  `` `*/
module path_posix
{
    /*! @Brief standardized path, processing the father's directory and other information in the path 

      @param Path given unprepared path 
      @Return Return to the processing path*/
    static String normalize(String path);

    /*! @Brief query the file name in the path. If the extension is specified, the expansion name of the matching is automatically canceled 

      @param Path given the path of the query 
      @Param EXT specifies the extension name. If there is a qualified extension in the file name, it will be automatically canceled 
      @Return Return file name*/
    static String basename(String path, String ext = "");

    /*! @Brief query the file extension in the path 

      @param Path given the path of the query 
      @Return returned the expansion name*/
    static String extname(String path);

    /*! @brief Try to format an object into a path 

      The fields supported by PathObject are as follows: 
      `` `Javascript 
      {{ 
          "DIR": "", // The directory of specified paths 
          "root": "", // The root directory of the specified path 
          "Base": "", // The file name of the specified path is equivalent to $ {name}. $ {ext} 
          "name": "", // The main document name of the specified path 
          "EXT": "", // Expansion of the specified path 
      } 
      `` ` 
      @param Pathobject specify parameters 
      @Return Return the path after formatting*/
    static String format(Object pathObject);

    /*! @brief Analysis path as a path object 

      @Param Path Class 
      @Return Return to Pathobject object*/
    static NObject parse(String path);

    /*! @Brief query the directory path in the path 

      @param Path given the path of the query 
      @Return returns the path to the directory obtained by*/
    static String dirname(String path);

    /*! @Brief conversion to the given path is the full path 

      @param Path given a path to a conversion 
      @Return Return to the full path of conversion*/
    static String fullpath(String path);

    /*! @Brief recognizes the given path the absolute path 

      @Param Path G given up path to identify 
      @Return is the absolute path and returns true*/
    static Boolean isAbsolute(String path);

    /*! @Brief merged a series of paths to become a single path 

      @Param PS one or more related paths 
      @Return returns the new path obtained*/
    static String join(...ps);

    /*! @Brief merged a series of paths to become an absolute path 

      @Param PS one or more related paths 
      @Return returns the new path obtained*/
    static String resolve(...ps);

    /*! @brief begging_from to the relative path 

      @param_from source path 
      @Param to target path 
      @Return returned the relative path*/
    static String relative(String _from, String to);

    /*! @Brief convert to namespace-prefixed path. It is only effective in Windows and other systems return directly. 
     See: https://msdn.microsoft.com/library/windows/desktop/aa365247 (v=vs.8).aspx#namespaces 
      @Param Path given a given path. 
      @Return returns the new path obtained*/
    static Value toNamespacedPath(Value path = undefined);

    /*! @Brief query the path segments of the current operating system, posix returns '/', Windows returns '\\'*/
    static readonly String sep;

    /*! @brief query the multi -path combination character of the current operating system, POSIX returns ':', windows back ';'*/
    static readonly String delimiter;

    /*! @brief posix implementation, see Path_POSIX*/
    static readonly Object posix;

    /*! @Brief Windows Realization, see path_win32*/
    static readonly Object win32;
};
