/*! @Brief Mongodb database database data set object 

  Create with mongodb.getCollection: 
  `` `Javascript 
  var color1 = mdb.getCollection ('test'); 
  var color = mdb.test; 
  `` `*/
interface MongoCollection : object
{
    /*! @Brief set up a cursor object according to the given query conditions and the return field settings 
     @param Query specify the object of the query condition 
     @Param Project specify the object of the return field 
     @Return Return to the cursor object*/
    MongoCursor find(Object query = {}, Object projection = {});

    /*! @Brief set a result based on the given query conditions and the return field settings, query a result 
     @param Query specify the object of the query condition 
     @Param Project specify the object of the return field 
     @Return Return the first result*/
    Object findOne(Object query = {}, Object projection = {});

    /*! @brief query and modify 
     @param Query specify query conditions, modify data 
     @Return Return to the results and other information before the modification*/
    Object findAndModify(Object query);

    /*! @brief Insert a set of data 
     @param documents specify the data array to be inserted*/
    insert(Array documents);

    /*! @brief Insert a data 
     @param docume specifies the data to be inserted*/
    insert(Object document);

    /*! @brief Save a piece of data. If the data contains the _id field, it is updated, otherwise it is inserted 
     @param docume specifies the data to be saved*/
    save(Object document);

    /*! @brief Update data according to the given query condition 
     @param Query specify the object of the query condition 
     @param docume specifies the data to be updated 
     When @Param Upsert data does not exist, insert a new data, default to false, not inserted 
     @Param Multi When there are more than one data that meets the conditions, all the data is updated, the default is false, and only the first one*/
    update(Object query, Object document, Boolean upsert = false, Boolean multi = false);

    /*! @brief Update data according to the given query condition 
     @param Query specify the object of the query condition 
     @param docume specifies the data to be updated 
     @Param Options UPSERT and Multi options passed by object fields*/
    update(Object query, Object document, Object options);

    /*! @brief Delete data according to the given query conditions 
     @param Query specify the object of the query condition*/
    remove(Object query);

    /*! @brief execute the database command 
     @Param CMD given command object 
     @Return Return command Return Result*/
    Object runCommand(Object cmd);

    /*! @brief execute the database command 
     @Param CMD given command name 
     @Param ARG given command parameter option 
     @Return Return command Return Result*/
    Object runCommand(String cmd, Object arg = {});

    /*! @brief Delete the current collection*/
    drop();

    /*! @brief creates indexes in the current collection 
     @Param Keys gives the index field, order and direction 
     @param Options given an index option, the only index, etc.*/
    ensureIndex(Object keys, Object options = {});

    /*! @brief Reconstruction of the index of the current collection 
     @Return Return the command execution result*/
    Object reIndex();

    /*! @brief Delete the index of the specified name of the current collection of the current collection 
     @param name given index name to delete 
     @Return Return the command execution result*/
    Object dropIndex(String name);

    /*! @brief Delete all indexes of the current collection 
     @Return Return the command execution result*/
    Object dropIndexes();

    /*! @brief query all indexes of the current collection 
     @Return Return to the result set containing indexes*/
    Array getIndexes();

    /*! @brief Get the collection object of the current collection of naming space 
     @param name Zi Naming Space Name 
     @Return Return to the new collection object*/
    MongoCollection getCollection(String name);

    /*! @brief quickly obtains the collection object of the current collection of the current collection of the current collection 
     @Return Return to the new collection object*/
    readonly MongoCollection operator[String];
};
