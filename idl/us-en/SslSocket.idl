/*! @brief SSL network socket interface object 

  SSLSOCKET belongs to the SSL module, creating method 
  `` `Javascript 
  var s = new ssl.socket (); 
  `` `*/
interface SslSocket : Stream
{
    /*! @Brief SSLSOCKET constructor to create a new SSLSOCKET object 

     Certs format: 
     `` `Javascript 
     
         {{ 
             name: "fibjs.org", 
             CRT: [X509cert Object], 
             Key: [pKEY Object] 
         }, 
         {{ 
             name: "*.fibjs.org", 
             CRT: [X509cert Object], 
             Key: [pKEY Object] 
         } 
     ] 
     `` ` 
     @Param Certs server certificate list*/
    SslSocket(Array certs = []);

    /*! @Brief SSLSOCKET constructor to create a new SSLSOCKET object 
     @Param CRT X509cert certificate for client verification server 
     @Param KEY PKEY private key, used to talk to the client*/
    SslSocket(X509Cert crt, PKey key);

    /*! @brief Set the certificate verification mode, the default is Verify_required*/
    Integer verification;

    /*! @Brief certificate chain, the client mode is automatically referenced by SSL.CA when the client mode is automatically referenced by SSLSOCKET.*/
    readonly X509Cert ca;

    /*! @brief connect to the other party's certificate*/
    readonly X509Cert peerCert;

    /*! @Brief connected host name*/
    readonly String hostname;

    /*! @brief query message SSL's lower stream object*/
    readonly Stream stream;

    /*! @brief connect SSL connection on a given connection, client mode 
     @Param S Given the underlying connection 
     @param Server_name specifies the server name, which is capable 
     The @Return connection is successfully returned to 0. When the certificate is optional verification, the verification is unsuccessful and returned to the non -0. See the SSL module in detail*/
    Integer connect(Stream s, String server_name = "") async;

    /*! @brief receives a SSL connection on a given connection and generates a new SSLSOCKET 
     @Param S Given the underlying connection 
     @Return Return to the newly established SSLSOCKET object*/
    SslSocket accept(Stream s) async;
};
