/*! @Brief XML processing module*/
module xml
{
    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLEMENT object*/
    const ELEMENT_NODE = 1;

    /*! @brief xmlnode's nodetype attribute constant, indicating that the node is XMLATTR object*/
    const ATTRIBUTE_NODE = 2;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLTEXT object*/
    const TEXT_NODE = 3;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLCDATASECTION object*/
    const CDATA_SECTION_NODE = 4;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLPROCESSINGINSTRUCTION*/
    const PROCESSING_INSTRUCTION_NODE = 7;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLCOMMENT object*/
    const COMMENT_NODE = 8;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLDOCUMENT object*/
    const DOCUMENT_NODE = 9;

    /*! @Brief XMLNODE's nodetype attribute constant, indicating that the node is XMLDOCUMENTYPE object*/
    const DOCUMENT_TYPE_NODE = 10;

    /*! @Brief XML document object, see XMLDOCUMENT object*/
    static XmlDocument new Document();

    /*! @brief parsing XML/HTML text and creating XMLDOCUMENT objects, do not support multi -language 
      @Param Source specifies XML/HTML text to be parsed 
      @Param Type specifies the text type, the default is Text/XML, or it can be specified as Text/HTML 
      @Return Return to the created XMLDOCUMENT object*/
    static XmlDocument parse(String source, String type = "text/xml");

    /*! @brief parsing XML/HTML and creating XMLDOCUMENT objects, which will be converted according to the specified language during parsing 
      @Param Source specifies the XML/HTML binary data that needs to be parsed 
      @Param Type specifies the text type, the default is Text/XML, or it can be specified as Text/HTML 
      @Return Return to the created XMLDOCUMENT object*/
    static XmlDocument parse(Buffer source, String type = "text/xml");

    /*! @Brief serialized XMLNODE as a string 
      @Param Node specifies XMLNODE that requires serialized 
      @Return Return a serialized string*/
    static String serialize(XmlNode node);
};
