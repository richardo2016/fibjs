/*! @brief console access object 

  Global object. Can be used to prompt information, warning and error records. By starting the configuration file, the log can be located to different devices for tracking. The log support format output, for example: 
  `` `Javascript 
  console.log (" %d + %d = %d", 100, 200, 100 + 200); 
  `` ` 
  The formatting parameters that can be used are as follows: 
  - %s -string 
  - %d -number, including integers and numbers 
  - %j -output object in JSON format 
  -%% -Output character '%' itself*/
module console
{
    /*! @brief loglevel level constant*/
    const FATAL = 0;

    /*! @brief loglevel level constant*/
    const ALERT = 1;

    /*! @brief loglevel level constant*/
    const CRIT = 2;

    /*! @brief loglevel level constant*/
    const ERROR = 3;

    /*! @brief loglevel level constant*/
    const WARN = 4;

    /*! @brief loglevel level constant*/
    const NOTICE = 5;

    /*! @brief loglevel level constant*/
    const INFO = 6;

    /*! @brief loglevel level constant*/
    const DEBUG = 7;

    /*! @Brief Loglevel only used for output, not to be changed after information output, file and syslog does not save this level of information*/
    const PRINT = 9;

    /*! @brief loglevel level constant*/
    const NOTSET = 10;

    /*! @brief output level, used to filter output information, default to notset, all output. After the information is filtered, the devices set to the ADD settings will be output.*/
    static Integer loglevel;

    /*! @brief query terminal number of each line of character*/
    static readonly Integer width;

    /*! @brief query terminal line number*/
    static readonly Integer height;

    /*! @brief adds the console output system, the supporting devices are console, syslog, event, you can add up to 10 output 

      By configured Console, the program output and system error can be sent to different devices for running environmental information collection. 

      Type is configured, for the device name string: 

      `` `Javascript 
      console.add ("console"); 
      `` ` 

      Syslog is only effective on the POSIX platform: 
      `` `Javascript 
      console.add ("syslog"); 
      `` ` 

      Event is only valid on the Windows platform: 
      `` `Javascript 
      console.add ("Event"); 
      `` ` 

      @Param Type output device*/
    static add(String type);

    /*! @brief adds console output system, the supporting devices are console, syslog, event, and file. You can add up to 10 outputs up to 10 outputs

     By configured Console, the program output and system error can be sent to different devices for running environmental information collection.

     CFG can configure the object of a device:
     `` `Javascript
     console.add ({{
        Type: "console",
        Levels: [console.info, console.error] // option, omittind
     });
     `` `

     Syslog is only effective on the POSIX platform:
     `` `Javascript
     console.add ({{
        Type: "Syslog",
        Levels: [console.info, console.error]
     });
     `` `

     Event is only valid on the Windows platform:
     `` `Javascript
     console.add ({{
        Type: "Event",
        Levels: [console.info, console.error]
     });
     `` `

     File log:
     `` `Javascript
     console.add ({{
        Type: "File",
        levels: [console.info, console.error],
        // must options, specify the log output file, you can use S% to specify the insertion date position, and add it to the end without specification
        PATH: "PATH/To/FIG_%S.LOG",
        // Options, the optional value is "Day", "Hour", "Minute", "### K", "### M", "### G", the default is "1m"
        split: "30m",
        // Options, the range of options is 2-128, and the default is 128
        count: 10
     });
     `` `

     @Param CFG output configuration*/
    static add(Object cfg);

    /*! @brief batch the console output system in batches. The supporting devices are console, syslog, event, and file. You can add up to 10 outputs up to 10 outputs 

      By configured Console, the program output and system error can be sent to different devices for running environmental information collection. 

      `` `Javascript 
      console.add (["console", { 
         Type: "Syslog", 
         Levels: [console.info, console.error] 
      }]); 
      `` ` 

      @Param CFG output configuration array*/
    static add(Array cfg);

    /*! @brief initialized to the default settings, only output information in Console*/
    static reset();

    /*! @brief records ordinary log information, equivalent to Info 

      Record the log information of general levels. Usually used to output non -error prompt information. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static log(String fmt, ...args);

    /*! @brief records ordinary log information, equivalent to Info 

      Record the log information of general levels. Usually used to output non -error prompt information. 
      @Param ARGS optional parameter list*/
    static log(...args);

    /*! @Brief Record debug log information 

      Record debug log information. Usually used to output debugging information. unimportant. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static debug(String fmt, ...args);

    /*! @Brief Record debug log information 

      Record debug log information. Usually used to output debugging information. unimportant. 
      @Param ARGS optional parameter list*/
    static debug(...args);

    /*! @brief records ordinary log information, equivalent to logs 

      Record the log information of general levels. Usually used to output non -error prompt information. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static info(String fmt, ...args);

    /*! @brief records ordinary log information, equivalent to logs 

      Record the log information of general levels. Usually used to output non -error prompt information. 
      @Param ARGS optional parameter list*/
    static info(...args);

    /*! @brief record warning log information 

      Record warning log information. Usually used to output prompt debugging information. Generally important. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static notice(String fmt, ...args);

    /*! @brief record warning log information 

      Record warning log information. Usually used to output prompt debugging information. Generally important. 
      @Param ARGS optional parameter list*/
    static notice(...args);

    /*! @brief record warning log information 

      Record warning log information. It is usually used to output warning debugging information. important. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static warn(String fmt, ...args);

    /*! @brief record warning log information 

      Record warning log information. It is usually used to output warning debugging information. important. 
      @Param ARGS optional parameter list*/
    static warn(...args);

    /*! @Brief Record error log information 

      Record for error log information. Usually used to output error information. Very important. The error information of the system will also be recorded in this level. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static error(String fmt, ...args);

    /*! @Brief Record error log information 

      Record for error log information. Usually used to output error information. Very important. The error information of the system will also be recorded in this level. 
      @Param ARGS optional parameter list*/
    static error(...args);

    /*! @Brief Record Key Log Information 

      Records for key error log information. Usually used to output key error information. Very important. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static crit(String fmt, ...args);

    /*! @Brief Record Key Log Information 

      Records for key error log information. Usually used to output key error information. Very important. 
      @Param ARGS optional parameter list*/
    static crit(...args);

    /*! @Brief Record Alarm Error Log Information 

      Recorded for alarm error log information. It is usually used to output alarm error information. Very important. For the highest level information. 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static alert(String fmt, ...args);

    /*! @Brief Record Alarm Error Log Information 

      Recorded for alarm error log information. It is usually used to output alarm error information. Very important. For the highest level information. 
      @Param ARGS optional parameter list*/
    static alert(...args);

    /*! @brief Output objects in JSON format 

      Support the following parameters: 
      `` `Javascript 
      {{ 
          "colors": false, // specify whether the output ANSI color string, the default is false 
          "depth": 2, // specify the number of recursive times when the formatting object, the default is 2 
          "Table": false, // Specify the output table format, the default is false 
          "Encode_string": true, // Specify whether the string in the table is encoded, and the default is true. 
          "fields": [], // When table specifies the display field when TRUE 
      } 
      `` ` 
      @param obj specifies the object to be processed 
      @Param Options specified format control option*/
    static dir(Value obj, Object options = {});

    /*! @brief Output objects in JSON format 
      @param Obj given the object you want to display*/
    static table(Value obj);

    /*! @brief Output objects in JSON format 
      @param Obj given the object you want to display 
      @param Fields Given the field to display*/
    static table(Value obj, Array fields);

    /*! @brief Start a timer 

      @Param Label title, the default is an empty string.*/
    static time(String label = "time");

    /*! @brief output specified timer current timing value 

      @Param Label title, the default is an empty string.*/
    static timeElapse(String label = "time");

    /*! @brief end the specified timer and output the final timing value 

      @Param Label title, the default is an empty string.*/
    static timeEnd(String label = "time");

    /*! @Brief output currently calls stack 

      The current call stack is currently called through the log output. 
      @Param Label title, the default is an empty string.*/
    static trace(String label = "trace");

    /*! @brief asserted the test. If the test value is false, report an error 
      @Param Value test value 
      @Param MSG error message*/
    static assert(Value value, String msg = "");

    /*! @Brief outputs format text to the console, the output content will not be recorded in the log system, the output text will not be automatically changed, it can be continuously output 
      @Param FMT format format string 
      @Param ARGS optional parameter list*/
    static print(String fmt, ...args);

    /*! @Brief outputs format text to the console, the output content will not be recorded in the log system, the output text will not be automatically changed, it can be continuously output 
      @Param ARGS optional parameter list*/
    static print(...args);

    /*! @brief mobile console cursor to the specified location 
      @Param Row specifies the row coordinates of the new cursor 
      @Param Column specify the coordinates of the new cursor*/
    static moveTo(Integer row, Integer column);

    /*! @brief Hidden Console Cushion*/
    static hideCursor();

    /*! @brief Display the console cursor*/
    static showCursor();

    /*! @brief Clear Console*/
    static clear();

    /*! @brief Press a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key, which can be: Control, Alt, Shift, Command*/
    static keyDown(String key, String modifier = "");

    /*! @brief Press a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key array, which can be: Control, Alt, Shift, Command*/
    static keyDown(String key, Array modifier);

    /*! @brief release a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key, which can be: Control, Alt, Shift, Command*/
    static keyUp(String key, String modifier = "");

    /*! @brief release a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key array, which can be: Control, Alt, Shift, Command*/
    static keyUp(String key, Array modifier);

    /*! @brief click and loosen a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key, which can be: Control, Alt, Shift, Command*/
    static keyTap(String key, String modifier = "");

    /*! @brief click and loosen a button 

      Parameter key can use the string to pass the function key: 
      -F function key: F1 -F12 
      -V orient key: up, down, left, right, home, end, pageup, pagedown 
      -Che Edit: Backspace, Delete, Insert, Enter, TAB, Escape, Space 
      -The control key: Control, ALT, Shift, Command 
      @Param key specify the button, the single character is passed directly, the function key is passed into the name 
      @Param Modifier specify the control key array, which can be: Control, Alt, Shift, Command*/
    static keyTap(String key, Array modifier);

    /*! @brief Enter a string 
      @param text specify the input string*/
    static typeString(String text);

    /*! @brief Move Mouse to the specified location 
      @param x specifies X coordinates 
      @param y Specify y coordinates*/
    static moveMouse(Integer x, Integer y);

    /*! @Brief Press a mouse button 
      @Param Button specify the name of the mouse key, the allowable value is: left, right, moddle*/
    static mouseUp(String button);

    /*! @brief Plies a mouse button 
      @Param Button specify the name of the mouse key, the allowable value is: left, right, moddle*/
    static mouseDown(String button);

    /*! @brief click a mouse button 
      @Param Button specify the name of the mouse key, the allowable value is: left, right, moddle 
      @param dbclick specifies whether to double -click, the default is false*/
    static clickMouse(String button, Boolean dbclick = false);

    /*! @brief read user input from the console 
      @Param MSG reminder information 
      @Return Return to the user input information*/
    static String readLine(String msg = "") async;

    /*! @Brief read the user input password from the console 
      @Param MSG reminder information 
      @Return Return to the password entered by the user*/
    static String getpass(String msg = "") async;
};
