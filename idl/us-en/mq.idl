/*! @Brief Message Questing Module*/
module mq
{
    /*! @brief Create a message object, see Message*/
    static Message;

    /*! @brief Create an object of HTTP protocol processor, see HTTPHANDLER*/
    static HttpHandler;

    /*! @brief Create a message processor object, and the transmitted value built -in processor returns directly

     HDLR accepts a built -in message processor, processing function, chain processing array, routing object:
     -Function javascript function, use this function for processing
     -HANDLER built -in processor to use this processor for processing
     -Finking the array, equivalent to returning New MQ.chain (HDLR), see Chain
     -The route object is equivalent to returning New mq.routing (HDLR), see routing

     Message processing function syntax is as follows:
     `` `Javascript
     Function func (v) {
     }
     `` `
     Parameter V is the message that is being processed, and there are four types of returning results:
     -Function javascript function, this function will be used for the next stage
     -HANDLER built -in processor, use this processor here for the next stage processing
     -Chequet array, equivalent to New mq.chain (v), see chain
     -The route object, equivalent to new mq.routing (v), see routing

     No return or other returns will end the message processing.
     @Param HDLR built -in message processor, processing function, chain processing array, routing object
     @Return returns a processor that encapsulates the processing function*/
    static Handler;

    /*! @brief Create a message processor chain processing object, see chain*/
    static Chain;

    /*! @brief Create a message processor routing object, see routing*/
    static Routing;

    /*! @brief Create an air processor object, and the secondary processing object does not do any processing directly to return 
      @Return Return to the empty processing function*/
    static Handler nullHandler();

    /*! @brief uses a given processor to process a message or object 

     Different from the Invoke method of the processor, this method will recall the return processor of each processor to the processor until the processor returns NULL. 
      @Param HDLR specified processor used 
      @Param V specified the message or object to be processed*/
    static invoke(Handler hdlr, object v) async;
};
