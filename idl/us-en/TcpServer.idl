/*! @Brief TCP server object, which can be convenient to create a standard multi -fiber TCP server 

  Use the TCPSERVER object to quickly create a TCP server with a multi -fiber -end concurrent processing process. 
  `` `Javascript 
  Function func (conn) 
  {{ 
      var data; 

      While (data = conn.read ())) 
          conn.write (data); 

      conn.close (); 
  } 

  new net.tcpserver (8080, func) .start (); 
  `` `*/
interface TcpServer : object
{
    /*! @brief TCPSERVER constructor, listening to all the address of this machine 
     @Param Port specify the TCP server listening port 
     @Param Listener specifies the built -in message processor received by TCP, processing functions, chain processing array, routing object, see mq.handler for details*/
    TcpServer(Integer port, Handler listener);

    /*! @brief TCPSERVER constructor 
     @Param ADDR specify the TCP server listening address, for "" all addresses in this machine to listen to 
     @Param Port specify the TCP server listening port 
     @Param Listener specifies the built -in message processor, processing function, chain processing array, routing object, please refer to mq.handler*/
    TcpServer(String addr, Integer port, Handler listener);

    /*! @brief TCPSERVER constructor 
     @Param addr specifies Unix Socket or Windows PIPE server listening address 
     @Param Listener specifies the built -in message processor, processing function, chain processing array, routing object, please refer to mq.handler*/
    TcpServer(String addr, Handler listener);

    /*! @brief Start the current server*/
    start();

    /*! @brief Turn off the socket to stop the server that is running*/
    stop() async;

    /*! @Brief server currently listened to the socket object*/
    readonly Socket socket;

    /*! @brief server current event processing interface object*/
    Handler handler;
};
