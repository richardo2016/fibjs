/*! @Brief XMLNODE object is the basic data type of the entire DOM*/
interface XmlNode : object
{
    /*! @brief Return to the node type of node 

      Nodetype of different objects will return different values: 
      -XMLELEMENT: Element_node (1) 
      -XMLATTR: Attribute_node (2) 
      -XmlText: Text_node (3) 
      -Xmlcdatasection: cdata_section_node (4) 
      -XmlProcessingInstruction: Processing_instruction_node (7) 
      -XmlComment: Comments_node (8) 
      -XMLDOCUMENT: DOCUMENT_NODE (9) 
      -XMLDOCUMENTTYPE: DOCUMENT_TYPE_NODE (10)*/
    readonly Integer nodeType;

    /*! @brief Return to the name of the node, according to its type 

      Nodenames of different objects return different values: 
      -Xmlelement: Element name 
      -XMLATTR: Attribute name 
      -XmlText: \ #Text 
      -Xmlcdatasection: \#cdata-section 
      -XmlProcessingInstruction: Returns the specified target target 
      -Xmlcomment: \ #Comment 
      -Xmldocument: \ #document 
      -XMLDOCUMENTTYPE: DOCTYPE Name*/
    readonly String nodeName;

    /*! @brief Return to the name of the node, according to its type 

      Nodenames of different objects return different values: 
      -Xmlelement: null 
      -XMLATTR: The value of the attribute 
      -Xmltext: Node content 
      -Xmlcdatasection: The content of the node 
      -XmlProcessingInstruction: Return to the specified content data 
      -Xmlcomment: Note text 
      -Xmldocument: null 
      -XMLDOCUMENTTYPE: NULL*/
    String nodeValue;

    /*! @Brief Return to the root of the node (XMLDOCUMENT object)*/
    readonly XmlDocument ownerDocument;

    /*! @brief can return to the parent node of a node*/
    readonly XmlNode parentNode;

    /*! @brief query whether there are sub -nodes 
      @Return returns true when any sub -node is existed, otherwise it will return false*/
    Boolean hasChildNodes();

    /*! @Brief Return to the node list of the sub -node of the specified node*/
    readonly XmlNodeList childNodes;

    /*! @Brief Back to the first sub -node of the node*/
    readonly XmlNode firstChild;

    /*! @Brief Return to the last sub -node of the node*/
    readonly XmlNode lastChild;

    /*! @Brief returned to a node (at the same tree level) before a node. If there is no such node, then the attribute returns NULL*/
    readonly XmlNode previousSibling;

    /*! @Brief returns a node (at the same tree level) after returning a certain element. If there is no node, the attribute returns NULL*/
    readonly XmlNode nextSibling;

    /*! @Brief merged with adjacent Text nodes and delete the empty Text node 

     This method will traverse all the descendants of the current node. By deleting the empty Text node, all adjacent Text nodes have been merged to standardize documents. This method is useful for simplifying the structure of the document tree after insertion or deleting the node.*/
    normalize();

    /*! @Brief Create a precise copy of the specified node 

      This method will be copied and returned to the copy of the node that calls it. If the parameter passed to it is True, it will also recurs all the descendants nodes of the current node. Otherwise, it only copys the current node. The returned node does not belong to the document tree, and its Parentnode attribute is null. When the Element node is copied, all its attributes will be copied. 
      Whether the @Param Deep is deeply copied, when it is true, all sub -nodes of the clone node of the cloning node will be 
      @Return Return to the node copying*/
    XmlNode cloneNode(Boolean deep = true);

    /*! @brief returns the prefix of the specified name space URI on the current node 
      @param namespaceuri specifies the matching name space URI 
      @Return Returns the matching prefix, not matched to return NULL*/
    String lookupPrefix(String namespaceURI);

    /*! @Brief returns the name space of the specified prefixed on the current node 
      @param Prefix specified the matching prefix 
      @Return Returns the matched naming space URI, not matched to return NULL*/
    String lookupNamespaceURI(String prefix);

    /*! @brief Insert a new sub -node before the existing child node 

      If newChild already exists in the document tree, it will be deleted from the document tree, and then reinsert its new position. Nodes (or nodes created by one document) from one document cannot insert another document. In other words, NewChild's OWNERDOCUMENT attributes must be the same as the OwnerDocument attributes of the current node. 
      @param NewChild insert new nodes 
      @Param Refchild inserted a new node in front of this node 
      @Return Return to the new sub -node*/
    XmlNode insertBefore(XmlNode newChild, XmlNode refChild);

    /*! @brief Insert a new child node after the existing sub -node 

      If newChild already exists in the document tree, it will be deleted from the document tree, and then reinsert its new position. Nodes (or nodes created by one document) from one document cannot insert another document. In other words, NewChild's OWNERDOCUMENT attributes must be the same as the OwnerDocument attributes of the current node. 
      @param NewChild insert new nodes 
      @Param Refchild inserted a new node after this node 
      @Return Return to the new sub -node*/
    XmlNode insertAfter(XmlNode newChild, XmlNode refChild);

    /*! @Brief to the end of the node sub -node list to add a new child node 

      If newChild already exists in the document tree, it will be deleted from the document tree, and then reinsert its new position. Nodes (or nodes created by one document) from one document cannot insert another document. In other words, NewChild's OWNERDOCUMENT attributes must be the same as the OwnerDocument attributes of the current node. 
      @Param Newchild specified the added node 
      @Return Return to this new sub -node*/
    XmlNode appendChild(XmlNode newChild);

    /*! @brief replaced a sub -node with another 

      If newChild already exists in the document tree, it will be deleted from the document tree, and then reinsert its new position. Nodes (or nodes created by one document) from one document cannot insert another document. In other words, NewChild's OWNERDOCUMENT attributes must be the same as the OwnerDocument attributes of the current node. 
      @param newchild specifies new nodes 
      @param OldChild specified the replaced node 
      If @Return is successful, this method can return to the replaced node. If the replacement fails, it will return NULL*/
    XmlNode replaceChild(XmlNode newChild, XmlNode oldChild);

    /*! @Brief Delete a node from the sub -node list 
      @param OldChild specifies the deleted nodes 
      @Return If the deletion is successful, this method can return the deleted node. If it fails, return NULL*/
    XmlNode removeChild(XmlNode oldChild);
};
