/*! @Brief xmlelement object indicates the elements in the XML document*/
interface XmlElement : XmlNode
{
    /*! @Brief query the URI of the naming space of the element. If the selected node has no name space, the attribute returns NULL*/
    readonly String namespaceURI;

    /*! @brief query and set the naming space prefix. If the selected node has no name space, the attribute returns NULL*/
    String prefix;

    /*! @brief query the local name of the element. If the selected node has no name space, the attribute is equivalent to nodename*/
    readonly String localName;

    /*! @brief Return to the label name of the element*/
    readonly String tagName;

    /*! Query and set the ID attribute of the element*/
    String id;

    /*! Query and set the text of selected elements. When query, return all the value of all text nodes in the element node; delete all sub -nodes when setting, and replace them with a single text node.*/
    String textContent;

    /*! Query and set the HTML text of the selected element, which is only valid in the HTML mode. During the query, return the HTML encoding of all sub -nodes in the element node; when setting, delete all sub -nodes and replace them with the specified HTML decoding.*/
    String innerHTML;

    /*! Query and set the class attribute of the element, only valid in the HTML mode*/
    String className;

    /*! @brief returns namednodemap containing the selected node attribute. If the selected node is not an element, the attribute returns NULL.*/
    readonly XmlNamedNodeMap attributes;

    /*! @brief query the value of the attribute through the name 
      @param name Specify the attribute name of the query 
      @Return Return to the value of the attribute*/
    String getAttribute(String name);

    /*! @brief obtained the attribute value by naming space URI and name 
      @param namespaceuri specifies the name space of the query URI 
      @param localName specify the attribute name of the query 
      @Return Return to the value of the attribute*/
    String getAttributeNS(String namespaceURI, String localName);

    /*! @Brief Create or change a new attribute 

      This method sets the specified attribute to the specified value. If there is no attribute with a specified name, this method will create a new attribute 
      @param name Specify the attribute name to be set 
      @Param Value specify the attribute value to be set*/
    setAttribute(String name, String value);

    /*! @Brief created or changed attributes with naming space 

      This method is similar to the settattribute method, but the attributes to be created or set are specified by the naming space URI and limited name (consisting of the name space prefix, the local name of the colon and the name space). In addition to changing the value of a attribute, the use of this method can also change the name space prefix of the attribute 
      @param namespaceuri specifies the name space URI to be set 
      @param Qualifydname specifies the attribute name to be set 
      @Param Value specify the attribute value to be set*/
    setAttributeNS(String namespaceURI, String qualifiedName, String value);

    /*! @brief delete the specified attribute through the name 
      @param name Specify the attribute name of the delete*/
    removeAttribute(String name);

    /*! @brief Delete the specified attribute by naming space and name 
      @param namespaceuri specifies the name space to be deleted URI 
      @Param LocalName specifies the attribute name of delete*/
    removeAttributeNS(String namespaceURI, String localName);

    /*! @brief query whether the current node has the attribute of the specified name 
      @param name Specify the attribute name of the query 
      @Return If the current element node has a specified attribute, then return to TRUE, otherwise returns false*/
    Boolean hasAttribute(String name);

    /*! @brief query whether the current node has the attributes of specified name and name 
      @param namespaceuri specifies the name space URI to be queried 
      @Param LocalName specify the attribute name of the query 
      @Return If the current element node has a specified attribute, then return to TRUE, otherwise returns false*/
    Boolean hasAttributeNS(String namespaceURI, String localName);

    /*! @Brief returns XMLNODELIST, which has all elements with specified names 

      This method will traverse the descendants of the specified element to return an XMLNODELIST object with an XMLELEMENT node, indicating all document elements with specified label names. The order of elements in the array returned is the order they appear in the document source code. 

      The XMLDOCUMENT interface also defines the GetelementsBytagname method. It is similar to this method, but traverses the entire document, instead of traversing the descendants nodes of a certain element. 
      @Param Tagname requires the label name. Value "*" match all the tags 
      @Return node tree has a XMLNODELIST set at the specified tagged XMLEMENT node. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByTagName(String tagName);

    /*! @Brief returns XMLNODELIST, which has all elements with specified names and names 

      This method is similar to the GetelementsBytagname method, but the mark name of the element you want to get is specified as a combination of naming space URI and a local name defined in the name space. 
      @param namespaceuri specifies the name space URI to be queried 
      @Param LocalName label name. Value "*" match all the tags 
      @Return node tree has a XMLNODELIST set at the specified tagged XMLEMENT node. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByTagNameNS(String namespaceURI, String localName);

    /*! @brief returns elements with specified ID attributes 

      This method will traverse the descent node of the specified element to return an XMLEMENT node object, indicating the first document element with a specified ID attribute. Essence 

      The XMLDOCUMENT interface also defines the GetelementsBytagname method. It is similar to this method, but traverses the entire document, instead of traversing the descendants nodes of a certain element. 
      @Param ID needs to retrieve the ID 
      @Return node tree with XMLELEMENT node with specified ID attributes*/
    XmlElement getElementById(String id);

    /*! @Brief returns a list of nodes with all elements with specified class names 

      This method will return an XMLNODELIST object (can be treated as an array only). The object stores all XMLELEMENT nodes with specified class names. The order of their storage is the order of appearing in the source document. The XMLNODELIST object is "alive", that is, if the element of the specified label name is added or deleted in the document, its content will automatically update the necessary. 
      @Param className Class name needs to be retrieved 
      The @Return document tree has a XMLNODELIST set at the XMLELEMENT node specifies the class name. The order of the returned element nodes is the order they appear in the source document.*/
    XmlNodeList getElementsByClassName(String className);
};
