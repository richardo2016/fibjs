/*! @Brief lru (Least Recently Used) cache object 

  Lrucache is used to maintain a LRU cache and create method: 
  `` `Javascript 
  var util = request ("Util"); 
  var C = New Util.lrucache (10, 100); 
  `` `*/
interface LruCache : EventEmitter
{
    /*! @brief lrucache object constructor 
      @Param Size cache maximum size 
      @Param Timeout element failure time, the unit is MS, less than equal to 0 without fail, the default is 0*/
    LruCache(Integer size, Integer timeout = 0);

    /*! @brief query the number of values in the container*/
    readonly Integer size;

    /*! @brief query and set the element failure time in the containe*/
    Integer timeout;

    /*! @brief Clear container data*/
    clear();

    /*! @brief check the data of the specified key value in the container 
      @param name Specify the key value to be checked 
      @Return Return the key value exists*/
    Boolean has(String name);

    /*! @brief query the value of the specified key value 
      @param name Specify the key value you want to query 
      @Return Returns the value corresponding to the key value, if it does not exist, return to UNDEFINED*/
    Value get(String name);

    /*! @brief query the value of the specified key value, if there is no existence or expire, call the callback function update data 
      @param name Specify the key value you want to query 
      @Param Updater specify the update function 
      @Return Return the value corresponding to the key value*/
    Value get(String name, Function updater);

    /*! @Brief Set a key data, if the key value does not exist, insert a new data 
      @param name specify the key value to be set 
      @Param Value specify data to be set*/
    set(String name, Value value);

    /*! @Brief Set a key data data, the key value does not exist, and insert new data 
      @Param Map specifies the key value data dictionary to be set*/
    set(Object map);

    /*! @brief deletes all the value of the specified key value 
      @param name specify the key value to be deleted*/
    remove(String name);

    /*! @brief check whether the container is empty 
      The countless values in the @Return container returned True*/
    Boolean isEmpty();

    /*! @brief query and binding data overtime events, equivalent to on ("expire", func);*/
    Function onexpire;
};
