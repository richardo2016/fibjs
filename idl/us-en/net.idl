/*! @brief network access module 

  Basic module. Can be used to create and operate network resources, reference methods: 
  `` `Javascript 
  var net = request ('net'); 
  `` `*/
module net
{
    /*! @Brief address setting constant amount, specify the unix socket*/
    const AF_UNIX = 1;

    /*! @brief address setting constant amount, specify Windows Pipe*/
    const AF_PIPE = 1;

    /*! @brief address setting constant amount, specify IPv4*/
    const AF_INET = 2;

    /*! @brief address setting constant amount, specify IPv6*/
    const AF_INET6 = 10;

    /*! @brief query and set whether the Socket backend uses UV, the default is false*/
    static Boolean use_uv_socket;

    /*! @brief query the current operating environment network information 
      @Return Return to the network card information*/
    static Object info();

    /*! @brief query the address of the given host name 
      @param name designated host name 
      @Param Family specifies the query return type, the default is AF_inet 
      @Return Return to query IP string*/
    static String resolve(String name, Integer family = AF_INET) async;

    /*! @brief The host address of the fast query, equivalent and resolve (name) 
      @param name designated host name 
      @Return Return to query IP string*/
    static String ip(String name) async;

    /*! @brief The host IPv6 address of the fast query, equivalent and resolve (name, net.af_inet6) 
      @param name designated host name 
      @Return back to query ipv6 string*/
    static String ipv6(String name) async;

    /*! @Brief Create a socket object, see socket*/
    static Socket;

    /*! @Brief Create a socket or SSLSOCKET object and create a connection 
      @Param URL specifies the protocol of the connection, which can be: TCP: // Host: Port or SSL: // Host: Port, or it can also be:/usr/local/proc1 or pipe: //pipe/proc1, When connecting pipe, you need to replace it with `/` 
      @param timeout specifies the timeout time, the unit is milliseconds, the default is 0 
      @Return Returns the successful connection Socket or SSLSOCKET object*/
    static Stream connect(String url, Integer timeout = 0) async;

    /*! @brief Create a SMTP object, see SMTP*/
    static Smtp;

    /*! @brief Create a SMTP object and build a connection. See SMTP 
      @Param url specifies the protocol, it can be: tcp: // host: port or ssl: // host: port 
      @param timeout specifies the timeout time, the unit is milliseconds, the default is 0 
      @Return Return to the successful SMTP object*/
    static Smtp openSmtp(String url, Integer timeout = 0) async;

    /*! @brief Create a TCPSERVER object, see TCPSERVER*/
    static TcpServer;

    /*! @Brief Create a Urlobject object, see urlobject*/
    static UrlObject new Url();

    /*! @brief query the current system asynchronous network engine 
      @Return Return to the network engine name*/
    static String backend();

    /*! @brief test whether the input is an IP address 
      @param ip specify the string to be detected 
      @Return's illegal IP address, return 0, if it is IPv4, return 4, if it is IPv6, return 6*/
    static Integer isIP(String ip = "");

    /*! @brief detect whether the input is an IPv4 address 
      @param ip specify the string to be detected 
      @Return If it is an IPv4, return true. Otherwise, return false*/
    static Boolean isIPv4(String ip = "");

    /*! @brief detect whether the input is an IPv6 address 
      @param ip specify the string to be detected 
      @Return If it is an IPv6, return true. Otherwise, return false*/
    static Boolean isIPv6(String ip = "");
};
