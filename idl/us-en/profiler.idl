/*! @Brief memory propiler module 

  Instructions: 
  `` `Javascript 
  var propiler = reques ('Profiler'); 
  `` `*/
module profiler
{
    /*! @brief hidden nodes, when it is displayed to the user, it can be filtered out*/
    const Node_Hidden = 0;

    /*! @brief array*/
    const Node_Array = 1;

    /*! @Brief Strings*/
    const Node_String = 2;

    /*! @Brief JS object (except string and array)*/
    const Node_Object = 3;

    /*! @Brief compiled code*/
    const Node_Code = 4;

    /*! @brief function closure*/
    const Node_Closure = 5;

    /*! @brief regular expression*/
    const Node_RegExp = 6;

    /*! @Brief Display numbers in the order*/
    const Node_HeapNumber = 7;

    /*! @Brief Native object (non -V8 pile)*/
    const Node_Native = 8;

    /*! @Brief Synthetic object*/
    const Node_Synthetic = 9;

    /*! @Brief stitching string string*/
    const Node_ConsString = 10;

    /*! @Brief splitted string*/
    const Node_SlicedString = 11;

    /*! @brief symbol (ES6)*/
    const Node_Symbol = 12;

    /*! @Brief SIMD value (ES7)*/
    const Node_SimdValue = 13;

    /*! @Brief function variable*/
    const Edge_ContextVariable = 0;

    /*! @Brief elements in the array*/
    const Edge_Element = 1;

    /*! @Brief's attributes of famous objects*/
    const Edge_Property = 2;

    /*! @brief js unable to enter*/
    const Edge_Internal = 3;

    /*! @brief points to nodes that need to calculate the size of space in advance*/
    const Edge_Hidden = 4;

    /*! @brief points to nodes that cannot be calculated in advance*/
    const Edge_Shortcut = 5;

    /*! @brief A weak reference (ignored by GC)*/
    const Edge_Weak = 6;

    /*! @brief Get the statistical information of the code and its metadata in the pile of the pile 
      @Return Return to statistical information of metadata*/
    static Object getHeapCodeStatistics();

    /*! @Brief Get the detailed usage of V8 pile memory 
      @Return Return to the detailed usage of the heap memory*/
    static Array getHeapSpaceStatistics();

    /*! @brief Get the statistical information of the use of V8 pile of memory 
      @Return back to the statistical information of the use of pile memory*/
    static Object getHeapStatistics();

    /*! @Brief save a pile of snapshot according to the specified name 
 @param FNAME Packing Snapshot Name*/
    static saveSnapshot(String fname);

    /*! @brief Read a pile of snapshot according to the specified name 
 @param FNAME Packing Snapshot Name 
 @Return Return to read the pile of snacks*/
    static HeapSnapshot loadSnapshot(String fname);

    /*! @brief Get the reserved Snapshot of the current time node, and the stack of snapshot records the status of JS heap at the current moment 
 @Return Return to the obtained pile information snapshot*/
    static HeapSnapshot takeSnapshot();

    /*! @Brief execute a given function and compare the changes in the V8 heap before and after execution 
 @param test given to a function to test 
 @Return returns the result of comparison*/
    static Object diff(Function test);

    /*! @brief Start a running status sampling log 
 @Param FNAME given log storage file name 
 @Param Time specify the sampling time, the default is 1 minute 
 @Param Interval specify the interval time, the default 100 milliseconds 
      @Return Return the sampling timer, you can stop sampling in advance through the clear method*/
    static Timer start(String fname, Integer time = 60000, Integer interval = 100);
};
