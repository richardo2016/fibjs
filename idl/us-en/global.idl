/*! @Brief global object, all scripts can access the basic objects*/
module global
{
    /*! @Brief Dual Data cache object, for data processing for IO reading and writing, see the Buffer object.*/
    static Buffer;

    /*! @Brief TextDecoder decoder, see the TextDecoder object.*/
    static TextDecoder;

    /*! @Brief TextenCoder encoded objects, see the TextenCoder object.*/
    static TextEncoder;

    /*! @brief console access object*/
    static console;

    /*! @brief process object*/
    static process;

    /*! @Brief Worker Owner Objective, only effective at the Worker entrance script*/
    static readonly Worker Master;

    /*! @brief global object*/
    static readonly Object global;

    /*! @brief Run a script 
      @Param FNAME specify the script path to run 
      @Param ARGV specifies the parameters to be run, this parameter can be used in the script to obtain*/
    static run(String fname, Array argv = []);

    /*! @brief Load a module and return to the module object. For more information, see @ref Module

     Require can be used to load basic modules and file modules.

     The basic module is a module initialized during the creation of the sandbox. When reference, you only need to pass the corresponding ID, such as requiss ("net").

     The file module is a user -defined module. When referenced, the relative path begins with ./ or ../. The file module supports .js, .jsc and .json files.

     The file module also supports the Package.json format. When the module is the directory structure, the REQUIRE will first query the main in the Package.json. If not found, try to load the index.js, index.jsc, or index.json under the road diameter.

     If the reference path is not ./ or ../, and the non -basic module, Require finds node_modules from the current module path, and the superior directory recursively recursively.

     The basic process is as follows:

     `` `dot
        digraph {
            node [fontname = "Helvetica, Sans-Serif", fontsize = 10];
            Edge [fontname = "Helvetica, Sans-Serif", fontsize = 10];

            start [label = "start"];
            resolve [label = "path.Resolve" shape = "Rect"];
            Search [label = "recursive lookup \ nnode_modules \ nfrom the current path" shape = "Rect"];
            load [label = "load" shape = "Rect"];
            end [label = "end" shape = "doublecircle"];

            is_native [label = "is internaly module?" shape = "diamond"];
            is_mod [label = "is module?" shape = "diamond"];
            is_abs [label = "is absolute?" shape = "diamond"];
            have_file [label = "module exists?" shape = "diamond"];
            have_ext [label = "module.js exists?" shape = "diamond"];
            have_package [label = "/package.json \ nexists?" shape = "diamond"];
            have_main [label = "main exists?" shape = "diamond"];
            have_index [label = "index.js exists?" shape = "diamond"];

            start-> is_native;
            is_native-> end [label = "yes"];
            is_native-> is_mod [label = "no"];
            is_mod-> search [label = "yes"];
            search-> has_file;
            is_mod-> is_abs [label = "no"];
            is_abs-> have_file [label = "yes"];
            is_abs-> resolve [label = "no"];
            Resolve-> have_file;
            have_file-> load [label = "yes"];
            have_file -> have_ext [label = "no"];
            have_ext-> load [label = "yes"];
            have_ext-> have_package [label = "no"];
            have_package-> has_main [label = "yes"];
            have_package-> has_index [label = "no"];
            have_main-> load [label = "yes"];
            have_main-> have_index [label = "no"];
            have_index-> ​​load [label = "yes"];
            have_index-> ​​end [label = "no"];
            load-> end;
        }
     `` `

     @param ID specifies the module name to be loaded
     @Return Return to the leading object of the loading module*/
    static Value require(String id);

    /*! @brief Get the running parameters of the current script, start the JS to get the process startup parameter, and the script executed by RUN obtain the pass parameter*/
    static readonly Array argv;

    /*! @brief The current script file name*/
    static readonly String __filename;

    /*! @Brief Current Script Directory*/
    static readonly String __dirname;

    /*! @Brief calls the function after the specified time 
     @param callback specify the callback function 
     @Param Timeout specifies the delay time, in milliseconds. If you exceed 2^31, execute immediately. 
     @Param ARGS additional parameters are passed into the specified callback, optional. 
     @Return Return the timer object*/
    static Timer setTimeout(Function callback, Number timeout = 1, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearTimeout(Value t);

    /*! @brief Moist the function after the specified time of each interval 
      @param callback specify the callback function 
      @Param Timeout specifies the interval time, in milliseconds. If you exceed 2^31, execute immediately. 
      @Param ARGS additional parameters are passed into the specified callback, optional. 
      @Return Return the timer object*/
    static Timer setInterval(Function callback, Number timeout, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearInterval(Value t);

    /*! @brief Moist the function after the specified time of each interval.
     Since the timer of Sethrinterval is interrupted by the running coding of the code, do not modify the data that may affect other modules in the callback function, or call any API function marked as Async in the callback, otherwise the unpredictable results will be produced. E.g:
     `` `Javascript
        var timers = request ('timers');

        var cnt = 0;
        Timers.setHrinterval (() => {
            CNT ++;
        }, 100);

        WHILE (CNT <10);

        console.error ("================================================================================================================================================== >=
     `` `
     In this code, the cycle of line 8 will not end due to the change of CNT, because JavaScript will determine that CNT will not be changed during this cycle when optimizing the code.
     @param callback specify the callback function
     @Param Timeout specifies the interval time, in milliseconds. If you exceed 2^31, execute immediately.
     @Param ARGS additional parameters are passed into the specified callback, optional.
     @Return Return the timer object*/
    static Timer setHrInterval(Function callback, Number timeout, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearHrInterval(Value t);

    /*! @brief Immediately execute the callback function immediately 
      @param callback specify the callback function 
      @Param ARGS additional parameters are passed into the specified callback, optional. 
      @Return Return the timer object*/
    static Timer setImmediate(Function callback, ...args);

    /*! @brief Clear the specified timer 
      @Param T specify the timer to be cleared*/
    static clearImmediate(Value t);

    /*! @Brief encoded data in a base64 way 
 @param data to encode data 
 @Param URL specifies whether to use URL security character encoding 
 @Return Return the encoded string*/
    static String btoa(Buffer data, Boolean url = false);

    /*! @brief decoding the string in the base64 method as the binary data 
 @param data string to decoding 
 @Return Return to decoding binary data*/
    static Buffer atob(String data);

    /*! @brief forced request for garbage recycling*/
    static GC();
};
